Mass_balance <- M_input - (M_art + M_venous + M_gills + M_lumen + M_lumen_2 +
M_viscera + M_liver + M_kidney + M_muscle +
M_skin + M_carcass + M_storage + M_urine + M_feces)
return(list(c('dM_art'=dM_art, 'dM_venous'=dM_venous,
'dM_gills'=dM_gills, 'dM_lumen'=dM_lumen, 'dM_lumen_2'=dM_lumen_2,
'dM_viscera'=dM_viscera, 'dM_Liver'=dM_Liver,
'dM_kidney'=dM_kidney, 'dM_muscle'=dM_muscle,
'dM_skin'=dM_skin, 'dM_carcass'=dM_carcass, 'dM_storage'=dM_storage,
'dM_urine'=dM_urine, 'dM_feces'=dM_feces, 'dM_input'=dM_input),
'C_Gills'=C_gills, 'C_Viscera'=C_viscera,
'C_Liver'=C_liver, 'C_Kidney'=C_kidney, 'C_Muscle'=C_muscle,
'C_Skin'=C_skin, 'C_Carcass'=C_carcass, 'C_Lumen'=C_lumen,
'C_Blood'=C_blood*plasma,
'Mass_balance'=Mass_balance, 'BW'=BW))
})
}
#======================#
#  Objective Function  #
#======================#
obj_f <- function(x, constant_theta, constant_theta_name, params_names, constant_params=NULL,
data_df, errors_df){
if(!is.null(constant_theta)){
if(length(constant_theta_name) != length(constant_theta)){
stop("The constant_theta_name vector must be of equal length with the constant_theta vector")
}
for (j in 1:length(constant_theta)){
assign(constant_theta_name[j], 10^constant_theta[[j]])
}
}
# Assign the values of the x vector to the corresponding parameters
if(length(x) != length(params_names)){
stop("The params_names must be of equal length with the x vector")
}
for (k in 1:length(x)) {
assign(params_names[k], 10^x[k])
}
if(!is.null(constant_params)){
for (k in 1:length(constant_params)) {
assign(names(constant_params)[k], constant_params[[k]])
}
}
params <- create.params(user.input)
inits <- create.inits(params)
events <- create.events(params)
sample_time <- seq(0,56*24,2)
# Time of measurement of selected PFAS
exp_time <- data_df[,1]
pbk_params <- c('P_liver'=P_liver[[1]], 'P_muscle'=P_muscle[[1]], 'P_kidney'=P_kidney[[1]],
'P_skin'=P_skin[[1]], 'P_gills'=P_gills[[1]], 'P_carcass'=P_carcass[[1]],
'P_viscera'=P_viscera[[1]], 'Cl_feces'=Cl_feces[[1]], 'Cl_urine'=Cl_urine[[1]],
'Ku'=Ku[[1]])
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = c(pbk_params,params),
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
output_variables <- c('C_Liver', 'C_Blood',
'C_Skin', 'C_Muscle', 'C_Gills',
'C_Kidney', 'C_Carcass')
if(sum(solution$time %in% exp_time) == length(exp_time)){
results <- solution[which(solution$time %in% exp_time), output_variables]*1000
}else{
stop(print("Length of predictions is not equal to the length of data"))
}
score <- c()
# Estimate WSSR for every output variable with available data
for (i in 1:length(output_variables)) {
score[i] <- WSSR(list(data_df[1,i+1]), list(results[1,i]), list(errors_df[1,i+1]))
}
average_score <- mean(score)
return(average_score)
}
profile_likelihood_plots <- function(analysis_results, thetas, global_optimum, alpha = 0.95,
df = 1){
output <- analysis_results$Likelihood_profiles
plot_list <- list()
for (i in 1:length(output)) {
data_to_plot <- output[[i]]$plik
current_param <- names(data_to_plot)[1]
names(data_to_plot)[1] <- "Parameter"
optimal_value <- data.frame(thetas[i], global_optimum)
names(optimal_value) <- c("Parameter", "Likelihood")
data_to_plot[,1] <- 10^data_to_plot[,1]
plot <- ggplot()+
geom_hline(yintercept=global_optimum + qchisq(alpha,df), linetype="dashed", color = "red", size=1)+
#geom_hline(yintercept=global_optimization$objective + qchisq(0.95,1), linetype="dashed", color = "green", size=1)+
geom_hline(yintercept=global_optimum , linetype="dashed", color = "blue", size=1)+
geom_line(data = data_to_plot,  aes(x=Parameter, y=Likelihood), color = 'black', size=2)+
#geom_smooth(data = data_to_plot,  aes(x=Parameter, y=Likelihood), method = "loess", span = 0.5, se =0, color = 'black', size=2)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=11)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, colour="pink", size=10)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=5)+
#scale_y_log10()+
#ylim(c(6,NA))+
labs(title = paste0( current_param), #"Profile Likelihood of ",
y = expression(paste(chi^2, "(", theta, ")")) , x = current_param)+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0))
#print(plot)
plot_list[[i]] <- plot
}
# Arrange and print the plots in a grid
grid.arrange(grobs = plot_list, nrow = 3)
}
################################################################################
################################################################################
################################################################################
#                           END OF FUNCTIONS                                   #
################################################################################
################################################################################
################################################################################
###########################
#   GLOBAL OPTIMIZATION   #
###########################
# # initial values of parameters
# x0 <- c(1.696437, 0.116814, 0.5202888, 0.2893776, 0.2529077, 0.1154041,
#         6.845947, 0.007199194, 0.1281913, 0.6346485)
# # x0 <- c(1.6, 0.1, 0.5, 0.26, 0.2, 0.1,
# #         6.8, 0.007, 0.1, 0.6)
# # x0 <- rep(1,10)
# names(x0) <- c('P_liver', 'P_muscle', 'P_kidney',
#                'P_skin', 'P_gills', 'P_carcass', 'P_viscera',
#                'Cl_feces', 'Cl_urine', 'Ku')
# params_names <- names(x0)
# # Total body weight of fish
# Texp <- 15 # C
#
# # Fish feeding
# # The fish were fed once per day. The daily food intake was 2.6% of the mean body weight.
# # The amount of food was  consumed immediately and completely. The uptake phase
# # lasted 28 days. Nominal concentration of PFAS in spiked food is 500 ug/kg.
#
# # We estimate the mean body weight of the fish from day 0 till day 28 in order to
# # estimate the added mount of food everyday.
#
# fish_weight <- function(time){
#   x <- c(0,28,56)*24
#   y <- c(314, 655, 808)
#
#   if(time <= x[1]){
#     w = y[1]
#   }else if(time >= x[3]){
#     w = y[3]
#   }else if(time >= x[1] & time < x[2]){
#     w = approx(x=x[1:2],y=y[1:2], xout = time)$y
#   }else if(time >= x[2] & time < x[3]){
#     w = approx(x=x[2:3],y=y[2:3], xout = time)$y
#   }
#   return(w)
# }
#
# # Time points of added food
# admin.time_dietary <- seq(0,27*24,24)
# # Calculate fish weight over time (g)
# fish_weights <- unlist(lapply(admin.time_dietary, fish_weight))
# # Multiply fish_weights * g daily_food_intake/g of BW * Concentration (ug/g of food)
# admin.dose_dietary <- fish_weights*2.6/100*500/1000
#
# user.input <- list('substance'='PFOS',
#                    'Texp'=Texp,
#                    'admin.dose_dietary'=admin.dose_dietary,
#                    'admin.time_dietary'=admin.time_dietary)
#
# params <- create.params(user.input)
# inits <- create.inits(params)
# events <- create.events(params)
# sample_time <- seq(0,56*24,1)
# # Experimental data from Falk et al.2015
# #---------------------------------------
# # The concentrations in the data are given in ug PFAS/kg tissue units.
# # The time is given in days and will be transformed in hours, to be compatible
# # with the model
#
# # Directory of folder with saved data files
# data_dir <- 'C:/Users/vassi/Documents/GitHub/PFAS_PBK_models/PFAS Rainbow trout PBK/PFAS_Data/Falk et al.2015'
# # Load PFOA data
# #---------------
# PFOS_data <- openxlsx::read.xlsx(paste0(data_dir,'/','PFOS.xlsx'))
# PFOS_data$Time <- PFOS_data$Time*24
# data_df <- PFOS_data
#
# # Consider a Coefficient of Variation of the data points (CV = sd/mean)
# CV <- 20/100
# errors_df <- data.frame(matrix(NA, nrow = nrow(data_df), ncol = ncol(data_df)))
# for (i in 1:nrow(data_df)) {
#   for (j in 2:ncol(data_df)) {
#     set.seed(100)
#     errors_df[i,j] <- abs(rnorm(1, data_df[i,j]*CV, 1))
#   }
# }
# errors_df[,1] <- data_df[,1]
# colnames(errors_df) <- colnames(data_df)
# lb <- rep(1e-05,length(x0))
# ub <- rep(20, length(x0))
# global_optimization <- nloptr::nloptr(x0 = x0,
#                                       eval_f = obj_f,
#                                       lb	= lb,
#                                       ub = ub,
#                                       opts = list("algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NELDERMEAD" "NLOPT_LN_SBPLX"
#                                                   "xtol_rel" = 1e-06,
#                                                   "ftol_rel" = 1e-06,
#                                                   "ftol_abs" = 0.0,
#                                                   "xtol_abs" = 0.0 ,
#                                                   "maxeval" = 1000,
#                                                   "print_level" = 1),
#                                       constant_theta = NULL,
#                                       constant_theta_name = NULL,
#                                       params_names = params_names,
#                                       constant_params=NULL,
#                                       data_df = data_df,
#                                       errors_df = errors_df)
################################
#   Identifiability Analysis   #
################################
# Experimental data from Falk et al.2015
#---------------------------------------
# The concentrations in the data are given in ug PFAS/kg tissue units.
# The time is given in days and will be transformed in hours, to be compatible
# with the model
# Directory of folder with saved data files
data_dir <- 'C:/Users/vassi/Documents/GitHub/PFAS_PBK_models/PFAS Rainbow trout PBK/PFAS_Data/Falk et al.2015'
# Load PFOA data
#---------------
PFOS_data <- openxlsx::read.xlsx(paste0(data_dir,'/','PFOS.xlsx'))
PFOS_data$Time <- PFOS_data$Time*24
data_df <- PFOS_data
# Consider a Coefficient of Variation of the data points (CV = sd/mean)
CV <- 20/100
errors_df <- data.frame(matrix(NA, nrow = nrow(data_df), ncol = ncol(data_df)))
for (i in 1:nrow(data_df)) {
for (j in 2:ncol(data_df)) {
set.seed(100)
errors_df[i,j] <- abs(rnorm(1, data_df[i,j]*CV, 1))
}
}
errors_df[,1] <- data_df[,1]
colnames(errors_df) <- colnames(data_df)
setwd('C:/Users/vassi/Documents/GitHub/PFAS_PBK_models/PFAS Rainbow trout PBK/Identifiability_Analysis')
global_optimum <- 0.04261145 #global_optimization$objective
x_opt <- c(1.2270596458, 0.1961113100, 0.4291278784, 0.2532434467, 0.2536738621,
0.1013013492, 6.3254528747, 0.0007452958, 0.0489045306, 0.4031006573)
fish_weight <- function(time){
x <- c(0,28,56)*24
y <- c(314, 655, 808)
if(time <= x[1]){
w = y[1]
}else if(time >= x[3]){
w = y[3]
}else if(time >= x[1] & time < x[2]){
w = approx(x=x[1:2],y=y[1:2], xout = time)$y
}else if(time >= x[2] & time < x[3]){
w = approx(x=x[2:3],y=y[2:3], xout = time)$y
}
return(w)
}
# Time points of added food
admin.time_dietary <- seq(0,27*24,24)
# Calculate fish weight over time (g)
fish_weights <- unlist(lapply(admin.time_dietary, fish_weight))
# Multiply fish_weights * g daily_food_intake/g of BW * Concentration (ug/g of food)
admin.dose_dietary <- fish_weights*2.6/100*500/1000
user.input <- list('substance'='PFOS',
'Texp'=15,
'admin.dose_dietary'=admin.dose_dietary,
'admin.time_dietary'=admin.time_dietary)
thetas <- log10(x_opt[-10])
thetas_names <- c('P_liver', 'P_muscle', 'P_kidney',
'P_skin', 'P_gills', 'P_carcass', 'P_viscera',
'Cl_feces', 'Cl_urine')
names(thetas) <- thetas_names
# lower bounds of parameters
lb <- log10(rep(1e-07,length(thetas)))
# upper bounds of parameters
ub <- log10(rep(1e05, length(thetas)))
names(thetas) <- thetas_names
constant_params <- c('Ku' = x_opt[10])
substance <- "PFOS"
Texp <- 15
exported_to_cluster = list("fish_weight"=fish_weight,
"create.inits"=create.inits,
"create.params"=create.params,
"create.events"=create.events,
"ode.func"=ode.func,
"WSSR"=WSSR,
"substance"=substance,
"Texp"=Texp,
"admin.dose_dietary"=admin.dose_dietary,
"admin.time_dietary"=admin.time_dietary,
"user.input"=user.input)
test <- Identifiability_analysis(obj_f = obj_f,
thetas=thetas,
thetas_names=thetas_names,
data_df=data_df ,
errors_df=errors_df,
lb=lb ,
ub=ub,
N_samples = 70,
alpha = 0.95 ,
df = 1,
q = 0.25,
global_optimum = global_optimum ,
min_step_coef = 0.01 ,
max_step_coef = 0.4,
N_cores = 8,
constant_params = constant_params,
exported_to_cluster = exported_to_cluster,
break_at_bounds = TRUE,
# nlopt settings for the main optimization problem
opts = list("algorithm" = "NLOPT_LN_NELDERMEAD",
"xtol_rel" = 1e-03,
"ftol_rel" = 1e-03,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 150,
"print_level" = 0),
# nlopt settings for the estimation of theta_step
opts_theta_step = list("algorithm" = 'NLOPT_LN_SBPLX',
"xtol_rel" = 1e-02,
"ftol_rel" = 1e-02,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 40,
"print_level" = 0),
create_txt = TRUE)
profile_likelihood_plots(analysis_results = test, 10^thetas, global_optimum, alpha = 0.95,
df = 1)
#### plot
# x_opt <- global_optimization$solution
# params <- c(create.params(user.input), x_opt)
# inits <- create.inits(params)
# events <- create.events(params)
#
# solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = c(x_opt, params),
#                                     events = events,
#                                     method="lsodes",rtol = 1e-05, atol = 1e-05))
#
# # Keep the predictions only for the time points at which there are available data
# predictions_df <- solution[,c('time' , 'C_Liver', 'C_Blood',
#                               'C_Skin', 'C_Muscle', 'C_Gills',
#                               'C_Kidney', 'C_Carcass')]
#
# predictions_df[,-1] <- predictions_df[,-1]*1000
# exp_data <- data_df
# compartments <- colnames(exp_data)[2:8]
# color_codes <- scales::hue_pal()(length(compartments))
# names(color_codes) <-  colnames(exp_data)[2:8]
#
# plot <- ggplot()+
#   geom_line(data = predictions_df, aes(x = time, y = C_Liver, color='Liver'), size=1.3)+
#   geom_line(data = predictions_df, aes(x = time, y = C_Blood, color='Blood'), size=1.3)+
#   geom_line(data = predictions_df, aes(x = time, y = C_Skin, color='Skin'), size=1.3)+
#   geom_line(data = predictions_df, aes(x = time, y = C_Muscle, color='Muscle'), size=1.3)+
#   geom_line(data = predictions_df, aes(x = time, y = C_Gills, color='Gills'), size=1.3)+
#   geom_line(data = predictions_df, aes(x = time, y = C_Kidney, color='Kidney'), size=1.3)+
#   geom_line(data = predictions_df, aes(x = time, y = C_Carcass, color='Carcass'), size=1.3)+
#
#   geom_point(data = exp_data, aes(x = Time, y = Liver, color = 'Liver'), size=5)+
#   geom_point(data = exp_data, aes(x = Time, y = Blood, color = 'Blood'), size=5)+
#   geom_point(data = exp_data, aes(x = Time, y = Skin, color = 'Skin'), size=5)+
#   geom_point(data = exp_data, aes(x = Time, y = Muscle, color = 'Muscle'), size=5)+
#   geom_point(data = exp_data, aes(x = Time, y = Gills, color = 'Gills'), size=5)+
#   geom_point(data = exp_data, aes(x = Time, y = Kidney, color = 'Kidney'), size=5)+
#   geom_point(data = exp_data, aes(x = Time, y = Carcass, color = 'Carcass'), size=5)+
#   #scale_y_log10(limits = c(1, 600))+
#   #ylim(c(1, 600))+
#   geom_vline(xintercept = 28*24, size=1.0)+ # end of uptake
#
#
#
#   labs(title = paste0("Tissues Predicted vs Observed Concentrations of ", "PFOS"),
#        y = 'Concentration (ug/kg)' , x = "Time (hours)")+
#   theme(plot.title = element_text(hjust = 0.5,size=30),
#         axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
#         axis.text.y=element_text(size=22),
#         axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
#         axis.text.x=element_text(size=22),
#         legend.title=element_text(hjust = 0.5,size=25),
#         legend.text=element_text(size=22),
#         panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
#
#   scale_color_manual("Tissues", values=color_codes)+
#   theme(legend.key.size = unit(1.5, 'cm'),
#         legend.title = element_text(size=14),
#         legend.text = element_text(size=14),
#         axis.text = element_text(size = 14))
#   plot
test
profile_likelihood_plots <- function(analysis_results, thetas, global_optimum, alpha = 0.95,
df = 1){
output <- analysis_results$Likelihood_profiles
plot_list <- list()
for (i in 1:length(output)) {
data_to_plot <- output[[i]]$plik
current_param <- names(data_to_plot)[1]
names(data_to_plot)[1] <- "Parameter"
optimal_value <- data.frame(thetas[i], global_optimum)
names(optimal_value) <- c("Parameter", "Likelihood")
data_to_plot[,1] <- data_to_plot[,1]
plot <- ggplot()+
geom_hline(yintercept=global_optimum + qchisq(alpha,df), linetype="dashed", color = "red", size=1)+
#geom_hline(yintercept=global_optimization$objective + qchisq(0.95,1), linetype="dashed", color = "green", size=1)+
geom_hline(yintercept=global_optimum , linetype="dashed", color = "blue", size=1)+
geom_line(data = data_to_plot,  aes(x=Parameter, y=Likelihood), color = 'black', size=2)+
#geom_smooth(data = data_to_plot,  aes(x=Parameter, y=Likelihood), method = "loess", span = 0.5, se =0, color = 'black', size=2)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=11)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, colour="pink", size=10)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=5)+
#scale_y_log10()+
#ylim(c(6,NA))+
labs(title = paste0( current_param), #"Profile Likelihood of ",
y = expression(paste(chi^2, "(", theta, ")")) , x = current_param)+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0))
#print(plot)
plot_list[[i]] <- plot
}
# Arrange and print the plots in a grid
grid.arrange(grobs = plot_list, nrow = 3)
}
profile_likelihood_plots(analysis_results = test, 10^thetas, global_optimum, alpha = 0.95,
df = 1)
profile_likelihood_plots <- function(analysis_results, thetas, global_optimum, alpha = 0.95,
df = 1){
output <- analysis_results$Likelihood_profiles
plot_list <- list()
for (i in 1:length(output)) {
data_to_plot <- output[[i]]$plik
current_param <- names(data_to_plot)[1]
names(data_to_plot)[1] <- "Parameter"
optimal_value <- data.frame(log10(thetas[i]), global_optimum)
names(optimal_value) <- c("Parameter", "Likelihood")
data_to_plot[,1] <- data_to_plot[,1]
plot <- ggplot()+
geom_hline(yintercept=global_optimum + qchisq(alpha,df), linetype="dashed", color = "red", size=1)+
#geom_hline(yintercept=global_optimization$objective + qchisq(0.95,1), linetype="dashed", color = "green", size=1)+
geom_hline(yintercept=global_optimum , linetype="dashed", color = "blue", size=1)+
geom_line(data = data_to_plot,  aes(x=Parameter, y=Likelihood), color = 'black', size=2)+
#geom_smooth(data = data_to_plot,  aes(x=Parameter, y=Likelihood), method = "loess", span = 0.5, se =0, color = 'black', size=2)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=11)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, colour="pink", size=10)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=5)+
#scale_y_log10()+
#ylim(c(6,NA))+
labs(title = paste0( current_param), #"Profile Likelihood of ",
y = expression(paste(chi^2, "(", theta, ")")) , x = current_param)+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0))
#print(plot)
plot_list[[i]] <- plot
}
# Arrange and print the plots in a grid
grid.arrange(grobs = plot_list, nrow = 3)
}
profile_likelihood_plots(analysis_results = test, 10^thetas, global_optimum, alpha = 0.95,
df = 1)
save.image("C:/Users/vassi/Documents/GitHub/PFAS_PBK_models/PFAS Rainbow trout PBK/Identifiability_Analysis/Fixed Ku.RData")
profile_likelihood_plots <- function(analysis_results, thetas, global_optimum, alpha = 0.95,
df = 1){
output <- analysis_results$Likelihood_profiles
plot_list <- list()
for (i in 1:length(output)) {
data_to_plot <- output[[i]]$plik
current_param <- names(data_to_plot)[1]
names(data_to_plot)[1] <- "Parameter"
optimal_value <- data.frame(log10(thetas[i]), global_optimum)
names(optimal_value) <- c("Parameter", "Likelihood")
data_to_plot[,1] <- data_to_plot[,1]
plot <- ggplot()+
geom_hline(yintercept=global_optimum + qchisq(alpha,df), linetype="dashed", color = "red", size=1)+
#geom_hline(yintercept=global_optimization$objective + qchisq(0.95,1), linetype="dashed", color = "green", size=1)+
geom_hline(yintercept=global_optimum , linetype="dashed", color = "blue", size=1)+
geom_line(data = data_to_plot,  aes(x=Parameter, y=Likelihood), color = 'black', size=2)+
#geom_smooth(data = data_to_plot,  aes(x=Parameter, y=Likelihood), method = "loess", span = 0.5, se =0, color = 'black', size=2)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=11)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, colour="pink", size=10)+
geom_point(data = optimal_value,  aes(x=Parameter, y=Likelihood), shape=18, size=5)+
#scale_y_log10()+
#ylim(c(6,NA))+
labs(#title = paste0( current_param), #"Profile Likelihood of ",
y = expression(paste(chi^2, "(", theta, ")")) , x = current_param)+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0))
#print(plot)
plot_list[[i]] <- plot
}
# Arrange and print the plots in a grid
grid.arrange(grobs = plot_list, nrow = 3)
}
profile_likelihood_plots(analysis_results = test, 10^thetas, global_optimum, alpha = 0.95,
df = 1)
