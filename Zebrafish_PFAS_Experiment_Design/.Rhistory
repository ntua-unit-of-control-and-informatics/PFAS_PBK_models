predictions_female_28 <- predictions_male_4
for (i in 1:length(C_water_concentrations)) { # Loop for each C_water
C_water <- C_water_concentrations[i]
params_male <- create.params(BW, T_water, "Male", pH_w, C_water, cf_Pbw, delta_logKow)
params_female <- create.params(BW, T_water, "Female", pH_w, C_water, cf_Pbw, delta_logKow)
# Check if there are any group of parameters and then assign
# the corresponding correction factor
if(!is.null(Test$grouped_parameters)){
# Distinguish and assign values to correction factors
# according to the number of selected groups of parameters
cf_vector <- c()
for (j in 1:length(Test$fitted_params_names)) {
if( !(Test$fitted_params_names[j] %in% names(params)) ){
cf_vector[j] <- fitted_values[j]
}else{
params_male[[Test$fitted_params_names[j]]] <- fitted_values[j]
params_female[[Test$fitted_params_names[j]]] <- fitted_values[j]
}
}
# Apply the correction factors to the corresponding parameters
for (k in 1:length(Test$grouped_parameters)) {
for (j in 1:length(Test$grouped_parameters[[k]])) {
params_male[[ Test$grouped_parameters[[k]][j] ]] <- params_male[[ Test$grouped_parameters[[k]][j] ]] * cf_vector[k]
params_female[[ Test$grouped_parameters[[k]][j] ]] <- params_female[[ Test$grouped_parameters[[k]][j] ]] * cf_vector[k]
}
}
}else{
for (j in 1:length(Test$fitted_params_names)) {
params_male[[Test$fitted_params_names[j]]] <- fitted_values[j]
params_female[[Test$fitted_params_names[j]]] <- fitted_values[j]
}
}
inits <- create.inits(params_male)
validation_solution_male <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params_male,
method="lsodes",rtol = 1e-05, atol = 1e-05))
inits <- create.inits(params_female)
validation_solution_female <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params_female,
method="lsodes",rtol = 1e-05, atol = 1e-05))
summed_compartments <- c("M_gill", "M_ven", "M_art", "M_lumen", "M_git", "M_li",
"M_ki", "M_br", "M_go", "M_rp", "M_pp", "M_ad", "M_skin" )
# summed_compartments <- c("M_gill", "M_ven", "M_art", "M_lumen", "M_git", "M_li",
#                          "M_ki", "M_br", "M_rp", "M_pp" )
# summed_tissue_weights <- sum(c(params$V_gill, params$V_bl, params$V_git,
#                                params$V_li, params$V_ki, params$V_br,
#                                params$V_rp, params$V_pp))
# predictions_male_val2[i,] <- c(C_water, sum(tail(validation_solution_male[summed_compartments], 1))/params_male$BW )
# predictions_female_val2[i,] <- c(C_water, sum(tail(validation_solution_female[summed_compartments], 1))/params_female$BW )
# predictions_male_4[i,] <- c("Male", as.numeric(C_water), 4, sum(validation_solution_male[validation_solution_male$time == 4, summed_compartments])/ summed_tissue_weights )
# predictions_male_28[i,] <- c("Male", as.numeric(C_water), 28, sum(validation_solution_male[validation_solution_male$time == 28, summed_compartments])/ summed_tissue_weights )
# predictions_female_4[i,] <- c("Female", as.numeric(C_water), 4, sum(validation_solution_female[validation_solution_female$time == 4, summed_compartments])/ summed_tissue_weights )
# predictions_female_28[i,] <- c("Female", as.numeric(C_water), 28, sum(validation_solution_female[validation_solution_female$time == 28, summed_compartments])/ summed_tissue_weights )
predictions_male_4[i,] <- c("Male", as.numeric(C_water), 4, sum(validation_solution_male[validation_solution_male$time == 4, summed_compartments])/ params_male$BW )
predictions_male_28[i,] <- c("Male", as.numeric(C_water), 28, sum(validation_solution_male[validation_solution_male$time == 28, summed_compartments])/ params_male$BW )
predictions_female_4[i,] <- c("Female", as.numeric(C_water), 4, sum(validation_solution_female[validation_solution_female$time == 4, summed_compartments])/ params_female$BW )
predictions_female_28[i,] <- c("Female", as.numeric(C_water), 28, sum(validation_solution_female[validation_solution_female$time == 28, summed_compartments])/ params_female$BW )
}
predictions_male_val2 <- as.data.frame(rbind(predictions_male_4, predictions_male_28))
predictions_male_val2$Whole_body <- as.numeric(predictions_male_val2$Whole_body)
predictions_female_val2 <- as.data.frame(rbind(predictions_female_4, predictions_female_28))
predictions_female_val2$Whole_body <- as.numeric(predictions_female_val2$Whole_body)
male_observations <- unlist(c(whole_body_male_validation[1,-1], whole_body_male_validation[2,-1]))
female_observations <- unlist(c(whole_body_female_validation[1,-1], whole_body_female_validation[2,-1]))
predictions_male_val2 <- cbind(predictions_male_val2, male_observations)
colnames(predictions_male_val2)[4:5] <- c("Predicted", "Observed")
predictions_female_val2 <- cbind(predictions_female_val2, female_observations)
colnames(predictions_female_val2)[4:5] <- c("Predicted", "Observed")
Concentration <-  c(0,1,2)
names(Tissue_markers) <- c( "Low", "Medium", "High")
Day <- c("#56B4E9", "#CD3333") #scales::hue_pal()(5)
names(Day) <- c("4", "28")
male_validation <- validation_plot_2(predictions_male_val2, "Male Zebrafish", Day, Concentration)
female_validation <- validation_plot_2(predictions_female_val2, "Female Zebrafish", Day, Concentration)
grid_plot_validation_2 <- ggpubr::ggarrange(female_validation, male_validation,
ncol=2, nrow=1,
common.legend = TRUE, legend="bottom")
#
return(list("Training_plot" = grid_plot,
"Validation_plot"= grid_plot_validation,
"Whole_body"= grid_plot_validation_2))
}
create.plot <- function(compartment, predictions, data_df, color_codes){
plot <- ggplot()+
geom_line(data = predictions, aes(x = Time, y = !!as.name(compartment), color='Predictions'), size=1.3)+
geom_point(data=data_df, aes(x=Time, y= !!as.name(compartment), color='Observations'), size=4)+
labs(title = compartment,
y = "PFOA (ug/ml)",
x = "Time (d)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual("Data", values=color_codes)+
theme_light()+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
}
validation_plot <- function(xy_data,set_title, Concentration, Tissue_markers){
ggplot()+
geom_abline(intercept = log10(1), slope = 1, linetype = "dashed", color = "black", linewidth = 1.5,alpha = 0.7)+  # Identity line in log10 scale
geom_abline(intercept = log10(1/3), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(3), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(1/10), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(10), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_point(data = xy_data, aes(x=Observed, y=Predicted, color = Concentration, shape = Tissue), size=4, stroke = 1.5)+
scale_y_log10(limits=c(1e-04,1e01))+
scale_x_log10(limits=c(1e-04,1e01))+
scale_color_manual(values = Concentration, name = "Concentrations (ug/L):")+
theme(legend.spacing.y = unit(1, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))+
scale_shape_manual(values = Tissue_markers, name= "Tissues:")+
theme_light()+
labs(title = set_title ,
y = expression("Predicted PFOA (" * mu* "g/g tissue)"),
x = expression("Observed PFOA (" * mu* "g/g tissue)"))+
theme(plot.title = element_text(hjust = 0.5),
legend.key.size = unit(1.0, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=12,  hjust = 0),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
)
}
validation_plot_2 <- function(xy_data,set_title, Day, Concentration){
ggplot()+
geom_abline(intercept = log10(1), slope = 1, linetype = "dashed", color = "black", linewidth = 1.5,alpha = 0.7)+  # Identity line in log10 scale
geom_abline(intercept = log10(1/3), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(3), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(1/10), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(10), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(1/100), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_abline(intercept = log10(100), slope = 1, linetype = "dashed", color = "black", size = 0.5, alpha = 0.3) +  # Dashed line for observed/predicted values
geom_point(data = xy_data, aes(x=Observed, y=Predicted, color = Day, shape = Concentration), size=4, stroke = 1.5)+
scale_y_log10(limits=c(1e-03,1e02))+
scale_x_log10(limits=c(1e-03,1e02))+
scale_color_manual(values = Day, name = "Day ")+
theme(legend.spacing.y = unit(1, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))+
scale_shape_manual(values = Concentration, name= "Concentration:")+
theme_light()+
labs(title = set_title ,
y = expression("Predicted PFOA (" * mu* "g/g tissue)"),
x = expression("Observed PFOA (" * mu* "g/g tissue)"))+
theme(plot.title = element_text(hjust = 0.5),
legend.key.size = unit(1.0, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=12,  hjust = 0),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
)
}
#=============================#
#.      END OF FUNCTIONS      #
#=============================#
setwd('/Users/vassilis/Documents/GitHub/PFAS_PBK_models/Zebrafish_PFAS_Experiment_Design')
#============#
# User Input #
#============#
# Training input
L = 2.5 # cm
BW <- 0.0096 * L^3.55 # g Grech et al. (2019)
T_water = 23 + 273 #K
sex = "Male"
pH_w = 8.0
C_water = 25 # ug/ml
params <- create.params(BW, T_water, sex, pH_w, C_water, cf_Pbw = NULL, delta_logKow = NULL)
inits <- create.inits(params)
sample_time <- seq(0,30,0.5)
# solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params,
#                                     method="lsodes",rtol = 1e-05, atol = 1e-05))
#===========#
# Load Data #
#===========#
brain_data <- read.csv("Data/Bian_2022_data/csv_files/brain.csv")
#gallbladder_data <- read.csv("Data/Bian_2022_data/csv_files/gallbladder.csv")
gill_data <- read.csv("Data/Bian_2022_data/csv_files/gill.csv")
heart_data <- read.csv("Data/Bian_2022_data/csv_files/heart.csv")
intestine_data <- read.csv("Data/Bian_2022_data/csv_files/intestines.csv")
kidney_data <- read.csv("Data/Bian_2022_data/csv_files/kidney.csv")
liver_data <- read.csv("Data/Bian_2022_data/csv_files/liver.csv")
muscle_data <- read.csv("Data/Bian_2022_data/csv_files/muscle.csv")
spinal_cord_data <- read.csv("Data/Bian_2022_data/csv_files/spinal_cord.csv")
#swim_bladder_data <- read.csv("Data/Bian_2022_data/csv_files/swim_bladder.csv")
# Estimate the total concentration of muscle and spinal_cord as
# they are modeled through the poorly perfused tissues
PPT_data <- data.frame(cbind(muscle_data[,1], (muscle_data[,2]*params$V_muscle + spinal_cord_data[,2]*params$V_skeleton)/params$V_pp ))
Time <- c(1,2,4,8,12,16,20,24,30)
data_df <- data.frame(cbind(Time, brain_data[,2], gill_data[,2], heart_data[,2],
intestine_data[,2], kidney_data[,2], liver_data[,2], PPT_data[,2]))
colnames(data_df) <- c("Time", "Brain", "Gill", "RPT", "Git",
"Kidney", "Liver", "PPT")
# Transform the intensity units to concentration based on figure 2(d) of Bian et al. (2022)
intensity_to_concentrtion <-data.frame(concentration = c(3.991297134, 26.03656992,
50.23768957, 100.6318519,
499.4784241),
intensity = c(1402.641217, 12473.87966, 16992.55354,
43119.9451, 153203.5173))
# Concentration is estimated in ug PFOA/ml tissue
for (i in 2:dim(data_df)[2]) {
data_df[,i] <- Hmisc::approxExtrap(intensity_to_concentrtion$intensity, intensity_to_concentrtion$concentration, data_df[,i])$y
}
data_df <- data_df[c("Time", "Brain", "Gill", "Git", "Kidney", "Liver", "RPT", "PPT")]
### Load and process the validation data from Ulaq et al. (2015) (Used for validation)
# Exposure concentrations : 0.3,1, 3,10,30 ug/L
brain_female <- read.csv("Data/Ulhaq_2015_data/csv_files/brain_female.csv")
intestine_female <- read.csv("Data/Ulhaq_2015_data/csv_files/intestine_female.csv")
liver_female <- read.csv("Data/Ulhaq_2015_data/csv_files/liver_female.csv")
ovaries_female <- read.csv("Data/Ulhaq_2015_data/csv_files/ovaries.csv")
brain_male <- read.csv("Data/Ulhaq_2015_data/csv_files/brain_male.csv")
intestine_male <- read.csv("Data/Ulhaq_2015_data/csv_files/intestine_male.csv")
liver_male <- read.csv("Data/Ulhaq_2015_data/csv_files/liver_male.csv")
# The observed concentrations are reported in ng/g
# So they are transformed to ug/g by multiplying with 1/1000
male_data <- data.frame(cbind(brain_male[,1], brain_male[,2]/1000,
intestine_male[,2]/1000, liver_male[,2]/1000))
colnames(male_data) <- c("Concentration", "Brain", "Git", "Liver")
female_data <- data.frame(cbind(brain_female[,1], brain_female[,2]/1000,
intestine_female[,2]/1000, liver_female[,2]/1000, ovaries_female[,2]/1000))
colnames(female_data) <- c("Concentration", "Brain", "Git", "Liver", "Gonads")
validation_data <- list("male_data" = male_data,
"female_data" = female_data)
### Load Whole body concentrations reported by Hagenaars et al. (2013)
# The fish were exposed for 4 and 28 days at three differents concentrations
# Low:  0.1 ug/ml
# Medium: 0.5 ug/ml
# High: 1 ug/ml
# The observed concentrations are reported in ng/g, so they need to be turned to ug/g.
whole_body_male_validation <- openxlsx::read.xlsx("Data/Hagenaars_2013_data/Hagenaars_2013_data.xlsx", sheet = 1)
whole_body_female_validation <- openxlsx::read.xlsx("Data/Hagenaars_2013_data/Hagenaars_2013_data.xlsx", sheet = 2)
# Unit transformation from ng/g to ug/g
whole_body_male_validation[,-1] <- whole_body_male_validation[,-1]/1000
whole_body_female_validation[,-1] <- whole_body_female_validation[,-1]/1000
#====================#
# Optimization Tests #
#====================#
N_iter <- 5000
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 1e-07,
"ftol_rel" = 1e-07,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter,
"print_level" = 1 )
Test_1 <- list("compartments" = c("Liver"),
"compartments_last_point" = NULL,#c("Brain", "Gill",  "Git", "Kidney", "RPT", "PPT"),
"rest" = F,
"grouped_parameters" = list(c("P_li")),
"fitted_params_names" = c("cf_1", "cl_feces"), # always give firstly the cf_Pbw and delta_logKow
"x0" = c(1, 1),
"lb"	= c(1e-10, 1e-10),
"ub" = c(1e05, 1e05)
)
Test_2 <- list("compartments" = c("Liver"),
"compartments_last_point" = NULL,#c("Brain", "Gill",  "Git", "Kidney", "RPT", "PPT"),
"rest" = T,
"grouped_parameters" =list(c("P_li"),
c("P_br", "P_git", "P_ki", "P_rp", "P_pp", "P_skin", "P_ad", "P_go")),
"fitted_params_names" = c("cf_1", "cf_2", "cl_feces"), # always give firstly the cf_Pbw and delta_logKow
"x0" = c(1, 1,  1 ),
"lb"	= c(1e-10, 1e-10, 1e-10),
"ub" = c(1e05, 1e05, 1e05)
)
Test_3 <- list("compartments" = c("Liver"),
"compartments_last_point" = c("Brain", "Gill",  "Git", "Kidney", "RPT", "PPT"),
"rest" = F,
"grouped_parameters" =list(c("P_li"),
c("P_br"),
c("P_git"),
c("P_ki"),
c("P_rp"),
c("P_pp"),
c("P_skin", "P_go", "P_ad")),
"fitted_params_names" = c("cf_1", "cf_2","cf_3", "cf_4","cf_5", "cf_6", "cf_7", "cl_feces"), # always give firstly the cf_Pbw and delta_logKow
"x0" = c(rep(1,8)),
"lb"	= c(rep(1e-10, 8)),
"ub" = c(rep(1e05, 8))
)
Test_4 <- list("compartments" = c("Liver"),
"compartments_last_point" = c("Brain", "Gill",  "Git", "Kidney", "RPT", "PPT"),
"rest" = T,
"grouped_parameters" =list(c("P_li"),
c("P_br"),
c("P_git"),
c("P_ki"),
c("P_rp"),
c("P_pp"),
c("P_skin", "P_go", "P_ad")),
"fitted_params_names" = c("cf_1", "cf_2","cf_3", "cf_4","cf_5", "cf_6", "cf_7", "cl_feces"), # always give firstly the cf_Pbw and delta_logKow
"x0" = c(rep(1,8)),
"lb"	= c(rep(1e-10, 8)),
"ub" = c(rep(1e05, 8))
)
Tests_list <-list(Test_1, Test_2, Test_3, Test_4)
for (i in 1:length(Tests_list)) {
Test <- Tests_list[[i]]
#params <- create.params(BW, T_water, sex, pH_w, C_water)
optimization <- nloptr::nloptr( x0 = Test$x0,
eval_f = obj.func,
lb	= Test$lb,
ub = Test$ub,
opts = opts,
compartments = Test$compartments,
compartments_last_point=Test$compartments_last_point,
params = params,
rest = Test$rest,
grouped_parameters = Test$grouped_parameters,
fitted_params_names = Test$fitted_params_names)
Test[["optimization"]] <- optimization
Test[["Plots"]] <- prepare_plot(Test)
Tests_list[[i]] <- Test
ggsave(paste0("Results/Correction_factor_results/Wang_QSAR/Train/", "W_Test_", i, "_Train.png" ), Test$Plots$Training_plot, width = 12, height = 8, units = "in")
ggsave(paste0("Results/Correction_factor_results/Wang_QSAR/Validation/", "W_Test_", i, "_Validation.png" ), Test$Plots$Validation_plot, width = 12, height = 8, units = "in")
ggsave(paste0("Results/Correction_factor_results/Wang_QSAR/Validation_Whole_Body/", "W_Test_", i, "_WB_Validation.png" ), Test$Plots$Whole_body, width = 12, height = 8, units = "in")
}
save.image("Results/Correction_factor_results/Wang_QSAR/Wang_Tests.RData")
load("~/Documents/GitHub/PFAS_PBK_models/Zebrafish_PFAS_Experiment_Design/Results/Correction_factor_results/Wang_QSAR/Wang_Tests.RData")
Tests_list[[4]]$optimization$solution
data_df
load("~/Documents/GitHub/PFAS_PBK_models/Zebrafish_PFAS_Experiment_Design/Results/Correction_factor_results/Wang_QSAR/Wang_Tests.RData")
Tests_list[[4]]$optimization
data_df
84/7
9*6*2*3*2
288/3
288*2
9*6*2
9*2*2*3*3
time_points = 10
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
Liver
time_points = 10
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
Liver
whole_body
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
time_points_2 = 2
rest_compartments = 8
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
rest_samples
time_points = 10
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 8
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, whole_body, rest_samples))
time_points = 10
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 8
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
rest_samples
time_points = 10
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, whole_body, rest_samples))
time_points = 10
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
time_points = 6
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
time_points = 5
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
Liver
rest_samples
time_points_2
sex
individuals
congeneers
concentrations
time_points = 5
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 5
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
Liver
whole_body
rest_compartments
time_points = 6
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
time_points = 5
sex = 2
individuals = 3
congeneers = 2
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
time_points = 5
sex = 2
individuals = 3
congeneers = 1
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, rest_samples))
Liver
time_points = 5
sex = 2
individuals = 3
congeneers = 1
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, whole_body, rest_samples))
time_points = 6
sex = 2
individuals = 3
congeneers = 1
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, whole_body, rest_samples))
time_points = 7
sex = 2
individuals = 3
congeneers = 1
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments = 6
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, whole_body, rest_samples))
time_points = 7
sex = 2
individuals = 3
congeneers = 1
concentrations = 2
Liver <- time_points*sex*individuals*congeneers*concentrations
whole_body <- time_points*sex*individuals*congeneers*concentrations
time_points_2 = 2
rest_compartments =8
rest_samples = time_points_2*sex*individuals*congeneers*concentrations*rest_compartments
sum(c(Liver, whole_body, rest_samples))
