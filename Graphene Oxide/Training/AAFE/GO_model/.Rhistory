#Large Intestine
#blood subcompartment
dMBLIn = QBLIn*CBart - QBLIn*CLInB - QparaLIn*(1-SLIn)*CLInB - xi_largeIn*QBLIn*CLInB + (xi_largeIn/Pi_largeIn)*QBLIn*CLIn
#tissue subcompartment
dMLIn = QparaLIn*(1-SLIn)*CLInB + xi_largeIn*QBLIn*CLInB - (xi_largeIn/Pi_largeIn)*QBLIn*CLIn
#lumen
dMLInlumen = - Qfeces*CLInlumen
#Lung
#blood subcompartment
dMBLn = QBLn*CBven- QBLn*CLnB - QparaLn*(1-SLn)*CLnB  - xi_lung*QBLn*CLnB + (xi_lung/Pi_lung)*QBLn*CLn
#tissue subcompartment
dMLn = QparaLn*(1-SLn)*CLnB + xi_lung*QBLn*CLnB - (xi_lung/Pi_lung)*QBLn*CLn
#Spleen
#blood subcompartment
dMBSpl = QBSpl*CBart - QBSpl*CSplB - QparaSpl*(1-SSpl)*CSplB - xi_spleen*QBSpl*CLnB + (xi_spleen/Pi_spleen)*QBSpl*CSpl
#tissue subcompartment
dMSpl = QparaSpl*(1-SSpl)*CSplB + xi_spleen*QBSpl*CSplB - (xi_spleen/Pi_spleen)*QBSpl*CSpl  -
Pup*V_macro_Spl*CSplB*(1-(Cmacro_Spl/(Km + Cmacro_Spl)))
#macrophages
dMmacro_Spl = Pup*V_macro_Spl*CSplB*(1-(Cmacro_Spl/(Km + Cmacro_Spl))) - CLup*Cmacro_Spl*V_macro_Spl
#Heart
#blood subcompartment
dMBH = QBH*CBart - QBH*CHB - QparaH*(1-SHt)*CHB - xi_heart*QBH*CHB + (xi_heart/Pi_heart)*QBH*CH
#tissue subcompartment
dMH = QparaH*(1-SHt)*CHB +  xi_heart*QBH*CHB - (xi_heart/Pi_heart)*QBH*CH
#Brain
#blood subcompartment
dMBBr = QBBr*CBart - QBBr*CBrB - QparaBr*(1-SBr)*CBrB - xi_brain*QBBr*CBrB + (xi_brain/Pi_brain)*QBBr*CBr
#Tissue subcompartment
dMBr = QparaBr*(1-SBr)*CBrB + xi_brain*QBBr*CBrB - (xi_brain/Pi_brain)*QBBr*CBr
#Rest of body
#blood subcompartment
dMBRe = QBRe*CBart - QBRe*CReB - QparaRe*(1-SRe)*CReB - xi_rob*QBRe*CReB + (xi_rob/Pi_rob)*QBRe*CRe
#interstitial fluid subcompartment
dMRe = QparaRe*(1-SRe)*CReB + xi_rob*QBRe*CReB - (xi_rob/Pi_rob)*QBRe*CRe
# Urine
dMurine = CLurine*CBart
# Feces
dMfeces = CLfeces*CLi
dMmacro = CLup*Cmacro_Spl*V_macro_Spl + CLup*Cmacro_Li*V_macro_Li
dVurine = Qurine
dVfeces = Qfeces
#Concentration calculation in each compartment
Cven <- CBven
Cart <- CBart
Cblood <- (MBven + MBart)/ (VBven + VBart)
Ckidneys <- (MBKi + MKi)/(VKiB + VKi)
Cliver <- (MBLi + MLi + Mmacro_Li)/(VLiB + VLi)
Cstomach <-  (MBSt + MSt + MStlumen)/(VStB + VSt)
Csmall_intestine <-  (MBSIn + MSIn)/(VSInB+VSIn)
Clarge_intestine <-  (MBLIn + MLIn+MLInlumen)/(VLInB+VLIn+VLInlumen)
Clungs <-  (MBLn + MLn)/(VLnB+VLn)
Crest <-  (MBRe + MRe)/(VReB+VRe)
Cfeces <- Mfeces/(Vfeces*feces_density)
Curine <- Murine/Vurine
Cspleen <-  (MBSpl + MSpl + Mmacro_Spl)/(VSplB+VSpl)
Cheart <-  (MBH + MH)/(VHB+VH)
Cbrain <-  (MBBr + MBr)/(VBrB+VBr)
Mven <- MBven
Mart <- MBart
Mblood <- MBven + MBart
Mkidneys <- MBKi + MKi
Mliver <- MBLi + MLi + Mmacro_Li
Mstomach <- MBSt + MSt + MStlumen
Msmall_intestine <- MBSIn + MSIn
Mlarge_intestine <- MBLIn + MLIn+MLInlumen
Mlungs <- MBLn + MLn
Mrest <- MBRe + MRe
Mfeces <- Mfeces
Murine <- Murine
Mspleen <-  MBSpl + MSpl + Mmacro_Spl
Mheart <-  MBH + MH
Mbrain <-  MBBr + MBr
list(c( "dMBart"=dMBart, "dMBven"=dMBven, "dMBKi"=dMBKi, "dMKi"=dMKi,
"dMBLi"=dMBLi, "dMLi"=dMLi, "dMmacro_Li"=dMmacro_Li, "dMBSt"=dMBSt,
"dMSt"=dMSt, "dMStlumen"=dMStlumen,
"dMBSIn"=dMBSIn, "dMSIn"=dMSIn, "dMBLIn"=dMBLIn, "dMLIn"=dMLIn,
"dMLInlumen"=dMLInlumen, "dMBLn"=dMBLn, "dMLn"=dMLn, "dMBSpl"=dMBSpl,
"dMSpl"=dMSpl, "dMmacro_Spl"=dMmacro_Spl,
"dMBH"=dMBH, "dMH"=dMH, "dMBBr"=dMBBr, "dMBr"=dMBr,
"dMBRe"=dMBRe, "dMRe"=dMRe, "dMurine"=dMurine,
"dMfeces"=dMfeces, "dMmacro"=dMmacro,
"dVurine"=dVurine, "dVfeces"=dVfeces),
'Cblood'=Cblood, 'Ckidneys'=Ckidneys, 'Cliver'=Cliver, 'Cstomach'=Cstomach,
'Csmall_intestine'=Csmall_intestine, 'Clarge_intestine'=Clarge_intestine,
'Clungs'=Clungs, 'Crest'=Crest, 'Cfeces'=Cfeces, 'Curine'=Curine,
'Cspleen'=Cspleen, 'Cheart'=Cheart, 'Cbrain'=Cbrain,
'Mblood'=Mblood, 'Mkidneys'=Mkidneys, 'Mliver'=Mliver, 'Mstomach'=Mstomach,
'Msmall_intestine'=Msmall_intestine, 'Mlarge_intestine'=Mlarge_intestine,
'Mlungs'=Mlungs, 'Mrest'=Mrest,
'Mspleen'=Mspleen, 'Mheart'=Mheart, 'Mbrain'=Mbrain,
'CBven'=CBven, 'CBart'=CBart, 'CKiB'=CKiB, 'CKi'=CKi, 'CLiB'=CLiB,
'CLi'=CLi, 'Cmacro_Li'=Cmacro_Li,'CStB'=CStB, 'CSt'=CSt, 'CSInB'=CSInB,
'CSIn'=CSIn, 'CLInB'=CLInB, 'CLInlumen'=CLInlumen,
'CLIn'=CLIn, 'CLnB'=CLnB, 'CLn'=CLn, 'CSplB'=CSplB,
'CSpl'=CSpl, 'Cmacro_Spl'=Cmacro_Spl,
'CHB'=CHB, 'CH'=CH, 'CBrB'=CBrB, 'CBr'=CBr, 'CReB'=CReB, 'CRe'=CRe)
})
}
create.inits <- function(parameters){
with(as.list(parameters),{
MBart<-0; MBven<-0; MBKi<-0; MKi<-0; MBLi<-0; MLi<-0; Mmacro_Li<-0; MBSt<-0; MSt<-0;
MStlumen<-0; MBSIn<-0; MSIn<-0; MBLIn<-0; MLIn<-0; MLInlumen<-0;
MBLn<-0; MLn<-0; MBSpl<-0; MSpl<-0; Mmacro_Spl<-0 ;MBH<-0; MH<-0; MBBr<-0; MBr<-0;
MBRe<-0; MRe<-0; Murine<-0; Mfeces<-0; Mmacro <-0; Vurine <-0; Vfeces <-0
return(c("MBart"=MBart, "MBven"=MBven, "MBKi"=MBKi, "MKi"=MKi,
"MBLi"=MBLi, "MLi"=MLi, "Mmacro_Li"=Mmacro_Li, "MBSt"=MBSt,
"MSt"=MSt, "MStlumen"=MStlumen,
"MBSIn"=MBSIn, "MSIn"=MSIn, "MBLIn"=MBLIn, "MLIn"=MLIn,
"MLInlumen"=MLInlumen, "MBLn"=MBLn, "MLn"=MLn,
"MBSpl"=MBSpl,"MSpl"=MSpl,"Mmacro_Spl"=Mmacro_Spl,
"MBH"=MBH, "MH"=MH, "MBBr"=MBBr, "MBr"=MBr,
"MBRe"=MBRe, "MRe"=MRe, "Murine"=Murine,
"Mfeces"=Mfeces, "Mmacro"=Mmacro,
"Vurine"=Vurine, "Vfeces"=Vfeces
))
})
}
create.events <- function(parameters){
with(as.list(parameters), {
# Calculate number of administrated doses and corresponding administration time
ldose <- length(admin.dose)
ltimes <- length(admin.time)
# If not equal, then stop
if (ltimes != ldose){
stop("The times of administration should be equal in number to the doses")
}else{
if (admin.type == "iv"){
events <- list(data = rbind(data.frame(var = c("MBven"),  time = admin.time,
value = admin.dose, method = c("add")) ))
}else if (admin.type == "oral"){
events <- list(data = rbind(data.frame(var = c("MStlumen"),  time = admin.time,
value = admin.dose, method = c("add")) ))
}
}
return(events)
})
}
obj.func <- function(x, dataset){
N_data <- length(dataset)
score <- rep(NA, N_data)
# x: a vector with the values of the optimized parameters (it is not the x
# from the odes!!!)
estimated_params <- exp(x)
##########################
#-------------------------
# Liu et al., 2012
#-------------------------
##########################
# Set up simulations for the 1st case, i.e. Liu (2012) 1 mg/kg small_tissues
BW <- 0.04  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 148/2
np_size <- "np_size_small" #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.05) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df1=========================================================
exp_data <- dataset$df1 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
preds_Liu_1_small_tissues <- as.data.frame(solution[solution$time %in% unique(exp_data$time), c("Mheart",
"Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")])
obs_Liu_1_small_tissues <- list(exp_data[exp_data$Tissue == "Heart", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Liver", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Spleen", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Stomach", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Kidneys", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Lungs", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Brain", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Small_intestine", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Large_intestine", "mass"]*admin.dose/100)
score[1] <- AAFE(predictions = preds_Liu_1_small_tissues, observations = obs_Liu_1_small_tissues)
# Set up simulations for the 2nd case, Liu (2012) 1 mg/kg small_tissues_diff_time_points
BW <- 0.04  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 148/2
np_size <- "np_size_small" #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
#======================================df2=========================================================
exp_data <- dataset$df2 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg diff_time_points
colnames(exp_data)[c(2,3)] <- c("time", "mass")
column_names <- c("Mheart", "Mliver","Mspleen", "Mstomach","Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")
preds_Liu_1_small_diftp_tissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Liu_1_small_diftp_tissues[[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
obs_Liu_1_small_diftp_tissues <- list( exp_data[exp_data$Tissue == "Heart", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Liver", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Spleen", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Stomach", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Kidneys", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Lungs", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Brain", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Small_intestine", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Large_intestine", "mass"]*admin.dose/100)
score[2] <- AAFE(predictions = preds_Liu_1_small_diftp_tissues, observations = obs_Liu_1_small_diftp_tissues)
# Set up simulations for the 3rd case, i.e. Liu (2012) 1 mg/kg large_tissues_diff_time_points
BW <- 0.04  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_large <- 556/2
np_size <- "np_size_large" #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df3=========================================================
exp_data <- dataset$df3 # retrieve data of Liu et al. 2012 tissues large p.s., 1 mg/kg diff_time_points
colnames(exp_data)[c(2,3)] <- c("time", "mass")
column_names <- c("Mheart", "Mliver","Mspleen", "Mstomach","Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")
preds_Liu_1_large_diftp_tissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Liu_1_large_diftp_tissues[[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
obs_Liu_1_large_diftp_tissues <- list( exp_data[exp_data$Tissue == "Heart", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Liver", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Spleen", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Stomach", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Kidneys", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Lungs", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Brain", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Small_intestine", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Large_intestine", "mass"]*admin.dose/100)
score[3] <- AAFE(predictions = preds_Liu_1_large_diftp_tissues, observations = obs_Liu_1_large_diftp_tissues)
# Set up simulations for the 4th case, i.e. Liu (2012) 2 mg/kg small_tissues
BW <- 0.04  # body weight (kg)
admin.dose_per_kg <- 2 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 148/2
np_size <- "np_size_small" #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.05) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
#======================================df4=========================================================
exp_data <- dataset$df4 # retrieve data of Liu et al. 2012 tissues Small p.s., 2 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_Liu_2_small_tissues <- as.data.frame(solution[solution$time %in% unique(exp_data$time), c("Mheart",
"Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")])
obs_Liu_2_small_tissues <- list(exp_data[exp_data$Tissue == "Heart", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Liver", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Spleen", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Stomach", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Kidneys", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Lungs", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Brain", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Small_intestine", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Large_intestine", "concentration"]*admin.dose/100)
score[4] <- AAFE(predictions = preds_Liu_2_small_tissues, observations = obs_Liu_2_small_tissues)
# # Set up simulations for the 5th case, Liu (2012) 10 mg/kg small_tissues
BW <- 0.04  # body weight (kg)
admin.dose_per_kg <- 10 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 148/2
np_size <- "np_size_small" #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.05) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
#======================================df5=========================================================
exp_data <- dataset$df5 # retrieve data of Liu et al. 2012 tissues Small p.s., 10 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_Liu_10_small_tissues <- as.data.frame(solution[solution$time %in% unique(exp_data$time), c("Mheart",
"Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")])
obs_Liu_10_small_tissues <- list(exp_data[exp_data$Tissue == "Heart", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Liver", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Spleen", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Stomach", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Kidneys", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Lungs", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Brain", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Small_intestine", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Large_intestine", "concentration"]*admin.dose/100)
score[5] <- AAFE(predictions = preds_Liu_10_small_tissues, observations = obs_Liu_10_small_tissues)
# Set up simulations for the 6th case, i.e. Liu (2012) 1 mg/kg small_blood diff_time_points
BW <- 0.04  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 148/2
np_size <- "np_size_small" #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df6=========================================================
exp_data <- dataset$df6 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
column_names <- c("Mblood")
preds_Liu_1_small_diftp_blood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Liu_1_small_diftp_blood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
obs_Liu_1_small_diftp_blood <- list(exp_data[exp_data$Tissue == "Blood", "mass"]*admin.dose/100)
score[6] <- AAFE(predictions = preds_Liu_1_small_diftp_blood, observations = obs_Liu_1_small_diftp_blood)
# Set up simulations for the 7th case, i.e. Liu (2012) 1 mg/kg large_blood_diff_time_points
BW <- 0.04  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_large <- 556/2
np_size <- "np_size_large" #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df7=========================================================
exp_data <- dataset$df7 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
column_names <- c("Mblood")
preds_Liu_1_large_diftp_blood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Liu_1_large_diftp_blood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
obs_Liu_1_large_diftp_blood <- list(exp_data[exp_data$Tissue == "Blood", "mass"]*admin.dose/100)
score[7] <- AAFE(predictions = preds_Liu_1_large_diftp_blood, observations = obs_Liu_1_large_diftp_blood)
# Estimate final score
if (sum(is.na(score))>0){
final_score <- 100
}else{
final_score <- mean(score)
}
return(final_score)
}
################################################################################
setwd("/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/Graphene Oxide")
MW <- 124.91 #g/mol
source("Goodness-of-fit-metrics.R")
# Read data
Liu_1_small_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_1_tissues.xlsx")
Liu_1_small_diftp_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_1_tissues_dif_times.xlsx")
Liu_1_large_diftp_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_large_1_tissues_dif_times.xlsx")
Liu_2_small_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_2_tissues.xlsx")
Liu_10_small_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_10_tissues.xlsx")
Liu_1_small_diftp_blood <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_1_blood_dif_times.xlsx")
Liu_1_large_diftp_blood <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_large_1_blood_dif_times.xlsx")
setwd("/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/Graphene Oxide/Training/AAFE/GO_model")
dataset <- list("df1" = Liu_1_small_tissues,"df2" = Liu_1_small_diftp_tissues,
"df3" = Liu_1_large_diftp_tissues,"df4" = Liu_2_small_tissues,
"df5" = Liu_10_small_tissues,"df6" = Liu_1_small_diftp_blood,
"df7" = Liu_1_large_diftp_blood)
#Initialise optimiser to NULL for better error handling later
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NEWUOA"
"xtol_rel" = 1e-03,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0,
"maxeval" = 3000,
"print_level" = 1)
# Create initial conditions (zero initialisation)
#Parameter names:
N_pars <- 23 # Number of parameters to be fitted
fit <-  c(rep(log(1), 23))
lb = c(rep(log(1e-10),23))
ub = c(rep(log(1e10),23))
# lb = c(rep(log(1e-3),13), rep(log(1e-6),5))
# ub = c(rep(log(1e3),13), rep(log(1e6),5))
# Run the optimization algorithm to estimate the parameter values
optimizer <- nloptr::nloptr( x0= fit,
eval_f = obj.func,
lb	= lb,
ub = ub,
opts = opts,
dataset = dataset)
