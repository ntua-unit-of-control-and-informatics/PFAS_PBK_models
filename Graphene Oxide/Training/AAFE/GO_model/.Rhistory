exp_data <- dataset$df5 # retrieve data of Liu et al. 2012 tissues Small p.s., 10 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_Liu_10_small_tissues <- as.data.frame(solution[solution$time %in% unique(exp_data$time), c("Mheart",
"Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")])
obs_Liu_10_small_tissues <- list(exp_data[exp_data$Tissue == "Heart", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Liver", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Spleen", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Stomach", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Kidneys", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Lungs", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Brain", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Small_intestine", "concentration"]*admin.dose/100,
exp_data[exp_data$Tissue == "Large_intestine", "concentration"]*admin.dose/100)
score[5] <- AAFE(predictions = preds_Liu_10_small_tissues, observations = obs_Liu_10_small_tissues)
# Set up simulations for the 6th case, i.e. Liu (2012) 1 mg/kg small_blood diff_time_points
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 3/2
np_size <- np_size_small #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #h
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df6=========================================================
exp_data <- dataset$df6 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
column_names <- c("Mblood")
preds_Liu_1_small_diftp_blood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Liu_1_small_diftp_blood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
obs_Liu_1_small_diftp_blood <- list(exp_data[exp_data$Tissue == "Blood", "mass"]*admin.dose/100)
score[6] <- AAFE(predictions = preds_Liu_1_small_diftp_blood, observations = obs_Liu_1_small_diftp_blood)
# Set up simulations for the 7th case, i.e. Liu (2012) 1 mg/kg large_blood_diff_time_points
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_large <- 300/2
np_size <- np_size_large #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df7=========================================================
exp_data <- dataset$df7 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
column_names <- c("Mblood")
preds_Liu_1_large_diftp_blood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Liu_1_large_diftp_blood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
obs_Liu_1_large_diftp_blood <- list(exp_data[exp_data$Tissue == "Blood", "mass"]*admin.dose/100)
score[7] <- AAFE(predictions = preds_Liu_1_large_diftp_blood, observations = obs_Liu_1_large_diftp_blood)
# Estimate final score
final_score <- mean(score, na.rm = TRUE)
return(final_score)
}
################################################################################
setwd("/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/Graphene Oxide")
MW <- 124.91 #g/mol
source("Goodness-of-fit-metrics.R")
# Read data
Liu_1_small_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_1_tissues.xlsx")
Liu_1_small_diftp_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_1_tissues_dif_times.xlsx")
Liu_1_large_diftp_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_large_1_tissues_dif_times.xlsx")
Liu_2_small_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_2_tissues.xlsx")
Liu_10_small_tissues <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_10_tissues.xlsx")
Liu_1_small_diftp_blood <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_small_1_blood_dif_times.xlsx")
Liu_1_large_diftp_blood <- openxlsx::read.xlsx("Data/Liu_2012_GO_male_large_1_blood_dif_times.xlsx")
setwd("/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/Graphene Oxide/Training/AAFE/GO_model")
dataset <- list("df1" = Liu_1_small_tissues,"df2" = Liu_1_small_diftp_tissues,
"df3" = Liu_1_large_diftp_tissues,"df4" = Liu_2_small_tissues,
"df5" = Liu_10_small_tissues,"df6" = Liu_1_small_diftp_blood,
"df7" = Liu_1_large_diftp_blood)
#Initialise optimiser to NULL for better error handling later
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NEWUOA"
"xtol_rel" = 1e-03,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0,
"maxeval" = 500,
"print_level" = 1)
# Create initial conditions (zero initialisation)
#Parameter names:
N_pars <- 13 # Number of parameters to be fitted
fit <-  c(rep(log(1e4),11),log (1), log (1e-3))
lb = c(rep(log(1),11), log(1e-3), log (1e-5))
ub = c(rep(log(1e10),11), log(10), log (1))
# N_pars <- 16 # Number of parameters to be fitted
# fit <-  c(rep(log(1),13),log (1), log (1e6), log (1e-3))
#
# lb = c(rep(log(1e-20),13), log(1e-3), log(1e4),log (1e-5))
# ub = c(rep(log(1e20),13), log(10), log(1e10), log (1e-2))
# Run the optimization algorithm to estimate the parameter values
optimizer <- nloptr::nloptr( x0= fit,
eval_f = obj.func,
lb	= lb,
ub = ub,
opts = opts,
dataset = dataset)
estimated_params <- exp(optimizer$solution)
save.image("GO_model.RData")
# Set up simulations for the 1st case, i.e. Liu (2012) 1 mg/kg small_tissues
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 3/2
np_size <- np_size_small #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.05) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df1=========================================================
exp_data <- dataset$df1 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
preds_Liu_1_small_tissues <- solution[, c("time","Mheart","Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")]
# Set up simulations for the 2nd case, Liu (2012) 1 mg/kg small_tissues_diff_time_points
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 3/2
np_size <- np_size_small #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
#======================================df2=========================================================
exp_data <- dataset$df2 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg diff_time_points
colnames(exp_data)[c(2,3)] <- c("time", "mass")
preds_Liu_1_small_diftp_tissues <-  solution[, c("time","Mheart","Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")]
# Set up simulations for the 3rd case, i.e. Liu (2012) 1 mg/kg large_tissues_diff_time_points
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_large <- 300/2
np_size <- np_size_large #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df3=========================================================
exp_data <- dataset$df3 # retrieve data of Liu et al. 2012 tissues large p.s., 1 mg/kg diff_time_points
colnames(exp_data)[c(2,3)] <- c("time", "mass")
preds_Liu_1_large_diftp_tissues <-  solution[, c("time","Mheart","Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")]
# Set up simulations for the 4th case, i.e. Liu (2012) 2 mg/kg small_tissues
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 2 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 3/2
np_size <- np_size_small #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.05) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
#======================================df4=========================================================
exp_data <- dataset$df4 # retrieve data of Liu et al. 2012 tissues Small p.s., 2 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_Liu_2_small_tissues <- solution[, c("time","Mheart","Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")]
# Set up simulations for the 5th case, Liu (2012) 10 mg/kg small_tissues
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 10 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 3/2
np_size <- np_size_small #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.05) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
#======================================df5=========================================================
exp_data <- dataset$df5 # retrieve data of Liu et al. 2012 tissues Small p.s., 10 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_Liu_10_small_tissues <-  solution[, c("time","Mheart","Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")]
# Set up simulations for the 6th case, i.e. Liu (2012) 1 mg/kg small_blood diff_time_points
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_small <- 3/2
np_size <- np_size_small #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #h
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df6=========================================================
exp_data <- dataset$df6 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
preds_Liu_1_small_diftp_blood <- solution[, c("time", "Mblood")]
# Set up simulations for the 7th case, i.e. Liu (2012) 1 mg/kg large_blood_diff_time_points
BW <- 0.02  # body weight (kg)
admin.dose_per_kg <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_kg*BW*1e03 #ug PFOA
np_size_large <- 300/2
np_size <- np_size_large #nm, Small GO equivalent radius
admin.time <- 0 # time when doses are administered, in mins
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"np_size"=np_size,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,180,1) #min
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df7=========================================================
exp_data <- dataset$df7 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
preds_Liu_1_large_diftp_blood <- solution[, c("time", "Mblood")]
# ######################################################################################
#Plot the predictions against the observations
library(ggplot2)
# Function that creates a plot given a compartment name and the respective predictions and observations
create.plots <- function(predictions, observations, compartment){
#Colours of observations and predictions
cls <-  c("predictions" = "#56B4E9",  "Observations" = "#D55E00")
ggplot(data = predictions)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"predictions"'),  size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = expression("GO mass (" * mu* "g)" ),
x = "Time (min)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual("", values=cls,
guide = guide_legend(override.aes =
list(shape = c(16,NA),
linetype = c(0,1))))+
theme_light() +
theme(legend.position=c(1,1),
legend.justification=c(0, 1),
legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
axis.title=element_text(size=14),
legend.text = element_text(size=14)
)
}
# Convert Liu 2012, male small_1_tissues from long to wide format using reshape
experiment1 <- reshape(Liu_1_small_tissues[c("Tissue" ,"Time_min",
"%ID")],
idvar = "Time_min", timevar = "Tissue", direction = "wide")
colnames(experiment1) <- c("Time",Liu_1_small_tissues$Tissue )
# Convert Liu 2012, male small_1_tissues_dif_times from long to wide format using reshape
experiment2 <- reshape(Liu_1_small_diftp_tissues[c("Tissue" ,"Time_min",
"%ID")],
idvar = "Time_min", timevar = "Tissue", direction = "wide")
colnames(experiment2) <- c("Time",unique(Liu_1_small_diftp_tissues$Tissue))
# Convert Liu 2012, male large_1_tissues_dif_times from long to wide format using reshape
experiment3 <- reshape(Liu_1_large_diftp_tissues[c("Tissue" ,"Time_min",
"%ID")],
idvar = "Time_min", timevar = "Tissue", direction = "wide")
colnames(experiment3) <- c("Time",unique(Liu_1_large_diftp_tissues$Tissue))
# Convert Liu 2012, male small_2_tissues from long to wide format using reshape
experiment4 <- reshape(Liu_2_small_tissues[c("Tissue" ,"Time_min",
"%ID")],
idvar = "Time_min", timevar = "Tissue", direction = "wide")
colnames(experiment4) <- c("Time",Liu_2_small_tissues$Tissue)
# Convert Liu 2012, male small_10_tissues from long to wide format using reshape
experiment5 <- reshape(Liu_10_small_tissues[c("Tissue" ,"Time_min",
"%ID")],
idvar = "Time_min", timevar = "Tissue", direction = "wide")
colnames(experiment5) <- c("Time",Liu_10_small_tissues$Tissue)
# Convert Liu 2012, male small_1_blood_dif_times from long to wide format using reshape
experiment6 <- reshape(Liu_1_small_diftp_blood[c("Tissue" ,"Time_min",
"%ID")],
idvar = "Time_min", timevar = "Tissue", direction = "wide")
colnames(experiment6) <- c("Time",unique(Liu_1_small_diftp_blood$Tissue))
# Convert Liu 2012, male large_1_blood_dif_times from long to wide format using reshape
experiment7 <- reshape(Liu_1_large_diftp_blood[c("Tissue" ,"Time_min",
"%ID")],
idvar = "Time_min", timevar = "Tissue", direction = "wide")
colnames(experiment7) <- c("Time",unique(Liu_1_large_diftp_blood$Tissue))
# Put the experiments in a list
experiments <- list(experiment1 = experiment1, experiment2 = experiment2, experiment3 = experiment3,
experiment4 = experiment4, experiment5 = experiment5, experiment6 = experiment6,
experiment7 = experiment7)
# Rename predictions so that they share the same name as the names of the experimental data dataframe
colnames(preds_Liu_1_small_tissues) <- c("Time", "Heart", "Liver","Spleen", "Stomach",
"Kidneys", "Lungs", "Brain","Small_intestine", "Large_intestine")
colnames(preds_Liu_1_small_diftp_tissues) <- c("Time", "Heart", "Liver","Spleen", "Stomach",
"Kidneys", "Lungs", "Brain","Small_intestine", "Large_intestine")
colnames(preds_Liu_1_large_diftp_tissues) <- c("Time", "Heart", "Liver","Spleen", "Stomach",
"Kidneys", "Lungs", "Brain","Small_intestine", "Large_intestine")
colnames(preds_Liu_2_small_tissues) <- c("Time", "Heart", "Liver","Spleen", "Stomach",
"Kidneys", "Lungs", "Brain","Small_intestine", "Large_intestine")
colnames(preds_Liu_10_small_tissues) <- c("Time", "Heart", "Liver","Spleen", "Stomach",
"Kidneys", "Lungs", "Brain","Small_intestine", "Large_intestine")
colnames(preds_Liu_1_small_diftp_blood) <- c("Time", "Blood")
colnames(preds_Liu_1_large_diftp_blood) <- c("Time", "Blood")
# Create a list containing the corresponding predictions
simulations <- list(predictions1 = preds_Liu_1_small_tissues, predictions2 = preds_Liu_1_small_diftp_tissues,
predictions3 = preds_Liu_1_large_diftp_tissues, predictions4 = preds_Liu_2_small_tissues,
predictions5 = preds_Liu_10_small_tissues, predictions6 = preds_Liu_1_small_diftp_blood,
predictions7 = preds_Liu_1_large_diftp_blood)
# Iterate over all existing experiments and create the accompanying plots
for(i in 1:length(experiments)){
# Retrieve the corresponding observations and simulations
observations <- experiments[[i]]
predictions <- simulations[[i]]
# Extract the compartment names
compartments <- names(predictions)[2:length(predictions)]
# Use lapply to iterate over the column names and create plots
plots <- lapply(compartments, function(compartment) {
create.plots(predictions, observations, compartment )
})
if(length(compartments) == 1){
final_plot <- do.call(ggpubr::ggarrange, c(plots, ncol = 1, nrow = 1,
common.legend = TRUE, legend = "right"))
}else{
final_plot <- do.call(ggpubr::ggarrange, c(plots, ncol = 3, nrow = ceiling(length(plots) / 3),
common.legend = TRUE, legend = "right"))
}
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave(paste0("experiment", i,".png"), plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
}
View(experiment1)
solution
View(Liu_1_large_diftp_blood)
View(Liu_10_small_tissues)
obs_Liu_1_small_tissues
exp_data <- dataset$df1 # retrieve data of Liu et al. 2012 tissues Small p.s., 1 mg/kg
colnames(exp_data)[c(2,3)] <- c("time", "mass")
preds_Liu_1_small_tissues <- as.data.frame(solution[solution$time %in% unique(exp_data$time), c("Mheart",
"Mliver","Mspleen", "Mstomach",
"Mkidneys", "Mlungs", "Mbrain",
"Msmall_intestine", "Mlarge_intestine")])
obs_Liu_1_small_tissues <- list(exp_data[exp_data$Tissue == "Heart", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Liver", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Spleen", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Stomach", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Kidneys", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Lungs", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Brain", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Small_intestine", "mass"]*admin.dose/100,
exp_data[exp_data$Tissue == "Large_intestine", "mass"]*admin.dose/100)
obs_Liu_1_small_tissues
View(Liu_1_small_tissues)
View(Liu_1_small_tissues)
