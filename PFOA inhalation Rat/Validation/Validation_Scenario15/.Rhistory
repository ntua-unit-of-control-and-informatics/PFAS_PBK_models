PAINL <- n * SA * 1e-4/0.195 #m^2/kg, scaled to reference body weight
AINL <- PAINL*BW
AINL
PAINL
AIN
PAIN
PAIN <- 74.82e-4/0.23 #
PAIN <- 74.82e-4/0.23
PAIN
PAINL
600.5e-4/0.23
162.3e-4/0.23
95.93e-4/0.23
162.3e-4/0.23
201.1e-4/0.23
60.34e-4/0.23
335.8e-4/0.23
729.1e-4/0.23
621.4e-4/0.23
100e-4
# Pore diameters from Price & Gesquiere (2020), doi:https://doi.org/10.1126/sciadv.aax2642
DpKi <- 200 #nm
DpLi <- 280 #nm
DpSt <- 80 #nm, assumption
DpIn <- 80 #nm
DpMu <- 80 #nm
DpAd <- 80 #nm, assumption
DpRe <- 80 #nm, assumption
DpLu <- 27 #nm
DpSp <- 5000 #nm
DpHt <- 50 #nm
DpBr <- 0.99 #nm
DpGo <- 80 #nm, assumption
DpSk <- 60 #nm
DpBo <- 40000 #nm
Dps <- c(DpKi, DpLi, DpSt, DpIn, DpMu, DpAd, DpRe, DpLu, DpSp, DpHt, DpBr, DpGo, DpSk, DpBo)
s_r <- rep(NA, length(Dps))
# (C-C) bond length is 0.154 nm ==> 7*0.154 = 1.078nm
# For carboxyl group we assume 0.13nm, So the total size is around 1.2 nm
np_size <- 1.2/2 #nm, PFOA equivalent radius
for (i in 1:length(s_r)){
a_r <- np_size/(Dps[i]/2)
Phi = (1-a_r)^2
F_r <- (((1-a_r^2)^(3/2))*Phi)/(1+0.2*(a_r^2)*(1-a_r^2)^16)
G_r <- ((1- (2*a_r^2)/3 - 0.20217*a_r^5 )/ (1-0.75851*a_r^5)) - (0.0431*(1-(1-a_r^10)))
s_r[i] <- 1-(1-(1-Phi)^2)*G_r+2*a_r^2*Phi*F_r
}
SKi <- s_r[1]
SLi <- s_r[2]
SSt <- s_r[3]
SIn <- s_r[4]
SMu <- s_r[5]
SAd <- s_r[6]
SRe <- s_r[7]
SLu <- s_r[8]
SSp <- s_r[9]
SHt <- s_r[10]
SBr <- 1
SGo <- s_r[12]
SSk <- s_r[13]
SBo <- s_r[14]
SKi
SLi
SSt
SIn
SMu
SAd
SRe
SLu
SSp
SHt
SGo
SSk <- s_r[13]
SSk
SBo
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/full_params_PT_restricted")
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/full_params_PT_restricted")
L_duodenum <- 9.6# cm
L_jejunum <- 26 #cm
L_ileum <- 34.4# cm
# Inner diameters
d_duodenum <- 2.21 #cm
d_jejunum <- 2.56 #cm
d_ileum <- 3.36 #cm
SA <- 2*pi*(d_duodenum/2)*L_duodenum + 2*pi*(d_jejunum/2)*L_jejunum + 2*pi*(d_ileum/2)*L_ileum #cm^2
SA
Stomach <- 10.18 #cm^2
Duodenum <- 5.50
Upper_jejunum <- 27.33
Lower_jejunum <- 27.33
Upper_ileum <- 0.82
Lower_ileum <- 0.59
Cecum <- 1.63
colon_ascendens <- 6.36
colon_transversum <- 3.22
colon_descendens <-2.27
colon_sigmoid <-2.14
rectum <-3.63
SA_pksim <-Stomach+Duodenum+Upper_jejunum+Lower_jejunum+Upper_ileum+Lower_ileum+Cecum+
colon_ascendens+colon_transversum+colon_descendens+colon_sigmoid+rectum
SA_pksim
SA
BW=0.25
SA <- 2*pi*(d_duodenum/2)*L_duodenum + 2*pi*(d_jejunum/2)*L_jejunum + 2*pi*(d_ileum/2)*L_ileum #cm^2
n <- 5 #enlargement factor of apical membrane of proximal tubule or enterocytes
PAINL <- n * SA * 1e-4/0.195 #m^2/kg, scaled to reference body weight
AINL <- PAINL*BW #m^2
AINL
0.4095348*100
#Calculations of rat intestinal lumen surface area based on Kothari et al. (2020),https://doi.org/10.1002/btm2.10146
# Lengths
L_duodenum <- 9.6/10# cm
L_jejunum <- 26/10 #cm
L_ileum <- 34.4/10# cm
# Inner diameters
d_duodenum <- 2.21/10 #cm
d_jejunum <- 2.56/10 #cm
d_ileum <- 3.36/10 #cm
SA <- 2*pi*(d_duodenum/2)*L_duodenum + 2*pi*(d_jejunum/2)*L_jejunum + 2*pi*(d_ileum/2)*L_ileum #cm^2
SA
SA_pksim
#Enhancement factors
EF_Duodenum <- 13.86
EF_Upper_jejunum <-10.68
EF_Lower_jejunum <- 8.31
EF_Upper_ileum <- 8.11
EF_Lower_ileum <- 11.22
EF_Cecum <- 1.47
EF_colon_ascendens <- 1.7
EF_colon_transversum <- 1.92
EF_colon_descendens <- 1.95
EF_colon_sigmoid <- 1.95
EF_rectum <- 2.12
SA_pksim_effective <- (Duodenum*EF_Duodenum+Upper_jejunum*EF_Upper_jejunum+Lower_jejunum*EF_Lower_jejunum+
Upper_ileum*EF_Upper_ileum+Lower_ileum*EF_Lower_ileum+Cecum*EF_Cecum+
colon_ascendens*EF_colon_ascendens+colon_transversum*EF_colon_transversum+
colon_descendens*EF_colon_descendens+colon_sigmoid*EF_colon_sigmoid+
EF_rectum*rectum)
SA_pksim_effective
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
# Set up simulations for the 1st case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
View(create_params)
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
# Set up simulations for the 1st case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
# Set up simulations for the 1st case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution_M_oral_5_urine <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-07, atol = 1e-07))
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
# Set up simulations for the 1st case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution_M_oral_5_urine <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-07, atol = 1e-07))
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
BW <- 0.2 #kg
sex <- "M"
admin.type <-"oral"
#5mg/kg dose
admin.time <- seq(0.01,27*24.01,24)
dose <- rep(5,28) #mg/kg
admin.dose <- dose * BW*1000 #ug
parameters <-   create.params(list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex))
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
BW <- 0.2 #kg
sex <- "M"
admin.type <-"oral"
#5mg/kg dose
admin.time <- seq(0.01,27*24.01,24)
dose <- rep(5,28) #mg/kg
admin.dose <- dose * BW*1000 #ug
parameters <-   create_params(list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex))
events <- create.events(parameters)
inits <- create.inits (parameters)
sample_time <- seq(0,28*24,1)
solution_5 <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = parameters, events = events,
method="lsodes",rtol = 1e-7, atol = 1e-7))
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
# Set up simulations for the 1st case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("C:/Users/Ioannis/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario15")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario15_simplified.RData")
# Body weight
# Set up simulations for the 1st case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution_M_oral_5_urine <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-07, atol = 1e-07))
