'VRF'=VRF, 'VRT'=VRT, 'VVen' = VVen,
'VArt' = VArt, 'VLu'=VLu, 'VLuB'=VLuB, 'VLuF'=VLuF,
'VLuAF'=VLuAF, 'VLuT'=VLuT,
'VSP'=VSP, 'VSPB'=VSPB, 'VSPF'=VSPF, 'VSPT'=VSPT,
'VH'=VH, 'VHB'=VHB, 'VHF'=VHF, 'VHT'=VHT,
'VBr'=VBr, 'VBrB'=VBrB, 'VBrF'=VBrF, 'VBrT'=VBrT,
'VGo'=VGo, 'VGoB'=VGoB, 'VGoF'=VGoF, 'VGoT'=VGoT,
'VIN'=VIN, 'VINB'=VINB, 'VINF'=VINF, 'VINT'=VINT,
'VST'=VST, 'VSTB'=VSTB, 'VSTF'=VSTF, 'VSTT'=VSTT,
'VSTL'=VSTL, 'VINL'=VINL,
'VSK'=VSK,'VSKB'=VSKB, 'VSKF'=VSKF, 'VSKT'=VSKT,
'VBo'=VBo,'VBoB'=VBoB, 'VBoF'=VBoF, 'VBoT'=VBoT,
'A_peritubular_PTC' = A_peritubular_PTC,
'A_peritubular_DTC' = A_peritubular_DTC,
'AL'=AL, 'AM'=AM, 'AA'=AA, 'AR'=AR, 'ALu'= ALu,
'ASP'=ASP, 'AH'=AH, 'ABr'=ABr, 'AST'= AST,
'AIN'=AIN, 'AGo'=AGo,
'ASK'= ASK, 'ABo'=ABo,
'AINL' = AINL, 'AcL' = AcL, 'AcM' = AcM, 'AcST' = AcST,
'AcIN' = AcIN, 'AcA' = AcA, 'AcLu' = AcLu, 'AcALF' = AcALF,
'AcSP' = AcSP, 'AcH' = AcH, 'AcBr' = AcBr, 'AcGo' = AcGo,
'AcSK' = AcSK, 'AcBo' = AcBo, 'AcR' = AcR, 'APT' = APT,
'ADAL' = ADAL, 'ADT' = ADT, 'ACD' = ACD, 'AcK_DALC' = AcK_DALC,
'AcK_CDC' = AcK_CDC, 'AcKTrest' = AcKTrest,
"SKi" = SKi,"SLi" = SLi,"SSt" = SSt,"SIn" = SIn,
"SMu" = SMu,"SAd" = SAd,"SRe" = SRe,"SLu" = SLu,
"SSp" = SSp,"SHt" = SHt,"SBr" = SBr,"SGo" = SGo,
"SSk" = SSk,"SBo" = SBo,
'Qcardiac'=Qcardiac, 'QBK'=QBK,
'QBL'=QBL, 'QBLtot'=QBLtot,
'QBM'=QBM, 'QBA'=QBA,
'QBR'=QBR, 'QBLu'=QBLu, 'Qfeces'=Qfeces,  'feces_density'=feces_density,
'Qbile'=Qbile, 'QGFR'=QGFR,'Qurine'=Qurine,
'QBSP'=QBSP, 'QBH'=QBH, 'QBBr'=QBBr, 'QBST'=QBST,
'QBIN'=QBIN, 'QGE'=QGE,
'QBGo'=QBGo,
'QBSK'=QBSK, 'QBBo'=QBBo, 'Hct' = Hct,
"QparaKi" = QparaKi,"QparaLi" = QparaLi,"QparaSt" = QparaSt,"QparaIn" = QparaIn,
"QparaMu" = QparaMu,"QparaAd" = QparaAd,"QparaRe" = QparaRe,"QparaLu" = QparaLu,
"QparaSp" = QparaSp,"QparaHt" = QparaHt,"QparaBr" = QparaBr,"QparaGo" = QparaGo,
"QparaSk" = QparaSk,"QparaBo" = QparaBo,
"QPT" = QPT, "QTDL" = QTDL, "QTAL" = QTAL, "QDT" = QDT, "QCD" = QCD,
'f_tubular' =  f_tubular,  'f_PTC_prot_to_tub_prot' = f_PTC_prot_to_tub_prot,
'f_DALC_prot_to_tub_prot' = f_DALC_prot_to_tub_prot,
'f_DTC_prot_to_tub_prot' = f_DTC_prot_to_tub_prot ,
'f_CDC_prot_to_tub_prot' = f_CDC_prot_to_tub_prot,
'kabST'=kabST,
"admin.time" = admin.time, "admin.dose" = admin.dose,
"admin.type" = admin.type, "MW"=MW,
'CalbB_init'= CalbB_init, 'CalbKF_init'=CalbKF_init, 'CalbLF_init'=CalbLF_init,
'CalbMF_init'=CalbMF_init, 'CalbAF_init'=CalbAF_init, 'CalbRF_init'=CalbRF_init,
'CalbBoF_init'=CalbBoF_init, 'CalbLuF_init' =CalbLuF_init,
'CalbLuAF_init'=CalbLuAF_init, 'CalbSPF_init' =CalbSPF_init,
'CalbGoF_init' =CalbGoF_init, 'CalbHF_init' =CalbHF_init,
'CalbBrF_init' =CalbBrF_init, 'CalbSTF_init' =CalbSTF_init,
'CalbINF_init' =CalbINF_init, 'CalbSKF_init' =CalbSKF_init,
'CalbKB_init'=CalbKB_init,'CalbLB_init'=CalbLB_init,'CalbSTB_init'=CalbSTB_init,
'CalbINB_init'=CalbINB_init, 'CalbMB_init'=CalbMB_init,'CalbAB_init'=CalbAB_init,
'CalbRB_init'=CalbRB_init,'CalbBoB_init'=CalbBoB_init,
'CalbLuB_init'=CalbLuB_init, 'CalbSPB_init'=CalbSPB_init,'CalbGoB_init'=CalbGoB_init,
'CalbHB_init'=CalbHB_init,'CalbBrB_init'=CalbBrB_init,'CalbSKB_init'=CalbSKB_init,
'Ca2uKT_init'=Ca2uKT_init,'CFabpKT_init'=CFabpKT_init,'CFabpLT_init'=CFabpLT_init,
'Ka'=Ka, 'Ka2u'=Ka2u, 'KLfabp'=KLfabp,
"koff_alb" = koff_alb, "koff_a2u" = koff_a2u, "koff_fabp" = koff_fabp,
"kon_alb" = kon_alb, "kon_a2u" = kon_a2u, "kon_fabp" = kon_fabp,
"CL_hepatobiliary" = CL_hepatobiliary, 'CLfeces' = CLfeces,
'VmL_Oatp'=VmL_Oatp, 'KmL_Oatp'= KmL_Oatp, 'VmL_Ntcp'= VmL_Ntcp,
'VmL_Oatp2'=VmL_Oatp2, 'KmL_Oatp2'= KmL_Oatp2,
'VmIn_Oatp2'=VmIn_Oatp2, 'KmIn_Oatp2'= KmIn_Oatp2,
'KmL_Ntcp'= KmL_Ntcp,'VmK_Oatp'= VmK_Oatp,
'KmK_Oatp'=KmK_Oatp, 'VmLu_Oatp_ap'= VmLu_Oatp_ap,
'KmLu_Oatp_ap'=KmLu_Oatp_ap, 'VmLu_Oatp_bas'= VmLu_Oatp_bas,
'KmLu_Oatp_bas'=KmLu_Oatp_bas,
'VmK_Oat1'=VmK_Oat1, 'KmK_Oat1'=KmK_Oat1, 'KmK_Oat1'=KmK_Oat1,
'VmK_Oat3'=VmK_Oat3, 'KmK_Oat3'=KmK_Oat3,
'VmK_Urat'=VmK_Urat, 'KmK_Urat'=KmK_Urat,
'KmK_baso' = KmK_baso, 'KmK_api' = KmK_api,
'VmK_baso' = VmK_baso,'VmK_api' = VmK_api,
'Papp' = Papp, 'k_gut_in' = k_gut_in, 'k_gut_out' = k_gut_out,
'kKTrestF'=kKTrestF, 'kCdcF' = kCdcF, 'kDalcF' = kDalcF, 'kPtcF' = kPtcF, 'kDtcF' = kDtcF,
'kPtcTu'=kPtcTu, 'kDalcTu' = kDalcTu, 'kDtcTu' = kDtcTu, 'kCdcTu' = kCdcTu,
'kLFLT'=kLFLT,  'kAFAT'=kAFAT,
'kRFRT'=kRFRT,
'kMFMT'=kMFMT, 'kLuTLuF' =kLuTLuF, 'kLuTLuAF'=kLuTLuAF, 'kSPFSPT' =kSPFSPT,
'kSTFSTT' =kSTFSTT, 'kINFINT' =kINFINT, 'kHFHT' =kHFHT,
'kBrFBrT' =kBrFBrT, 'kGoFGoT' =kGoFGoT,
'kSKFSKT' =kSKFSKT, 'kBoFBoT'=kBoFBoT,
'PeffK'=PeffK, 'PeffL'=PeffL,
'PeffA'=PeffA, 'PeffM'=PeffM, 'PeffR'=PeffR, 'PeffLu' = PeffLu,
'PeffSP'=PeffSP, 'PeffH'=PeffH, 'PeffBr'=PeffBr, 'PeffST' = PeffST,
'PeffIN'=PeffIN, 'PeffGo'=PeffGo,
'PeffSK' = PeffSK,  'PeffBo' = PeffBo
))
})
}
save.image("~/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/proximal_tubule/scenario24l_PkSim/scenario24l_PkSim_simplified.RData")
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario24l_PKSim")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario24l_PkSim_simplified.RData")
# Body weight
# Set up simulations for the 1st case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution_M_oral_5_urine <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-07, atol = 1e-07))
# Set up simulations for the 2nd case, i.e. Cui (2010) ORAL male urine high
BW <-  0.210 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 20 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution_M_oral_20_urine <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# Set up simulations for the 3d case, i.e. Cui (2010) ORAL male feces low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution_M_oral_5_feces <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# Set up simulations for the 4th case, i.e. Cui (2010) ORAL male feces high
BW <-  0.210 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 20 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution_M_oral_20_feces <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
##############################
### Load experimental data ###
##############################
score <- rep(NA, 4)
df_M_oral_5_urine <- openxlsx::read.xlsx("Raw_Data/Cui_2008/PFOA_male_urine_oral_low_Cui_2010.xlsx")
colnames(df_M_oral_5_urine)[c(2,3)] <- c("Time", "Mass")
column_names <- c("Murine")
obs_M_oral_5_urine <- df_M_oral_5_urine[df_M_oral_5_urine$Dose_mg_per_kg == 5 &
df_M_oral_5_urine$Tissue == "Urine" & df_M_oral_5_urine$Sex == "M",]
preds_M_oral_5_urine <- list()
# loop over compartments with available data
for (i in 1:length(unique(df_M_oral_5_urine$Tissue))) {
compartment <- unique(df_M_oral_5_urine$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- df_M_oral_5_urine[df_M_oral_5_urine$Tissue == compartment, 2]
preds_M_oral_5_urine [[i]] <- solution_M_oral_5_urine[solution_M_oral_5_urine$time %in% exp_time, "Murine"]/1000
}
preds_M_oral_5_urine <- preds_M_oral_5_urine [[i]]
score[1] <- AAFE(preds_M_oral_5_urine, (obs_M_oral_5_urine$Mass))
results_urine_M_oral_5 <- data.frame("Study" = "Cui_2010_excreta", "Dose" =  obs_M_oral_5_urine$Dose_mg_per_kg,
"Tissue" = obs_M_oral_5_urine$Tissue ,
"Type" = obs_M_oral_5_urine$Type, "Sex" = obs_M_oral_5_urine$Sex,
"Observed" = (obs_M_oral_5_urine$Mass),
"Predicted" = preds_M_oral_5_urine,  "Time" = obs_M_oral_5_urine$Time)
#==============================================================================================================================
df_M_oral_20_urine <- openxlsx::read.xlsx("Raw_Data/Cui_2008/PFOA_male_urine_oral_high_Cui_2010.xlsx")
colnames(df_M_oral_20_urine)[c(2,3)] <- c("Time", "Mass")
column_names <- c("Murine")
obs_M_oral_20_urine <- df_M_oral_20_urine[df_M_oral_20_urine$Dose_mg_per_kg == 20 &
df_M_oral_20_urine$Tissue == "Urine" & df_M_oral_20_urine$Sex == "M",]
preds_M_oral_20_urine <- list()
# loop over compartments with available data
for (i in 1:length(unique(df_M_oral_20_urine$Tissue))) {
compartment <- unique(df_M_oral_20_urine$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- df_M_oral_20_urine[df_M_oral_20_urine$Tissue == compartment, 2]
preds_M_oral_20_urine [[i]] <- solution_M_oral_20_urine[solution_M_oral_20_urine$time %in% exp_time, column_names[i]]/1000
}
preds_M_oral_20_urine <- preds_M_oral_20_urine [[i]]
score[2] <- AAFE(preds_M_oral_20_urine, (obs_M_oral_20_urine$Mass))
results_urine_M_oral_20 <- data.frame("Study" = "Cui_2010_excreta", "Dose" =  obs_M_oral_20_urine$Dose_mg_per_kg,
"Tissue" = obs_M_oral_20_urine$Tissue ,
"Type" = obs_M_oral_20_urine$Type, "Sex" = obs_M_oral_20_urine$Sex,
"Observed" = (obs_M_oral_20_urine$Mass),
"Predicted" = preds_M_oral_20_urine,  "Time" = obs_M_oral_20_urine$Time)
#==============================================================================================================================
df_M_oral_5_feces <- openxlsx::read.xlsx("Raw_Data/Cui_2008/PFOA_male_feces_oral_low_Cui_2010.xlsx")
colnames(df_M_oral_5_feces)[c(2,3)] <- c("Time", "Mass")
column_names <- c("Murine")
obs_M_oral_5_feces <- df_M_oral_5_feces[df_M_oral_5_feces$Dose_mg_per_kg == 5 &
df_M_oral_5_feces$Tissue == "Feces" & df_M_oral_5_feces$Sex == "M",]
preds_M_oral_5_feces <- list()
# loop over compartments with available data
for (i in 1:length(unique(df_M_oral_5_feces$Tissue))) {
compartment <- unique(df_M_oral_5_feces$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- df_M_oral_5_feces[df_M_oral_5_feces$Tissue == compartment, 2]
preds_M_oral_5_feces [[i]] <- solution_M_oral_5_feces[solution_M_oral_5_feces$time %in% exp_time, column_names[i]]/1000
}
preds_M_oral_5_feces <- preds_M_oral_5_feces [[i]]
score[3] <- AAFE(preds_M_oral_5_feces, (obs_M_oral_5_feces$Mass))
results_feces_M_oral_5 <- data.frame("Study" = "Cui_2010_excreta", "Dose" =  obs_M_oral_5_feces$Dose_mg_per_kg,
"Tissue" = obs_M_oral_5_feces$Tissue ,
"Type" = obs_M_oral_5_feces$Type, "Sex" = obs_M_oral_5_feces$Sex,
"Observed" = (obs_M_oral_5_feces$Mass),
"Predicted" = preds_M_oral_5_feces,  "Time" = obs_M_oral_5_feces$Time)
#==============================================================================================================================
df_M_oral_20_feces <- openxlsx::read.xlsx("Raw_Data/Cui_2008/PFOA_male_feces_oral_high_Cui_2010.xlsx")
colnames(df_M_oral_20_feces)[c(2,3)] <- c("Time", "Mass")
column_names <- c("Murine")
obs_M_oral_20_feces <- df_M_oral_20_feces[df_M_oral_20_feces$Dose_mg_per_kg == 20 &
df_M_oral_20_feces$Tissue == "Feces" & df_M_oral_20_feces$Sex == "M",]
preds_M_oral_20_feces <- list()
# loop over compartments with available data
for (i in 1:length(unique(df_M_oral_20_feces$Tissue))) {
compartment <- unique(df_M_oral_20_feces$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- df_M_oral_20_feces[df_M_oral_20_feces$Tissue == compartment, 2]
preds_M_oral_20_feces [[i]] <- solution_M_oral_20_feces[solution_M_oral_20_feces$time %in% exp_time, column_names[i]]/1000
}
preds_M_oral_20_feces <- preds_M_oral_20_feces [[i]]
score[4] <- AAFE(preds_M_oral_20_feces, (obs_M_oral_20_feces$Mass))
results_feces_M_oral_20 <- data.frame("Study" = "Cui_2010_excreta", "Dose" =  obs_M_oral_20_feces$Dose_mg_per_kg,
"Tissue" = obs_M_oral_20_feces$Tissue ,
"Type" = obs_M_oral_20_feces$Type, "Sex" = obs_M_oral_20_feces$Sex,
"Observed" = (obs_M_oral_20_feces$Mass),
"Predicted" = preds_M_oral_20_feces,  "Time" = obs_M_oral_20_feces$Time)
results_df <- rbind(results_urine_M_oral_5, results_urine_M_oral_20, results_feces_M_oral_5, results_feces_M_oral_20)
AAFE_Cui <- mean(score)
print(paste0("The AAFE on the excreta data of Cui et al. (2010) is ", AAFE_Cui))
write.csv(results_df,
#"C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_results/Kemper_2003_excreta_Loccisano_results.csv",
"/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario24l_PKSim/Cui_2010_Excreta_results.csv",
row.names =F)
library(deSolve)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation")
setwd("/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario24l_PKSim")
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#===============
# Generate predictions
#===============
load("scenario24l_PkSim_simplified.RData")
# Set up simulations for the 1st case, i.e. Lupton (2020) ORAL female feces
BW <- 0.184  # body weight (kg)
admin.dose_per_g <- 0.047 # administered dose in mg PFOA/kg BW
admin.dose_single <- (admin.dose_per_g*BW*1e03)/2 #ug PFOA
admin.time <- seq(0,13.5*24,12) #time when doses are administered, in hours
admin.dose <- rep(admin.dose_single, length(admin.time))
admin.type <- "oral"
sex <- "F"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,384,1)
# ode(): The solver of the ODEs
solution_F_oral_feces <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# Set up simulations for the 1st case, i.e. Lupton (2020) ORAL female urine
BW <- 0.184  # body weight (kg)
admin.dose_per_g <- 0.047 # administered dose in mg PFOA/kg BW
admin.dose_single <- (admin.dose_per_g*BW*1e03)/2 #ug PFOA
admin.time <- seq(0,13.5*24,12) #time when doses are administered, in hours
admin.dose <- rep(admin.dose_single, length(admin.time))
admin.type <- "oral"
sex <- "F"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create_params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,384,1)
# ode(): The solver of the ODEs
solution_F_oral_urine <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
##############################
### Load experimental data ###
##############################
score <- rep(NA, 2)
df_excreta <- openxlsx::read.xlsx("Raw_Data/Lupton_2020/Lupton_2020_excreta.xlsx")
obs_F_oral_feces <- df_excreta[df_excreta$Dose_mg_per_kg == 0.047 &
df_excreta$Tissue == "Feces" & df_excreta$Sex == "F",]
#Estimate fecal dry mass
Mfeces_wet <- (8.18/0.21)*BW #g
Mfeces_dry <- Mfeces_wet*0.8 # Enqi et al., 2021, control rats:20.1% water content, https://doi.org/10.3389/fcimb.2020.581974
Lupton_Ffeces <- c(df_excreta[df_excreta$Tissue == "Feces", "Concentration_microg_per_g_organ"])*Mfeces_dry
# Estimate cumulative fecal mass
obs_Lup_OR_Ffeces_cum <- cumsum(Lupton_Ffeces)
rounded_time <- round(obs_F_oral_feces$Time_hours)
rounded_soltime <- round(solution_F_oral_feces$time)
preds_F_oral_feces <- solution_F_oral_feces[rounded_soltime %in% rounded_time, "Mfeces"]
score[1] <- AAFE(preds_F_oral_feces, obs_Lup_OR_Ffeces_cum)
results_feces_F_oral<- data.frame("Study" = "Lupton_2020", "Dose" =  obs_F_oral_feces$Dose_mg_per_kg,
"Tissue" = obs_F_oral_feces$Tissue ,
"Type" = obs_F_oral_feces$Type, sex = "F",
"Observed" = obs_Lup_OR_Ffeces_cum,
"Predicted" = preds_F_oral_feces,  "Time" = obs_F_oral_feces$Time_hours)
obs_F_oral_urine <- df_excreta[df_excreta$Dose_mg_per_kg == 0.047 &
df_excreta$Tissue == "Urine" & df_excreta$Sex == "F",]
Qurine_daily <- 85 * BW#  (ml/d/kg)*BW  --> mL/d, Schmidt et al., 2001, doi:10.1002/nau.1006
Lupton_Furine <- c(df_excreta[df_excreta$Tissue == "Urine", "Concentration_microg_per_g_organ"])*Qurine_daily
# Estimate cumulative fecal mass
obs_Lup_OR_Furine_cum <- cumsum(Lupton_Furine)
rounded_time <- round(obs_F_oral_urine$Time_hours)
rounded_soltime <- round(solution_F_oral_urine$time)
preds_F_oral_urine <- solution_F_oral_urine[rounded_soltime %in% rounded_time, "Murine"]
score[2] <- AAFE(preds_F_oral_urine, obs_Lup_OR_Furine_cum)
results_urine_F_oral<- data.frame("Study" = "Lupton_2020", "Dose" =  obs_F_oral_urine$Dose_mg_per_kg,
"Tissue" = obs_F_oral_urine$Tissue,
"Type" = obs_F_oral_urine$Type, sex = "F",
"Observed" = obs_Lup_OR_Furine_cum,
"Predicted" = preds_F_oral_urine,  "Time" = obs_F_oral_urine$Time_hours)
results_df <- rbind(results_feces_F_oral, results_urine_F_oral)
AAFE_Lupton <- mean(score)
print(paste0("The AAFE on the excreta data of Lupton et al. (2020) is ", AAFE_Lupton))
write.csv(results_df,
#"C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_results/Kemper_2003_excreta_Loccisano_results.csv",
"/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario24l_PKSim/Lupton_2020_excreta_results.csv",
row.names =F)
library(ggplot2)
#setwd("C:/Users/ptsir/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_results")
setwd("/Users/eviepapakyriakopoulou/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Validation/Validation_Scenario24l_PKSim")
# Load Results
# Results from Cui
Cui_2010_Excreta_results <- read.csv("Cui_2010_Excreta_results.csv", header = T)
Cui_Urine_M_5 <- Cui_2010_Excreta_results[Cui_2010_Excreta_results$Dose == 5 &
Cui_2010_Excreta_results$Tissue  == "Urine" &
Cui_2010_Excreta_results$Sex == "M", ]
Cui_Urine_M_5$Experiment <- "Cui | 5mg/kg | Urine | M"
Cui_Urine_M_20 <- Cui_2010_Excreta_results[Cui_2010_Excreta_results$Dose == 20 &
Cui_2010_Excreta_results$Tissue  == "Urine" &
Cui_2010_Excreta_results$Sex == "M", ]
Cui_Urine_M_20$Experiment <- "Cui | 20mg/kg | Urine | M"
Cui_Feces_M_5 <- Cui_2010_Excreta_results[Cui_2010_Excreta_results$Dose == 5 &
Cui_2010_Excreta_results$Tissue  == "Feces" &
Cui_2010_Excreta_results$Sex == "M", ]
Cui_Feces_M_5$Experiment <- "Cui | 5mg/kg | Feces | M"
Cui_Feces_M_20 <- Cui_2010_Excreta_results[Cui_2010_Excreta_results$Dose == 20 &
Cui_2010_Excreta_results$Tissue  == "Feces" &
Cui_2010_Excreta_results$Sex == "M", ]
Cui_Feces_M_20$Experiment <- "Cui | 20mg/kg | Feces | M"
#Results from Lupton 2020
Lupton_2020_Excreta_results <- read.csv("Lupton_2020_excreta_results.csv", header = T, colClasses = c("sex" = "character"))
Lupton_Feces_F <- Lupton_2020_Excreta_results[Lupton_2020_Excreta_results$Dose == 0.047 &
Lupton_2020_Excreta_results$Tissue  == "Feces" &
Lupton_2020_Excreta_results$sex == "F", ]
Lupton_Feces_F$Experiment <- "Lupton | 0.047mg/kg | Feces | F"
Lupton_Urine_F <- Lupton_2020_Excreta_results[Lupton_2020_Excreta_results$Dose == 0.047 &
Lupton_2020_Excreta_results$Tissue  == "Urine" &
Lupton_2020_Excreta_results$sex == "F", ]
Lupton_Urine_F$Experiment <- "Lupton | 0.047mg/kg | Urine | F"
Experiment <- scales::hue_pal()(6)
names(Experiment) <- unique(c( Cui_Urine_M_5$Experiment, Cui_Urine_M_20$Experiment,
Cui_Feces_M_5$Experiment, Cui_Feces_M_20$Experiment,
Lupton_Feces_F$Experiment, Lupton_Urine_F$Experiment))
scatter_plot <- ggplot()+
geom_abline(intercept = log10(1), slope = 1, linetype = "dashed", color = "black", linewidth = 1.5, alpha = 0.7) +  # Identity line in log10 scale
geom_abline(intercept = log10(3), slope = 1, linetype = "dotted", color = "red", linewidth = 1.5, alpha = 0.7) +  # +3-fold error line
geom_abline(intercept = log10(1/3), slope = 1, linetype = "dotted", color = "red", linewidth = 1.5, alpha = 0.7) +  # -3-fold error line
geom_abline(intercept = log10(10), slope = 1, linetype = "dotdash", color = "blue", linewidth = 1.5, alpha = 0.7) +  # +10-fold error line
geom_abline(intercept = log10(1/10), slope = 1, linetype = "dotdash", color = "blue", linewidth = 1.5, alpha = 0.7) +  # -10-fold error line
geom_point(data = Cui_Urine_M_5, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Cui_Urine_M_20, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Cui_Feces_M_5, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Cui_Feces_M_20, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Lupton_Feces_F, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
geom_point(data = Lupton_Urine_F, aes(x=Observed, y=Predicted, color = Experiment, shape = Tissue), size=4, stroke = 1.5)+
scale_y_log10()+
scale_x_log10()+
scale_color_manual(values = Experiment)+
theme(legend.spacing.y = unit(1, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))+
theme_light()+
labs(y = "Predicted PFOA (mg/L tissue)",
x = "Observed PFOA ( mg/L tissue)")+
theme(plot.title = element_text(hjust = 0.5),
legend.key.size = unit(0.75, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=12,  hjust = 0),
axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
)
#print(scatter_plot)
ggsave("validation_plot_PFOA_excreta.png", scatter_plot, width = 11, height = 7, units = "in", dpi = 300)
