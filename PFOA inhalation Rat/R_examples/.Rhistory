dMLFb = bLFon*MLFf - bLFoff*MLFb #Mass of PFOA in interstitial fluid of liver bound to albumin
#Gut interstitial fluid subcompartment
dMGFf = bBGF*MBf - bGFB*MGFf + bGTGF*MGTf - bGFGT*MGFf + bGFoff*MGFb - bGFon*MGFf
dMGFb = bGFon*MGFf - bGFoff*MGFb #Mass of PFOA in interstitial fluid of gut bound to albumin
#Muscle interstitial fluid subcompartment
dMMFf = bBMF*MBf - bMFB*MMFf + bMTMF*MMTf - bMFMT*MMFf + bMFoff*MMFb - bMFon*MMFf
dMMFb = bMFon*MMFf - bMFoff*MMFb #Mass of PFOA in interstitial fluid of muscle bound to albumin
#Adipose interstitial fluid subcompartment
dMAFf = bBAF*MBf - bAFB*MAFf + bATAF*MATf - bAFAT*MAFf + bAFoff*MAFb - bAFon*MAFf
dMAFb = bAFon*MAFf - bAFoff*MAFb #Mass of PFOA in interstitial fluid of adipose bound to albumin
#Rest of body interstitial fluid subcompartment
dMRFf = bBRF*MBf - bRFB*MRFf + bRTRF*MRTf - bRFRT*MRFf + bRFoff*MRFb - bRFon*MRFf
dMRFb = bRFon*MRFf - bRFoff*MRFb #Mass of PFOA in interstitial fluid of rest of body bound to albumin
#==================================================  Tissue
#Adipose tissue subcompartment
dMATf = bAFAT*MAFf - bATAF*MATf
#Muscle tissue subcompartment
dMMTf = bMFMT*MMFf - bMTMF*MMTf
#Rest of body tissue subcompartment
dMRTf = bRFRT*MRFf - bRTRF*MRTf
#Kidney tissue subcompartment
dMKTf = bKFKT*MKFf - bKTKF*MKTf + bclear*MKFf - befflux*MKTf + bFKT*MFilf - bKTF*MKTf + breab*MFilf - (bKTon1*MKTf - bKToff*MKTb1) - (bKTon2*MKTf - bKToff*MKTb2) - (bKTon3*MKTf - bKToff*MKTb3) - (bKTa2on*MKTf - bKTa2off*MKTa2b)
dMKTb1 = bKTon1*MKTf - bKToff*MKTb1 #PFOA in kidney tissue bound to LFABP1
dMKTb2 = bKTon2*MKTf - bKToff*MKTb2 #PFOA in kidney tissue bound to LFABP2
dMKTb3 = bKTon3*MKTf - bKToff*MKTb3 #PFOA in kidney tissue bound to LFABP3
dMKTa2b = bKTa2on*MKTf - bKTa2off*MKTa2b #PFOA in kidney tissue bound to alpha2mu-globulin
dMFilf = bBF*MBf - bFB*MFilf + bKTF*MKTf - bFKT*MFilf - breab*MFilf - (Qurine/VFil)*MFilf
dMurine = (Qurine/VFil)*MFilf
#Liver tissue subcompartment
dMLTf = bLFLT*MLFf - bLTLF*MLTf + babs*MLFf + bbileLT*Mbilef - bLTbile*MLTf - (bLFon1*MLTf - bLFoff*MLTb1) - (bLFon2*MLTf - bLFoff*MLTb2) - (bLFon3*MLTf - bLFoff*MLTb3)
dMLTb1 = bLFon1*MLTf - bLFoff*MLTb1 #PFOA in liver tissue bound to LFABP1
dMLTb2 = bLFon2*MLTf - bLFoff*MLTb2 #PFOA in liver tissue bound to LFABP2
dMLTb3 = bLFon3*MLTf - bLFoff*MLTb3 #PFOA in liver tissue bound to LFABP3
dMbilef = bLTbile*MLTf - bbileLT*Mbilef - (Qbile/Vbile)*Mbilef
#dMbile = (Qbile/Vbile)*Mbilef
#Gut tissue subcompartment
dMGTf = bGFGT*MGFf - bGTGF*MGTf + bGLGT*MGLf - bGTGL*MGTf
dMGLf = bGTGL*MGTf - bGLGT*MGLf + (Qbile/Vbile)*Mbilef - (Qfeces/VGL)*MGLf
dMfeces = (Qfeces/VGL)*MGLf
return(list(c('dMBf'=dMBf, 'dMBb'=dMBb, 'dMKFf'=dMKFf, 'dMKFb'=dMKFb,'dMLFf'=dMLFf, 'dMLFb'=dMLFb, 'dMGFf'=dMGFf, 'dMGFb'=dMGFb, 'dMMFf'=dMMFf, 'dMMFb'=dMMFb, 'dMAFf'=dMAFf, 'dMAFb'=dMAFb,
'dMRFf'=dMRFf, 'dMRFb'=dMRFb, 'dMATf'=dMATf, 'dMMTf'=dMMTf, 'dMRTf'=dMRTf, 'dMKTf'=dMKTf, 'dMKTb1'=dMKTb1, 'dMKTb2'=dMKTb2, 'dMKTb3'=dMKTb3, 'dMKTa2b'=dMKTa2b, 'dMFilf'=dMFilf, 'dMurine'=dMurine,
'dMLTf'=dMLTf, 'dMLTb1'=dMLTb1, 'dMLTb2'=dMLTb2, 'dMLTb3'=dMLTb3, 'dMbilef'=dMbilef, #'dMbile'=dMbile,
'dMGTf'=dMGTf, 'dMGLf'=dMGLf, 'dMfeces'=dMfeces, 'dMalbB'=dMalbB, 'dMalbKF'=dMalbKF, 'dML_fabpKT1'=dML_fabpKT1,
'dML_fabpKT2'=dML_fabpKT2, 'dML_fabpKT3'=dML_fabpKT3, 'dMK_fabpKT'=dMK_fabpKT, 'dMalbLF'=dMalbLF, 'dML_fabpLT1'=dML_fabpLT1,
'dML_fabpLT2'=dML_fabpLT2, 'dML_fabpLT3'=dML_fabpLT3, 'dMalbGF'=dMalbGF, 'dMalbMF'=dMalbMF, 'dMalbAF'=dMalbAF, 'dMalbRF'=dMalbRF
)))
})
}
#Initial condition for each compartment.
create.inits <- function(parameters){
with(as.list(parameters),{
MBf <- admin.dose *BW
MBb <- 0; MKFf <- 0; MKFb <- 0; MLFf <- 0; MLFb <- 0; MGFf <- 0; MGFb <- 0; MMFf <- 0; MMFb <- 0; MAFf <- 0; MAFb <- 0; MRFf <- 0; MRFb <- 0;
MATf <- 0; MMTf <- 0; MRTf <- 0; MKTf <- 0; MKTb1 <- 0; MKTb2 <- 0; MKTb3 <- 0; MKTa2b <-0;
MFilf <- 0; Murine <- 0; MLTf <- 0; MLTb1 <- 0; MLTb2 <- 0; MLTb3 <- 0; Mbilef <- 0; Mbile <- 0; MGTf <- 0;  MGLf <- 0; Mfeces <-0
MalbB <- MalbB; MalbKF <- MalbKF; ML_fabpKT1 <- ML_fabpKT1; ML_fabpKT2 <- ML_fabpKT2; ML_fabpKT3 <- ML_fabpKT3; MK_fabpKT <- MK_fabpKT;
MalbLF <- MalbLF; ML_fabpLT1 <- ML_fabpLT1; ML_fabpLT2 <- ML_fabpLT2; ML_fabpLT3 <- ML_fabpLT3; MalbGF <- MalbGF; MalbMF <- MalbMF; MalbAF <- MalbAF; MalbRF <- MalbRF
return(c('MBf'=MBf, 'MBb'=MBb, 'MKFf'=MKFf, 'MKFb'=MKFb,'MLFf'=MLFf, 'MLFb'=MLFb, 'MGFf'=MGFf, 'MGFb'=MGFb, 'MMFf'=MMFf, 'MMFb'=MMFb, 'MAFf'=MAFf, 'MAFb'=MAFb,
'MRFf'=MRFf, 'MRFb'=MRFb, 'MATf'=MATf, 'MMTf'=MMTf, 'MRTf'=MRTf, 'MKTf'=MKTf, 'MKTb1'=MKTb1, 'MKTb2'=MKTb2, 'MKTb3'=MKTb3, 'MKTa2b'=MKTa2b, 'MFilf'=MFilf, 'Murine'=Murine,
'MLTf'=MLTf, 'MLTb1'=MLTb1, 'MLTb2'=MLTb2, 'MLTb3'=MLTb3, 'Mbilef'=Mbilef, #'Mbile'=Mbile,
'MGTf'=MGTf, 'MGLf'=MGLf, 'Mfeces'=Mfeces, 'MalbB'=MalbB, 'MalbKF'=MalbKF, 'ML_fabpKT1'=ML_fabpKT1,
'ML_fabpKT2'=ML_fabpKT2, 'ML_fabpKT3'=ML_fabpKT3, 'MK_fabpKT'=MK_fabpKT, 'MalbLF'=MalbLF, 'ML_fabpLT1'=ML_fabpLT1,
'ML_fabpLT2'=ML_fabpLT2, 'ML_fabpLT3'=ML_fabpLT3, 'MalbGF'=MalbGF, 'MalbMF'=MalbMF, 'MalbAF'=MalbAF, 'MalbRF'=MalbRF
))
})
}
################################################################################
BW <- 0.244  # body weight (kg)
admin.dose <- c(1e-6) # administered dose in kg PFOA/kg BW
admin.time <- c(0) # time when doses are administered, in days
user_input <- list('BW'=BW,
"admin.dose"=admin.dose)
params <- create.params(user_input)
inits <- create.inits(params)
# 1 mg/kg IV
sample_time=seq(0,20,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params,
method="lsodes",rtol = 1e-05, atol = 1e-05))
rowSums(solution[,2:33])
compartment <- c('MBf')
color_codes <- scales::hue_pal()(length(compartments))
compartment <- c('MBf')
color_codes <- scales::hue_pal()(length(compartment))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = MBf, color='MBf'), size=1.3)+
labs(title = 'Predicted values',
y = 'Concentration (ug/g)' , x = "Time (days)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartment", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
library(deSolve) # Imports ODE Solvers
library(ggplot2) # Creating plots
# check the working directory
getwd()
# Change the working directory
# add whatever working directory you want
wd = '/Users/dpjio/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/R_examples'
setwd(wd)
getwd()
#-----------------------------------------------#
# Custom functions for the solution of the ODEs #
#-----------------------------------------------#
# create.params() returns a list with all user defined parameters
create.params <- function(user_input){
with(as.list(user_input),{
k12 = k12_value
k21 = k21_value
ke = 0.3
return(list('k12' = k12, 'k21' = k21, 'ke'=ke,
'Mx_initial'=Mx_initial, 'My_initial'=My_initial,
'IV_intakes'=IV_intakes, 'IV_times'=IV_times))
})
}
# ode.func() is a function with ODEs of the model
ode.func <- function(time, inits, params){
with(as.list(c(inits, params)),{
dMx = k21 * My - k12 * Mx - ke * Mx
dMy = - k21 * My + k12 * Mx
dM_eliminated = ke * Mx
# Important: The derivatives must be returned with the same row
# that they are reported
return(list(c('dMx'=dMx, 'dMy'=dMy, 'dM_eliminated'=dM_eliminated)))
})
}
# create.inits() returns a vector with the initial conditions
# provided to the ODEs
create.inits <- function(parameters){
with(as.list(parameters),{
Mx <- Mx_initial
My <- My_initial
M_eliminated = 0
return(c('Mx'= Mx, 'My' = My, 'M_eliminated' = M_eliminated))
})
}
# create.events() returns a dataframe with the dosing plan
create.events <- function(parameters){
with(as.list(parameters),{
IV_intakes <- IV_intakes
IV_times <- IV_times
IV_ltimes <- length(IV_times)
events <- data.frame(var = c(rep('Mx', IV_ltimes)),
time = c(IV_times),
value = c(IV_intakes),
method = rep('add',IV_ltimes))
#events <- events[order(events$time),]
return(list(data=events))
})
}
#------------#
# User Input #
#------------#
user_input <- list('k12_value'=0.5,
'k21_value'=0.2,
'Mx_initial'= 1,
'My_initial'= 0.1,
'IV_intakes'=c(1, 1),
'IV_times'=c(5, 7.5))
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.01)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params,
#events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# Check the mass balance: the sum of each row of the solution dataframe should be
# equal to the sum of initial amounts.
#rowSums(solution[ ,-1])
# Basic Plot of Mx vs time
# plot(x = solution$time, y = solution$Mx)
# Plot with ggplot2
compartments <- c('Mx', 'My', 'M_eliminated')
color_codes <- scales::hue_pal()(length(compartments))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = Mx, color='Mx'), size=1.3)+
geom_line( aes(x = time, y = My, color='My'), size=1.3)+
geom_line( aes(x = time, y = M_eliminated, color='M_eliminated'), size=1.3)+
labs(title = 'Predicted values',
y = 'Mass (ug)' , x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartments", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
View(plot)
compartments <- c('Mx', 'My', 'M_eliminated')
color_codes <- scales::hue_pal()(length(compartments))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = Mx, color='Mx'), size=1.3)+
geom_line( aes(x = time, y = My, color='My'), size=1.3)+
geom_line( aes(x = time, y = M_eliminated, color='M_eliminated'), size=1.3)+
labs(title = 'Predicted values',
y = 'Mass (ug)' , x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartments", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = Mx, color='Mx'), size=1.3)+
geom_line( aes(x = time, y = My, color='My'), size=1.3)+
geom_line( aes(x = time, y = M_eliminated, color='M_eliminated'), size=1.3)+
labs(title = 'Predicted values',
y = 'Mass (ug)' , x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartments", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
compartment <- c('MBf')
color_codes <- scales::hue_pal()(length(compartment))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = MBf, color='MBf'), size=1.3)+
labs(title = 'Predicted values',
y = 'Concentration (ug/g)' , x = "Time (days)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartment", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
library(deSolve) # Imports ODE Solvers
library(ggplot2) # Creating plots
# check the working directory
getwd()
# Change the working directory
# add whatever working directory you want
wd = '/Users/dpjio/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/R_examples'
setwd(wd)
getwd()
#-----------------------------------------------#
# Custom functions for the solution of the ODEs #
#-----------------------------------------------#
# create.params() returns a list with all user defined parameters
create.params <- function(user_input){
with(as.list(user_input),{
k12 = k12_value
k21 = k21_value
ke = 0.3
return(list('k12' = k12, 'k21' = k21, 'ke'=ke,
'Mx_initial'=Mx_initial, 'My_initial'=My_initial,
'IV_intakes'=IV_intakes, 'IV_times'=IV_times))
})
}
# ode.func() is a function with ODEs of the model
ode.func <- function(time, inits, params){
with(as.list(c(inits, params)),{
dMx = k21 * My - k12 * Mx - ke * Mx
dMy = - k21 * My + k12 * Mx
dM_eliminated = ke * Mx
# Important: The derivatives must be returned with the same row
# that they are reported
return(list(c('dMx'=dMx, 'dMy'=dMy, 'dM_eliminated'=dM_eliminated)))
})
}
# create.inits() returns a vector with the initial conditions
# provided to the ODEs
create.inits <- function(parameters){
with(as.list(parameters),{
Mx <- Mx_initial
My <- My_initial
M_eliminated = 0
return(c('Mx'= Mx, 'My' = My, 'M_eliminated' = M_eliminated))
})
}
# create.events() returns a dataframe with the dosing plan
create.events <- function(parameters){
with(as.list(parameters),{
IV_intakes <- IV_intakes
IV_times <- IV_times
IV_ltimes <- length(IV_times)
events <- data.frame(var = c(rep('Mx', IV_ltimes)),
time = c(IV_times),
value = c(IV_intakes),
method = rep('add',IV_ltimes))
#events <- events[order(events$time),]
return(list(data=events))
})
}
#------------#
# User Input #
#------------#
user_input <- list('k12_value'=0.5,
'k21_value'=0.2,
'Mx_initial'= 1,
'My_initial'= 0.1,
'IV_intakes'=c(1, 1),
'IV_times'=c(5, 7.5))
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.01)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params,
#events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# Check the mass balance: the sum of each row of the solution dataframe should be
# equal to the sum of initial amounts.
#rowSums(solution[ ,-1])
# Basic Plot of Mx vs time
# plot(x = solution$time, y = solution$Mx)
# Plot with ggplot2
compartments <- c('Mx', 'My', 'M_eliminated')
color_codes <- scales::hue_pal()(length(compartments))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = Mx, color='Mx'), size=1.3)+
geom_line( aes(x = time, y = My, color='My'), size=1.3)+
geom_line( aes(x = time, y = M_eliminated, color='M_eliminated'), size=1.3)+
labs(title = 'Predicted values',
y = 'Mass (ug)' , x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartments", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
compartments <- c('Mx', 'My', 'M_eliminated')
color_codes <- scales::hue_pal()(length(compartments))
plot <- ggplot2 (data = solution)+
geom_line( aes(x = time, y = Mx, color='Mx'), size=1.3)+
geom_line( aes(x = time, y = My, color='My'), size=1.3)+
geom_line( aes(x = time, y = M_eliminated, color='M_eliminated'), size=1.3)+
labs(title = 'Predicted values',
y = 'Mass (ug)' , x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartments", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
compartments <- c('Mx', 'My', 'M_eliminated')
color_codes <- scales::hue_pal()(length(compartments))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = Mx, color='Mx'), size=1.3)+
geom_line( aes(x = time, y = My, color='My'), size=1.3)+
geom_line( aes(x = time, y = M_eliminated, color='M_eliminated'), size=1.3)+
labs(title = 'Predicted values',
y = 'Mass (ug)' , x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartments", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
library(deSolve) # Imports ODE Solvers
library(ggplot2) # Creating plots
# check the working directory
getwd()
# Change the working directory
# add whatever working directory you want
wd = '/Users/dpjio/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/R_examples'
setwd(wd)
getwd()
#-----------------------------------------------#
# Custom functions for the solution of the ODEs #
#-----------------------------------------------#
# create.params() returns a list with all user defined parameters
create.params <- function(user_input){
with(as.list(user_input),{
k12 = k12_value
k21 = k21_value
ke = 0.3
return(list('k12' = k12, 'k21' = k21, 'ke'=ke,
'Mx_initial'=Mx_initial, 'My_initial'=My_initial,
'IV_intakes'=IV_intakes, 'IV_times'=IV_times))
})
}
# ode.func() is a function with ODEs of the model
ode.func <- function(time, inits, params){
with(as.list(c(inits, params)),{
dMx = k21 * My - k12 * Mx - ke * Mx
dMy = - k21 * My + k12 * Mx
dM_eliminated = ke * Mx
# Important: The derivatives must be returned with the same row
# that they are reported
return(list(c('dMx'=dMx, 'dMy'=dMy, 'dM_eliminated'=dM_eliminated)))
})
}
# create.inits() returns a vector with the initial conditions
# provided to the ODEs
create.inits <- function(parameters){
with(as.list(parameters),{
Mx <- Mx_initial
My <- My_initial
M_eliminated = 0
return(c('Mx'= Mx, 'My' = My, 'M_eliminated' = M_eliminated))
})
}
# create.events() returns a dataframe with the dosing plan
create.events <- function(parameters){
with(as.list(parameters),{
IV_intakes <- IV_intakes
IV_times <- IV_times
IV_ltimes <- length(IV_times)
events <- data.frame(var = c(rep('Mx', IV_ltimes)),
time = c(IV_times),
value = c(IV_intakes),
method = rep('add',IV_ltimes))
#events <- events[order(events$time),]
return(list(data=events))
})
}
#------------#
# User Input #
#------------#
user_input <- list('k12_value'=0.5,
'k21_value'=0.2,
'Mx_initial'= 1,
'My_initial'= 0.1,
'IV_intakes'=c(1, 1),
'IV_times'=c(5, 7.5))
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,10,0.01)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = params,
#events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
# Check the mass balance: the sum of each row of the solution dataframe should be
# equal to the sum of initial amounts.
#rowSums(solution[ ,-1])
# Basic Plot of Mx vs time
# plot(x = solution$time, y = solution$Mx)
# Plot with ggplot2
compartments <- c('Mx', 'My', 'M_eliminated')
color_codes <- scales::hue_pal()(length(compartments))
plot <- ggplot(data = solution)+
geom_line( aes(x = time, y = Mx, color='Mx'), size=1.3)+
geom_line( aes(x = time, y = My, color='My'), size=1.3)+
geom_line( aes(x = time, y = M_eliminated, color='M_eliminated'), size=1.3)+
labs(title = 'Predicted values',
y = 'Mass (ug)' , x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22),
panel.border = element_rect(colour = "black", fill=NA, size=1.0)) +
scale_color_manual("Compartments", values=color_codes)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
View(plot)
