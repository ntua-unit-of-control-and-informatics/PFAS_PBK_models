CSPF = MSPF/VSPF  #interstitial fluid concentration
CSPT = MSPT/VSPT # tissue concentration
#Heart
CHB = MBH/VHB # blood concentration
CHF = MHF/VHF  #interstitial fluid concentration
CHT = MHT/VHT # tissue concentration
#Brain
CBrB = MBBr/VBrB # blood concentration
CBrF = MBrF/VBrF  #interstitial fluid concentration
CBrT = MBrT/VBrT # tissue concentration
#Testis
CTB = MBT/VTB # blood concentration
CTF = MTF/VTF  #interstitial fluid concentration
CTT = MTT/VTT # tissue concentration
# #Skin
# CSKB = MBSK/VSKB # blood concentration
# CSKF = MSKF/VSKF  #interstitial fluid concentration
# CSKT = MSKT/VSKT # tissue concentration
#Cfree calculation using the expression of free fraction ff
CBfart = CBart * 1.0 / (1.0 + CalbB * Ka)
CBfven= CBven * 1.0 / (1.0 + CalbB * Ka)
CLNf = CLN * 1.0 / (1.0 + CalbB * Ka)  # find albumin concentration in Lymph Nodes
#Calculation of free concentrations in organ blood
CKBf = CKB * 1.0 / (1.0 + CalbB * Ka)
CLBf = CLB * 1.0 / (1.0 + CalbB * Ka)
CSTBf = CSTB * 1.0 / (1.0 + CalbB * Ka)
CINBf = CINB * 1.0 / (1.0 + CalbB * Ka)
CMBf = CMB * 1.0 / (1.0 + CalbB * Ka)
CABf = CAB * 1.0 / (1.0 + CalbB * Ka)
CRBf = CRB * 1.0 / (1.0 + CalbB * Ka)
CLuBf = CLuB * 1.0 / (1.0 + CalbB * Ka)
CSPBf = CSPB * 1.0 / (1.0 + CalbB * Ka)
CHBf = CHB * 1.0 / (1.0 + CalbB * Ka)
CBrBf = CBrB * 1.0 / (1.0 + CalbB * Ka)
CTBf = CTB * 1.0 / (1.0 + CalbB * Ka)
#CSKBf = CSKB * 1.0 / (1.0 + CalbB * Ka)
#Calculation of free concentrations in organ interstitial fluid
CKFf = CKF * 1.0 / (1.0 + CalbKF * Ka)
CLFf = CLF * 1.0 / (1.0 + CalbLF * Ka)
#CGFf = CGF * 1.0 / (1.0 + CalbGF * Ka)
CSTFf = CSTF * 1.0 / (1.0 + CalbSTF * Ka)
CINFf = CINF * 1.0 / (1.0 + CalbINF * Ka)
CMFf = CMF * 1.0 / (1.0 + CalbMF * Ka)
CAFf = CAF * 1.0 / (1.0 + CalbAF * Ka)
CRFf = CRF * 1.0 / (1.0 + CalbRF * Ka)
CLuFf = CLuF * 1.0 / (1.0 + CalbLuF * Ka)
CSPFf = CSPF * 1.0 / (1.0 + CalbSPF * Ka)
CHFf = CHF * 1.0 / (1.0 + CalbHF * Ka)
CBrFf = CBrF * 1.0 / (1.0 + CalbBrF * Ka)
CTFf = CTF * 1.0 / (1.0 + CalbTF * Ka)
#CSKFf = CSKF * 1.0 / (1.0 + CalbSKF * Ka)
#Calculation of free concentrations in organ where we have tissue binding
CKTf = CKT * 1.0 / (1.0 + Ca2uKT * Ka2u + CLfabpKT * KLfabp)
CLTf = CLT * 1.0 / (1.0 + CLfabpLT * KLfabp)
QBLtot = QBL + (QBSP-QBSP/500) + (QBIN-QBIN/500) + (QBST-QBST/500)
#Arterial Blood
# dMBart = (QBLu-QBLu/500)*CLuBf - CBfart*(QBK+QBL+QBM+QBA+QBR+QBSP+QBH+QBBr+QBST+
#                                             QBIN+QBT+QBSK)-QGFR*CBfart
dMBart = (QBLu-QBLu/500)*CLuBf - CBfart*(QBK+QBL+QBM+QBA+QBR+QBSP+QBH+QBBr+QBST+
QBIN+QBT)-QGFR*CBfart
#Venous Blood
# dMBven = - CBfven *QBLu +  CLNf*(QBK/500+QBLtot/500+QBM/500+QBA/500+QBR/500+QBLu/500+
#                                  QBH/500+QBBr/500+QBT/500+QBSK/500)+
#                                 (QBK-QBK/500)*CKBf +(QBLtot-QBLtot/500)*CLBf +
#                                 (QBM-QBM/500)*CMBf + (QBA/500)*CABf + (QBR-QBR/500)*CRBf+
#                                 (QBH-QBH/500)*CHBf + (QBBr-QBBr/500)*CBrBf+
#                                 (QBT-QBT/500)*CTBf + (QBSK-QBSK/500)*CSKBf
dMBven = - CBfven *QBLu +  CLNf*(QBK/500+QBLtot/500+QBM/500+QBA/500+QBR/500+QBLu/500+
QBH/500+QBBr/500+QBT/500)+
(QBK-QBK/500)*CKBf +(QBLtot-QBLtot/500)*CLBf +
(QBM-QBM/500)*CMBf + (QBA/500)*CABf + (QBR-QBR/500)*CRBf+
(QBH-QBH/500)*CHBf + (QBBr-QBBr/500)*CBrBf+
(QBT-QBT/500)*CTBf
#Lymph nodes
# dMLN = CKFf*QBK/500 + CLFf*QBLtot/500 + CMFf*QBM/500 + CAFf*QBA/500+
#        CRFf*QBR/500 + CLuFf*QBLu/500 + CHFf*QBH/500 + CBrFf*QBBr/500+
#        CTFf*QBT/500 + CSKFf*QBSK/500 + CSTFf*QBST/500 + CINFf*QBIN/500 + CSPFf*QBSP/500-
#        CLNf*(QBK/500+QBLtot/500+QBM/500+QBA/500+QBR/500+QBLu/500+QBH/500+QBBr/500+QBT/500+QBSK/500)
dMLN = CKFf*QBK/500 + CLFf*QBLtot/500 + CMFf*QBM/500 + CAFf*QBA/500+
CRFf*QBR/500 + CLuFf*QBLu/500 + CHFf*QBH/500 + CBrFf*QBBr/500+
CTFf*QBT/500 + CSTFf*QBST/500 + CINFf*QBIN/500 + CSPFf*QBSP/500-
CLNf*(QBK/500+QBLtot/500+QBM/500+QBA/500+QBR/500+QBLu/500+QBH/500+QBBr/500+QBT/500)
#Kidney
#blood subcompartment
dMBK = QBK*CBfart - (QBK-QBK/500)*CKBf - PeffK*AK*(CKBf-CKFf) - CKBf*QBK/500
#interstitial fluid subcompartment
dMKF = CKBf*QBK/500 - CKFf*QBK/500 + PeffK*AK*(CKBf-CKFf) - kKFKT*(CKFf-CKTf) -
(VmK_Oat1*CKFf/KmK_Oat1+CKFf)*VKF - (VmK_Oat3*CKFf/KmK_Oat3+CKFf)*VKF #+ (VmK_Osta*CKTf/KmK_Osta+CKTf)
#Kidney proximal tubule cells subcompartment
dMKT = kKFKT*(CKFf-CKTf) - kFKT*(CKTf - CFil) + (VmK_Oatp*CFil/KmK_Oatp+CFil)*VFil +
(VmK_Oat1*CKFf/KmK_Oat1+CKFf)*VKF + (VmK_Oat3*CKFf/KmK_Oat3+CKFf)*VKF # + (VmK_Osta*CKTf/KmK_Osta+CKTf)
dMFil =  QGFR*CBfart+ kFKT*(CKTf - CFil) - (VmK_Oatp*CFil/KmK_Oatp+CFil)*VFil - (Qurine/VFil)*CFil
dMurine = (Qurine/VFil)*CFil
#Liver
#blood subcompartment
dMBL = QBL*CBfart + (QBSP-QBSP/500)*CSPBf + (QBIN-QBIN/500)*CINBf + (QBST-QBST/500)*CSTBf- PeffL*AL*(CLBf-CLFf) - CLBf*QBLtot/500 - (QBLtot-QBLtot/500)*CLBf
#interstitial fluid subcompartment
dMLF = CLBf*QBLtot/500 - CLFf*QBLtot/500 + PeffL*AL*(CLBf-CLFf) - kLFLT*(CLFf-CLTf) -
(VmL_Oatp*CLFf/KmL_Oatp+CLFf)*VLF - (VmL_Ntcp*CLFf/KmL_Ntcp+CLFf)*VLF
#Liver tissue subcompartment
dMLT = kLFLT*(CLFf-CLTf) + (VmL_Oatp*CLFf/KmL_Oatp+CLFf)*VLF +
(VmL_Ntcp*CLFf/KmL_Ntcp+CLFf)*VLF - kbileLT*(CLTf-Cbile)
dMbile = kbileLT*(CLTf-Cbile) - (Qbile/Vbile)*Cbile
# Feces
dMfeces = (Qfeces/VINL)*CINL
#Stomach
#blood subcompartment
dMBST = QBST*CBfart - QBST*CSTBf - PeffST*AST*(CSTBf-CSTFf) - CSTBf*QBST/500
#interstitial fluid subcompartment
dMSTF = CSTBf*QBST/500 - CSTFf*QBST/500 + PeffST*AST*(CSTBf-CSTFf) - kSTFSTT*(CSTFf-CSTT)
#Stomach tissue subcompartment
dMSTT = kSTFSTT*(CSTFf-CSTT) + kabST*CSTL
#Stomach lumen
dMSTL = -kabST*CSTL - QGE*CSTL
#Intestine
#blood subcompartment
dMBIN = QBIN*CBfart - QBIN*CINBf - PeffIN*AIN*(CINBf-CINFf) - CINBf*QBIN/500
#interstitial fluid subcompartment
dMINF = CINBf*QBIN/500 - CINFf*QBIN/500 + PeffIN*AIN*(CINBf-CINFf) - kINFINT*(CINFf-CINT)
#Intestine tissue subcompartment
dMINT = kINFINT*(CINFf-CINT) + kabIN*CINL
#Intestine lumen
dMINL = QGE*CSTL - (Qfeces/VINL)*CINL - kabIN*CINL
#Muscle
#blood subcompartment
dMBM = QBM*CBfart - (QBM-QBM/500)*CMBf - PeffM*AM*(CMBf-CMFf) - CMBf*QBM/500
#interstitial fluid subcompartment
dMMF = CMBf*QBM/500 - CMFf*QBM/500 +PeffM*AM*(CMBf-CMFf) - kMFMT*(CMFf- CMT)
#Muscle tissue subcompartment
dMMT = kMFMT*(CMFf- CMT)
#Adipose
#blood subcompartment
dMBA = QBA*CBfart - (QBA/500)*CABf - PeffA*AA*(CABf-CAFf) - CABf*QBA/500
#interstitial fluid subcompartment
dMAF = CABf*QBA/500 - CAFf*QBA/500 +  PeffA*AA*(CABf-CAFf) - kAFAT*(CAFf-CAT)
#Adipose tissue subcompartment
dMAT =  kAFAT*(CAFf-CAT)
#Rest of body
#blood subcompartment
dMBR = QBR*CBfart - (QBR-QBR/500)*CRBf - PeffR*AR*(CRBf-CRFf) - CRBf*QBR/500
#interstitial fluid subcompartment
dMRF = CRBf*QBR/500 - CRFf*QBR/500 + PeffR*AR*(CRBf-CRFf) - kRFRT*(CRFf -CRT)
#Rest of body tissue subcompartment
dMRT = kRFRT*(CRFf -CRT)
#Lung
#blood subcompartment
dMBLu = CBfven *QBLu - (QBLu-QBLu/500)*CLuBf - PeffLu*ALu*(CLuBf-CLuFf) - CLuBf*QBLu/500
#interstitial fluid subcompartment
dMLuF = CLuBf*QBLu/500 - CLuFf*QBLu/500 + PeffLu*ALu*(CLuBf-CLuFf) - kLuFLuT*(CLuFf-CLuT)
#Lung tissue
dMLuT =  kLuFLuT*(CLuFf-CLuT) #- kLuTLuAF * (CLuAF-CLuT)
#Alveolar lining fluid
dMLuAF = 0 #kLuTLuAF * (CLuAF-CLuT) - Qp * CLuAF/PLungA + IVR*Cair*Cpfoa*dfalveolar
#Spleen
#blood subcompartment
dMBSP = QBSP*CBfart - QBSP*CSPBf - PeffSP*ASP*(CSPBf-CSPFf) - CSPBf*QBSP/500
#interstitial fluid subcompartment
dMSPF = CSPBf*QBSP/500 - CSPFf*QBSP/500 + PeffSP*ASP*(CSPBf-CSPFf) - kSPFSPT*(CSPFf -CSPT)
#Spleen tissue subcompartment
dMSPT = kSPFSPT*(CSPFf -CSPT)
#Heart
#blood subcompartment
dMBH = QBH*CBfart - (QBH-QBH/500)*CRBf - PeffH*AH*(CHBf-CHFf) - CHBf*QBH/500
#interstitial fluid subcompartment
dMHF = CHBf*QBH/500 - CHFf*QBH/500 + PeffH*AH*(CHBf-CHFf) - kHFHT*(CHFf -CHT)
#Spleen tissue subcompartment
dMHT = kHFHT*(CHFf -CHT)
#Brain
#blood subcompartment
dMBBr = QBBr*CBfart - (QBBr-QBBr/500)*CRBf - PeffBr*ABr*(CBrBf-CBrFf) - CBrBf*QBBr/500
#interstitial fluid subcompartment
dMBrF = CBrBf*QBBr/500 - CBrFf*QBBr/500 + PeffBr*ABr*(CBrBf-CBrFf) - kBrFBrT*(CBrFf -CBrT)
#Brain tissue subcompartment
dMBrT = kBrFBrT*(CBrFf -CBrT)
#Testis
#blood subcompartment
dMBT = QBT*CBfart - (QBT-QBT/500)*CRBf - PeffT*AT*(CTBf-CTFf) - CTBf*QBT/500
#interstitial fluid subcompartment
dMTF = CTBf*QBT/500 - CTFf*QBT/500 + PeffT*AT*(CTBf-CTFf) - kTFTT*(CTFf -CTT)
#Testis tissue subcompartment
dMTT = kTFTT*(CTFf -CTT)
#Skin
# #blood subcompartment
# dMBSK = QBSK*CBfart - (QBSK-QBSK/500)*CRBf - PeffSK*ASK*(CSKBf-CSKFf) - CSKBf*QBSK/500
# #interstitial fluid subcompartment
# dMSKF = CSKBf*QBSK/500 - CSKFf*QBSK/500 + PeffSK*ASK*(CSKBf-CSKFf) - kSKFSKT*(CSKFf -CSKT)
# #Skin tissue subcompartment
# dMSKT = kSKFSKT*(CSKFf -CSKT)
Cven <- CBven
Cart <- CBart
Cblood <- (MBven  + MBart)/ VB
Ckidney <- (MBK + MKF+ MKT)/(VKB+VKF+VKT)
Cliver <- (MBL + MLF+ MLT)/(VLB+VLF+VKT)
Cstomach <-  (MBST + MSTF+ MSTT)/(VSTB+VSTF+VSTT)
Cintestine <-  (MBIN + MINF+ MINT+MINL)/(VINB+VINF+VINT+VINL)
Cmuscle <-  (MBM + MMF+ MMT)/(VMB+VMF+VMT)
Cadipose <-  (MBA + MAF+ MAT)/(VAB+VAF+VAT)
Clungs <-  (MBLu + MLuF+ MLuT)/VLu
Crest <-  (MBR + MRF+ MRT)/(VRB+VRF+VRT)
Ccarcass <- (MBM + MMF+ MMT+MBA + MAF+ MAT +MBR + MRF+ MRT)/(VM+VA+VR)
Cfeces <- CINL
Cbile <- Cbile
Curine <- CFil
Cspleen <-  (MBSP + MSPF+ MSPT)/(VSPB+VSPF+VSPT)
Cheart <-  (MBH + MHF+ MHT)/(VHB+VHF+VHT)
Cbrain <-  (MBBr + MBrF+ MBrT)/(VBrB+VBrF+VBrT)
Ctestis <-  (MBT + MTF+ MTT)/(VTB+VTF+VTT)
#Cskin <-  (MBSK + MSKF+ MSKT)/(VSKB+VSKF+VSKT)
list(c( 'dMBart'=dMBart, 'dMBven'=dMBven, 'dMLN'=dMLN, 'dMBK'=dMBK,
'dMKF'=dMKF, 'dMKT'=dMKT,
'dMFil'=dMFil, 'dMurine'=dMurine, 'dMBL'=dMBL,
'dMLF'=dMLF, 'dMLT'=dMLT, 'dMbile'=dMbile,
'dMSTL'=dMSTL,'dMINL'=dMINL,'dMfeces'=dMfeces,
'dMBST'=dMBST, 'dMSTF'=dMSTF, 'dMSTT'=dMSTT,
'dMBIN'=dMBIN, 'dMINF'=dMINF, 'dMINT'=dMINT,
'dMBM'=dMBM, 'dMMF'=dMMF, 'dMMT'=dMMT,
'dMBA'=dMBA, 'dMAF'=dMAF,
'dMAT'=dMAT, 'dMBR'=dMBR, 'dMRF'=dMRF,'dMRT'=dMRT,
'dMBLu'=dMBLu, 'dMLuF'=dMLuF,'dMLuT'=dMLuT,'dMLuAF' = dMLuAF,
'dMBSP'=dMBSP, 'dMSPF'=dMSPF, 'dMSPT'=dMSPT,
'dMBH'=dMBH, 'dMHF'=dMHF, 'dMHT'=dMHT,
'dMBBr'=dMBBr, 'dMBrF'=dMBrF, 'dMBrT'=dMBrT,
'dMBT'=dMBT, 'dMTF'=dMTF, 'dMTT'=dMTT
#'dMBSK'=dMBSK, 'dMSKF'=dMSKF, 'dMSKT'=dMSKT
),
'CKFf'=CKFf, 'CLNf'=CLNf, 'CLFf'=CLFf,
'CMFf'=CMFf,'CAFf'=CAFf, 'CRFf'=CRFf, 'CBfart'=CBfart,
'CKBf'=CKBf, 'CLBf'=CLBf, 'CMBf'=CMBf, 'CABf'=CABf,
'CRBf'=CRBf, 'CFil'=CFil, 'Cbile'=Cbile,
'Cfeces'=Cfeces, 'CKTf'=CKTf, 'CLTf'=CLTf,
'CSTL'=CSTL,'CINL'=CINL,
'CMT'=CMT, 'CAT'=CAT, 'CRT'=CRT,
'Cven'=Cven, 'Cart' = Cart,'Cblood' = Cblood,
'Ckidney'=Ckidney, 'Cliver'=Cliver,
'Cstomach'=Cstomach, 'Cintestine'=Cintestine,
'Cmuscle'=Cmuscle, 'Cadipose'=Cadipose,
'Clungs' = Clungs, 'Crest'=Crest,'Ccarcass' = Ccarcass,
'Cfeces'=Cfeces, 'Cbile'=Cbile, 'Curine'=Curine,
'Cspleen'=Cspleen, 'Cheart'=Cheart, 'Cbrain'=Cbrain,
'Ctestis'=Ctestis #'Cskin'=Cskin
)
})
}
#Initial condition for each compartment.
create.inits <- function(parameters){
with(as.list(parameters),{
MBart <- 0; MBven <-0;  MLN <-0; MBK <-0; MKF <-0; MKT <-0; MFil <-0; Murine <-0; MBL <-0
MLF <-0; MLT <-0; Mbile <-0;
MSTL <-0;  MINL <-0;
Mfeces <-0; MBST <-0; MSTF <-0; MSTT <-0; MBIN <-0; MINF <-0; MINT <-0;
MBM <-0; MMF <-0; MMT <-0; MBA <-0; MAF <-0
MAT <-0; MBR <-0; MRF <-0; MRT <-0; MLuAF<- 0;MBLu <- 0; MLuF <- 0;MLuT <- 0;
MBSP <-0; MSPF <-0; MSPT <-0; MBH <-0; MHF <-0; MHT <-0;
MBBr <-0; MBrF <-0; MBrT <-0; MBT <-0; MTF <-0; MTT <-0
#MBSK <-0; MSKF <-0; MSKT <-0;
return(c('MBart'=MBart, 'MBven'=MBven, 'MLN'=MLN, 'MBK'=MBK, 'MKF'=MKF, 'MKT'=MKT,
'MFil'=MFil, 'Murine'=Murine, 'MBL'=MBL, 'MLF'=MLF, 'MLT'=MLT, 'Mbile'=Mbile,
'MSTL'=MSTL, 'MINL'=MINL, 'Mfeces'=Mfeces,
'MBST'=MBST, 'MSTF'=MSTF, 'MSTT'=MSTT,
'MBIN'=MBIN, 'MINF'=MINF, 'MINT'=MINT,
'MBM'=MBM, 'MMF'=MMF, 'MMT'=MMT,
'MBA'=MBA, 'MAF'=MAF, 'MAT'=MAT,
'MBR'=MBR, 'MRF'=MRF, 'MRT'=MRT,
'MBLu'=MBLu, 'MLuF'=MLuF,'MLuT'=MLuT, 'MLuAF' = MLuAF,
'MBSP'=MBSP, 'MSPF'=MSPF, 'MSPT'=MSPT,
'MBH'=MBH, 'MHF'=MHF, 'MHT'=MHT,
'MBBr'=MBBr, 'MBrF'=MBrF, 'MBrT'=MBrT,
'MBT'=MBT, 'MTF'=MTF, 'MTT'=MTT
#'MBSK'=MBSK, 'MSKF'=MSKF, 'MSKT'=MSKT
))
})
}
create.events <- function(parameters){
with(as.list(parameters), {
# Calculate number of administrated doses and corresponding administration time
ldose <- length(admin.dose)
ltimes <- length(admin.time)
# If not equal, then stop
if (ltimes != ldose){
stop("The times of administration should be equal in number to the doses")
}else{
if (admin.type == "iv"){
events <- list(data = rbind(data.frame(var = c("MBven"),  time = admin.time,
value = admin.dose, method = c("add")) ))
}else if (admin.type == "oral"){
events <- list(data = rbind(data.frame(var = c("MSTL"),  time = admin.time,
value = admin.dose, method = c("add")) ))
}
}
return(events)
})
}
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#  average fold error
AFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N <- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- (log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#############################
#--------------------------
# Objective function
#-------------------------
obj.func <- function(x, dataset){
# x: a vector with the values of the optimized parameters (it is not the x
# from the odes!!!)
##########################
#-------------------------
# Kudo high
#-------------------------
##########################
# Set up simulations for the first case, i.e. kudo (2007) high dose, tissues
BW <- 0.290  # body weight (kg)
admin.dose_per_g <- 16.56 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0.01#0.5/60 # time when doses are administered, in hours
admin.type <- "iv"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,2,0.01)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df1=========================================================
exp_data <- dataset$df1 # retrieve data of Kudo et al. 2007 high dose
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kudo_high <- solution[solution$time %in% unique(exp_data$time), c("Cblood",
"Cliver","Ckidney", "Ccarcass",
"Clungs", "Cspleen", "Cheart",
"Cbrain", "Ctestis", "Cstomach", "Cintestine")]
preds_kudo_high <- preds_kudo_high /1000 #convert ug/kg to ug/g
# Estimate gut concentration from stomach and intestines
V_stomach <- 0.0046*BW*1000
V_int <- 0.0124*BW*1000
C_stomach <- exp_data[exp_data$Tissue == "Stomach", "concentration"]
C_int <- exp_data[exp_data$Tissue == "Intestine", "concentration"]
#exp_gut <- (C_stomach*V_stomach+C_int*V_int)/(V_stomach+V_int)
obs_kudo_high <- c(exp_data[exp_data$Tissue == "Blood", "concentration"],
exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Carcass", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Spleen", "concentration"],
exp_data[exp_data$Tissue == "Heart", "concentration"],
exp_data[exp_data$Tissue == "Brain", "concentration"],
exp_data[exp_data$Tissue == "Testis", "concentration"],
exp_data[exp_data$Tissue == "Stomach", "concentration"],
exp_data[exp_data$Tissue == "Intestine", "concentration"])
##########################
#-------------------------
# Kudo low
#-------------------------
##########################
# Set up simulations for the first case, i.e. kudo (2007) high dose, tissues
BW <- 0.290  # body weight (kg)
admin.dose_per_g <- 0.041 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0.01#0.5/60 # time when doses are administered, in hours
admin.type <- "iv"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,2,0.01)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df1=========================================================
exp_data <- dataset$df2 # retrieve data of Kudo et al. 2007 high dose
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kudo_low <- solution[solution$time %in% unique(exp_data$time), c("Cblood",
"Cliver","Ckidney", "Ccarcass",
"Clungs", "Cspleen", "Cheart",
"Cbrain", "Ctestis", "Cstomach", "Cintestine")]
preds_kudo_low<- preds_kudo_low /1000 #convert ug/kg to ug/g
# Estimate gut concentration from stomach and intestines
V_stomach <- 0.0046*BW*1000
V_int <- 0.0124*BW*1000
C_stomach <- exp_data[exp_data$Tissue == "Stomach", "concentration"]
C_int <- exp_data[exp_data$Tissue == "Intestine", "concentration"]
exp_gut <- (C_stomach*V_stomach+C_int*V_int)/(V_stomach+V_int)
obs_kudo_low <- c(exp_data[exp_data$Tissue == "Blood", "concentration"],
exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Carcass", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Spleen", "concentration"],
exp_data[exp_data$Tissue == "Heart", "concentration"],
exp_data[exp_data$Tissue == "Brain", "concentration"],
exp_data[exp_data$Tissue == "Testis", "concentration"],
exp_data[exp_data$Tissue == "Stomach", "concentration"],
exp_data[exp_data$Tissue == "Intestine", "concentration"])
# Aggregate observations for all scenarios
preds <-c(preds_kudo_high, preds_kudo_low)
obs <- c(obs_kudo_high, obs_kudo_low)
score <- AAFE(predictions = preds, observations = obs)
return(score)
#=======================================df2=====================================================
}
################################################################################
setwd("C:/Users/dpjio/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat")
# Read data
kudo_high_dose <- openxlsx::read.xlsx("Data/IV_male_rats_tissues_high_kudo_2007.xlsx")
kudo_low_dose <- openxlsx::read.xlsx("Data/IV_male_rats_tissues_low_kudo_2007.xlsx")
dataset <- list("df1" = kudo_high_dose, "df2" = kudo_low_dose)
#Initialise optimiser to NULL for better error handling later
opts <- list( "algorithm" = "NLOPT_LN_SBPLX",#"NLOPT_LN_NEWUOA","NLOPT_LN_SBPLX"
"xtol_rel" = 1e-07,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 500,
"print_level" = 1)
# Create initial conditions (zero initialisation)
N_pars <- 6# Number of parameters to be fitted
fit <- log(rep(1,N_pars))
# Run the optimization algorithmm to estimate the parameter values
optimizer <- nloptr::nloptr( x0= fit,
eval_f = obj.func,
lb	= rep(log(0.01), N_pars),
ub = rep(log(100), N_pars),
opts = opts,
dataset = dataset)
estimated_params <- exp(optimizer$solution)
# sample_time=seq(0,20*24,1)
# solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
#                                     y = inits, parms = params,events = events,
#                                     method="lsodes",rtol = 1e-05, atol = 1e-05))
#rowSums(solution[,c(2:18)])
# Set up simulations for the first case, i.e. kudo (2007) high dose, tissues
BW <- 0.290  # body weight (kg)
admin.dose_per_g <- 16.56 # administered dose in mg PFOA/kg BW
admin.dose <-admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0.01 #0.5/60 # time when doses are administered, in hours
admin.type <- "iv"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,2,0.01)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
preds_kudo_high <- solution[solution$time %in% unique(dataset$df1$Time_hours), c("Cblood",
"Cliver","Ckidney", "Ccarcass",
"Clungs", "Cspleen", "Cheart",
"Cbrain", "Ctestis", "Cstomach", "Cintestine"
)]
user_input$admin.dose <- 0.041*BW *1e03 #ug PFOA
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,2,0.01)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
preds_kudo_low <- solution[solution$time %in% unique(dataset$df2$Time_hours), c("Cblood",
"Cliver","Ckidney", "Ccarcass",
"Clungs", "Cspleen", "Cheart",
"Cbrain", "Ctestis", "Cstomach", "Cintestine"
)]
preds_kudo_high <- preds_kudo_high /1000 #convert ug/kg to ug/g
print("Kudo high: ")
print(preds_kudo_high)
preds_kudo_low <- preds_kudo_low /1000 #convert ug/kg to ug/g
print("Kudo low: ")
print(preds_kudo_low)
