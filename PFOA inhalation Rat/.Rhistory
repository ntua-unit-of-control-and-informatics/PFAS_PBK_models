#======================================df4=========================================================
exp_data <- dataset$df4 # retrieve data of kim (2016) ORAL male tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kim_OR_Mtissues <- solution[solution$time %in% unique(exp_data$time), c("Cliver","Ckidney",
"Clungs", "Cspleen", "Cheart" )]
preds_kim_OR_Mtissues<- preds_kim_OR_Mtissues /1000 #convert ug/kg to ug/g
obs_kim_OR_Mtissues <- c(exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Spleen", "concentration"],
exp_data[exp_data$Tissue == "Heart", "concentration"])
##########################
#-------------------------
# Kim IV female tissues
#-------------------------
##########################
# Set up simulations for the 5th case, i.e. kim (2016) IV female tissues
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "iv"
sex <- "F"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,288,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df5=========================================================
exp_data <- dataset$df5 # retrieve data of kim (2016) ORAL female tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kim_IV_Ftissues <- solution[solution$time %in% unique(exp_data$time), c("Cliver","Ckidney",
"Clungs", "Cspleen", "Cheart" )]
preds_kim_IV_Ftissues<- preds_kim_IV_Ftissues /1000 #convert ug/kg to ug/g
obs_kim_IV_Ftissues <- c(exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Spleen", "concentration"],
exp_data[exp_data$Tissue == "Heart", "concentration"])
##########################
#-------------------------
# Kim ORAL female tissues
#-------------------------
##########################
# Set up simulations for the 6th case, i.e. kim (2016) IV female tissues
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "F"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,288,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df6=========================================================
exp_data <- dataset$df6 # retrieve data of kim (2016) ORAL female tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kim_OR_Ftissues <- solution[solution$time %in% unique(exp_data$time), c("Cliver","Ckidney",
"Clungs", "Cspleen", "Cheart" )]
preds_kim_OR_Ftissues<- preds_kim_OR_Ftissues /1000 #convert ug/kg to ug/g
obs_kim_OR_Ftissues <- c(exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Spleen", "concentration"],
exp_data[exp_data$Tissue == "Heart", "concentration"])
##########################
#-------------------------
# Dzierlenga ORAL male tissues
#-------------------------
##########################
# Set up simulations for the 7th case, i.e. Dzierlenga (2021) ORAL male tissues
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 12 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "M"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,864,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df7=========================================================
exp_data <- dataset$df7 # retrieve data of Dzierlenga (2021) ORAL male tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cliver","Ckidney","Cbrain" )
preds_dzi_OR_Mtissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_dzi_OR_Mtissues[[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
preds_dzi_OR_Mtissues<- unlist(preds_dzi_OR_Mtissues) /1000 #convert ug/kg to ug/g
obs_dzi_OR_Mtissues <- c(exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Brain", "concentration"])
##########################
#-------------------------
# Dzierlenga ORAL female tissues
#-------------------------
##########################
# Set up simulations for the 8th case, i.e. Dzierlenga (2021) ORAL female tissues
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 80 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "F"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,24,0.1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df8=========================================================
exp_data <- dataset$df8 # retrieve data of Dzierlenga (2021) ORAL female tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cliver","Ckidney","Cbrain" )
preds_dzi_OR_Ftissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_dzi_OR_Ftissues[[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
preds_dzi_OR_Ftissues <- unlist(preds_dzi_OR_Ftissues) /1000 #convert ug/kg to ug/g
obs_dzi_OR_Ftissues <- c(exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Brain", "concentration"])
##########################
#-------------------------
# Kim ORAL male blood
#-------------------------
##########################
# Set up simulations for the 9th case, i.e. Kim (2016) ORAL male blood
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "M"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,288,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df9=========================================================
exp_data <- dataset$df9 # retrieve data of Kim (2016) ORAL male blood
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cblood")
preds_kim_OR_Mblood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_kim_OR_Mblood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
preds_kim_OR_Mblood <- unlist(preds_kim_OR_Mblood) /1000 #convert ug/kg to ug/g
obs_kim_OR_Mblood <- c(exp_data[exp_data$Tissue == "Blood", "concentration"])
##########################
#-------------------------
# Kim IV male blood
#-------------------------
##########################
# Set up simulations for the 10th case, i.e. Kim (2016) IV male blood
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "iv"
sex <- "M"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=c(0, 5/60, seq(1,288,1))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df10=========================================================
exp_data <- dataset$df10 # retrieve data of Kim (2016) IV male blood
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cblood")
preds_kim_IV_Mblood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_kim_IV_Mblood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
preds_kim_IV_Mblood <- unlist(preds_kim_IV_Mblood) /1000 #convert ug/kg to ug/g
obs_kim_IV_Mblood <- c(exp_data[exp_data$Tissue == "Blood", "concentration"])
##########################
#-------------------------
# Lupton ORAL female tissues
#-------------------------
##########################
# Set up simulations for the 11th case, i.e. Lupton (2020) ORAL female tissues
BW <- 0.1875  # body weight (kg) not reported
admin.dose_per_g <- 0.047 # administered dose in mg PFOA/kg BW
admin.dose_single <- (admin.dose_per_g*BW*1e03)/2 #ug PFOA
admin.time <- seq(0,13.5*24,12) #time when doses are administered, in hours
admin.dose <- rep(admin.dose_single, length(admin.time))
admin.type <- "oral"
sex <- "F"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,324,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df11=========================================================
exp_data <- dataset$df11 # retrieve data of Lupton (2020) ORAL female tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_Lup_OR_Ftissues <- solution[solution$time %in% unique(exp_data$time), c("Cliver","Ckidney",
"Cblood", "Cskin")]
preds_Lup_OR_Ftissues <- preds_Lup_OR_Ftissues /1000 #convert ug/kg to ug/g
obs_Lup_OR_Ftissues <- c(exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Blood", "concentration"],
exp_data[exp_data$Tissue == "Skin", "concentration"])
##########################
#-------------------------
# Lupton ORAL female feces
#-------------------------
##########################
# Set up simulations for the 12th case, i.e. Lupton (2020) ORAL female feces
BW <- 0.1875  # body weight (kg) not reported
admin.dose_per_g <- 0.047 # administered dose in mg PFOA/kg BW
admin.dose_single <- (admin.dose_per_g*BW*1e03)/2 #ug PFOA
admin.time <- seq(0,13.5*24,12) #time when doses are administered, in hours
admin.dose <- rep(admin.dose_single, length(admin.time))
admin.type <- "oral"
sex <- "F"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,384,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df12=========================================================
exp_data <- dataset$df12 # retrieve data of Lupton (2020) ORAL female feces
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cfeces")
preds_Lup_OR_Ffeces <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Lup_OR_Ffeces [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
preds_Lup_OR_Ffeces <- unlist(preds_Lup_OR_Ffeces) /1000 #convert ug/kg to ug/g
obs_Lup_OR_Ffeces <- c(exp_data[exp_data$Tissue == "Feces", "concentration"])
##########################
#-------------------------
# Lupton ORAL female urine
#-------------------------
##########################
# Set up simulations for the 13th case, i.e. Lupton (2020) ORAL female urine
BW <- 0.1875  # body weight (kg) not reported
admin.dose_per_g <- 0.047 # administered dose in mg PFOA/kg BW
admin.dose_single <- (admin.dose_per_g*BW*1e03)/2 #ug PFOA
admin.time <- seq(0,13.5*24,12) #time when doses are administered, in hours
admin.dose <- rep(admin.dose_single, length(admin.time))
admin.type <- "oral"
sex <- "F"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,384,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df13=========================================================
exp_data <- dataset$df13 # retrieve data of Lupton (2020) ORAL female feces
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Curine")
preds_Lup_OR_Furine <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Lup_OR_Furine [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
preds_Lup_OR_Furine <- unlist(preds_Lup_OR_Ffeces) /1000 #convert ug/kg to ug/g
obs_Lup_OR_Furine <- c(exp_data[exp_data$Tissue == "Urine", "concentration"])
##########################
#-------------------------
# Cui ORAL male urine low
#-------------------------
##########################
# Set up simulations for the 14th case, i.e. Cui (2010) ORAL male urine low
BW <- 0.2  # body weight (kg) not reported
admin.dose_per_g <- 5 # administered dose in mg PFOA/kg BW
admin.dose_single <- (admin.dose_per_g*BW*1e03) #ug PFOA
admin.time <- seq(0,28*24,24) #time when doses are administered, in hours
admin.dose <- rep(admin.dose_single, length(admin.time))
admin.type <- "oral"
sex <- "M"
estimated_params <- exp(x)
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,672,2)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df14=========================================================
exp_data <- dataset$df14 # retrieve data of Cui (2010) ORAL male urine low
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Curine")
preds_Cui_OR_Murine <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_Cui_OR_Murine [[i]] <- solution[solution$time %in% exp_time, column_names[i]]
}
preds_Cui_OR_Murine <- unlist(preds_Cui_OR_Murine) /1000 #convert ug/kg to ug/g
obs_Cui_OR_Murine <- c(exp_data[exp_data$Tissue == "Urine", "concentration"])
#Aggregate observations for all scenarios
preds <-c(preds_kudo_high, preds_kudo_low, preds_kim_IV_Mtissues, preds_kim_OR_Mtissues, preds_kim_IV_Ftissues, preds_kim_OR_Ftissues,
preds_dzi_OR_Mtissues, preds_dzi_OR_Ftissues, preds_kim_OR_Mblood, preds_kim_IV_Mblood, preds_Lup_OR_Ftissues,
preds_Lup_OR_Ffeces, preds_Lup_OR_Furine, preds_Cui_OR_Murine)
obs <- c(obs_kudo_high, obs_kudo_low, obs_kim_IV_Mtissues, obs_kim_OR_Mtissues, obs_kim_IV_Ftissues, obs_kim_OR_Ftissues,
obs_dzi_OR_Mtissues, obs_dzi_OR_Ftissues, obs_kim_OR_Mblood, obs_kim_IV_Mblood, obs_Lup_OR_Ftissues,
obs_Lup_OR_Ffeces, obs_Lup_OR_Furine, obs_Cui_OR_Murine)
score <- AAFE(predictions = preds, observations = obs)
return(score)
}
################################################################################
setwd("C:/Users/dpjio/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat")
# Read data
kudo_high_dose <- openxlsx::read.xlsx("Data/IV_male_rats_tissues_high_kudo_2007.xlsx")
kudo_low_dose <- openxlsx::read.xlsx("Data/IV_male_rats_tissues_low_kudo_2007.xlsx")
kim_IV_Mtissues <- openxlsx::read.xlsx("Data/PFOA_male_tissues_IV_kim_2016.xlsx")
kim_OR_Mtissues <- openxlsx::read.xlsx("Data/PFOA_male_tissues_ORAL_kim_2016.xlsx")
kim_IV_Ftissues <- openxlsx::read.xlsx("Data/PFOA_female_tissues_IV_kim_2016.xlsx")
kim_OR_Ftissues <- openxlsx::read.xlsx("Data/PFOA_female_tissues_ORAL_kim_2016.xlsx")
dzi_OR_Mtissues <- openxlsx::read.xlsx("Data/Dzierlenga_tissue_male_ORAL_2021.xlsx")
dzi_OR_Ftissues <- openxlsx::read.xlsx("Data/Dzierlenga_tissue_female_ORAL_2021.xlsx")
kim_OR_Mblood <- openxlsx::read.xlsx("Data/PFOA_male_blood_ORAL_kim_2016.xlsx")
kim_IV_Mblood <- openxlsx::read.xlsx("Data/PFOA_male_blood_IV_kim_2016.xlsx")
Lup_OR_Ftissues <- openxlsx::read.xlsx("Data/PFOA_female_tissues_Lupton_2020.xlsx")
Lup_OR_Ffeces <- openxlsx::read.xlsx("Data/PFOA_female_add-feces_Lupton_2020.xlsx")
Lup_OR_Furine <- openxlsx::read.xlsx("Data/PFOA_female_add-urine_Lupton_2020.xlsx")
Cui_OR_Murine <- openxlsx::read.xlsx("Data/PFOA_male_urine_oral_low_Cui_2010.xlsx")
dataset <- list("df1" = kudo_high_dose, "df2" = kudo_low_dose, "df3" = kim_IV_Mtissues, "df4" = kim_OR_Mtissues,
"df5" = kim_IV_Ftissues, "df6" = kim_OR_Ftissues, "df7" = dzi_OR_Mtissues, "df8" = dzi_OR_Ftissues,
"df9" = kim_OR_Mblood, "df10" = kim_IV_Mblood, "df11" = Lup_OR_Ftissues, "df12" = Lup_OR_Ffeces,
"df13" = Lup_OR_Furine, "df14" = Cui_OR_Murine)
#Initialise optimiser to NULL for better error handling later
opts <- list( "algorithm" = "NLOPT_LN_SBPLX",#"NLOPT_LN_NEWUOA","NLOPT_LN_SBPLX"
"xtol_rel" = 1e-07,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 100,
"print_level" = 1)
# Create initial conditions (zero initialisation)
#Parameter names:
# Male RAFOatp_k, Male RAFOat1, Male RAFOat3, Male RAFOatp_l,Male RAFNtcp
# Female RAFOatp_k, Female RAFOat1, Female RAFOat3, Female RAFOatp_l,female RAFNtcp
#  bile_correction_factor, 11 correction factors for permeabilities
N_pars <- 14 # Number of parameters to be fitted
fit <- log(rep(1,N_pars))
# Run the optimization algorithmm to estimate the parameter values
optimizer <- nloptr::nloptr( x0= fit,
eval_f = obj.func,
lb	= c(rep(log(1e-10), 11),log(1e-05),log(1e-05), log(1e-03)),
ub = c(rep(log(1e10), 11),log(1e05),log(1e05), log(1e03)),
opts = opts,
dataset = dataset)
