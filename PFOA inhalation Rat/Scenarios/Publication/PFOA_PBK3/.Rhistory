experiment13a <- reshape(Kemp_OR_Furine_high[c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment13a) <- c("Time",unique(Kemp_OR_Furine_high$Tissue))
experiment13a$Urine = (experiment13a$Urine/100)*0.2*25
# Convert Kemper ORAL female feces from long to wide format using reshape
experiment13b <- reshape(Kemp_OR_Ffeces_high[c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment13b) <- c("Time",unique(Kemp_OR_Ffeces_high$Tissue))
experiment13b$Feces = (experiment13b$Feces/100)*0.2*25
# Convert Kemper ORAL male urine low from long to wide format using reshape
experiment14a <- reshape(Kemp_OR_Murine_low [c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment14a) <- c("Time",unique(Kemp_OR_Murine_low$Tissue))
experiment14a$Urine = (experiment14a$Urine/100)*0.3*1
# Convert Kemper ORAL male feces low from long to wide format using reshape
experiment14b <- reshape(Kemp_OR_Mfeces_low[c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment14b) <- c("Time",unique(Kemp_OR_Mfeces_low$Tissue))
experiment14b$Feces = (experiment14b$Feces/100)*0.3*1
# Convert Kemper ORAL male urine med from long to wide format using reshape
experiment15a <- reshape(Kemp_OR_Murine_med[c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment15a) <- c("Time",unique(Kemp_OR_Murine_med$Tissue))
experiment15a$Urine = (experiment15a$Urine/100)*0.3*5
# Convert Kemper ORAL male feces medium from long to wide format using reshape
experiment15b <- reshape(Kemp_OR_Mfeces_med[c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment15b) <- c("Time",unique(Kemp_OR_Mfeces_med$Tissue))
experiment15b$Feces = (experiment15b$Feces/100)*0.3*5
# Convert Kemper ORAL male urine high from long to wide format using reshape
experiment16a <- reshape(Kemp_OR_Murine_high[c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment16a) <- c("Time",unique(Kemp_OR_Furine_high$Tissue))
experiment16a$Urine = (experiment16a$Urine/100)*0.3*25
# Convert Kemper ORAL male feces from long to wide format using reshape
experiment16b <- reshape(Kemp_OR_Mfeces_high[c("Tissue" ,"Time_h",
"Cum_dose_%")],
idvar = "Time_h", timevar = "Tissue", direction = "wide")
colnames(experiment16b) <- c("Time",unique(Kemp_OR_Mfeces_high$Tissue))
experiment16b$Feces = (experiment16b$Feces/100)*0.3*25
# Convert Dzierlenga 2021, IV male serum from long to wide format using reshape
experiment17 <- reshape(dzi_IV_Mserum[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment17) <- c("Time",unique(dzi_IV_Mserum$Tissue))
# Convert Dzierlenga 2021, ORAL male serum low from long to wide format using reshape
experiment18 <- reshape(dzi_OR_Mserum_low[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment18) <- c("Time",unique(dzi_OR_Mserum_low$Tissue))
# Convert Dzierlenga 2021, ORAL male serum medium from long to wide format using reshape
experiment19 <- reshape(dzi_OR_Mserum_medium[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment19) <- c("Time",unique(dzi_OR_Mserum_low$Tissue))
#Convert Dzierlenga 2021, ORAL male serum high from long to wide format using reshape
experiment20 <- reshape(dzi_OR_Mserum_high[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment20) <- c("Time",unique(dzi_OR_Mserum_high$Tissue))
#Convert Dzierlenga 2021, IV female serum from long to wide format using reshape
experiment21 <- reshape(dzi_IV_Fserum[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment21) <- c("Time",unique(dzi_IV_Fserum$Tissue))
#Convert Dzierlenga 2021, ORAL female serum low from long to wide format using reshape
experiment22 <- reshape(dzi_OR_Fserum_low[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment22) <- c("Time",unique(dzi_OR_Fserum_low$Tissue))
#Convert Dzierlenga 2021, ORAL female serum medium from long to wide format using reshape
experiment23 <- reshape(dzi_OR_Fserum_medium[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment23) <- c("Time",unique(dzi_OR_Fserum_medium$Tissue))
#Convert Dzierlenga 2021, ORAL female serum high from long to wide format using reshape
experiment24 <- reshape(dzi_OR_Fserum_high[c("Tissue" ,"Time_hours",
"Concentration_microM")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment24) <- c("Time",unique(dzi_OR_Fserum_high$Tissue))
#Convert Kim 2016, ORAL female serum long to wide format using reshape
experiment25 <- reshape(kim_OR_Fblood[c("Tissue" ,"Time_hours",
"Concentration_microg_per_g_organ")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment25) <- c("Time",unique(kim_OR_Fblood$Tissue))
#Convert Kim 2016, IV female serum long to wide format using reshape
experiment26<- reshape(kim_IV_Fblood[c("Tissue" ,"Time_hours",
"Concentration_microg_per_g_organ")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment26) <- c("Time",unique(kim_IV_Fblood$Tissue))
# Convert Gustafsson Oral male blood from long to wide format using reshape
experiment27 <- reshape(gus_OR_Mblood[c("Tissue" ,"Time_hours",
"Concentration_microg_per_g_organ")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment27) <- c("Time",unique(gus_OR_Mblood$Tissue))
# Convert Gustafsson Oral male tissues from long to wide format using reshape
experiment28 <- reshape(gus_OR_Mtissues[c("Tissue" ,"Time_hours",
"Concentration_microg_per_g_organ")],
idvar = "Time_hours", timevar = "Tissue", direction = "wide")
colnames(experiment28) <- c("Time",unique(gus_OR_Mtissues$Tissue))
# Put the experiments in a list
experiments <- list(experiment1 = experiment1, experiment2 = experiment2, experiment3 = experiment3,
experiment4 = experiment4,experiment5 = experiment5, experiment6 = experiment6,
experiment7 = experiment7, experiment8 = experiment8,experiment9 = experiment9,
experiment10 = experiment10, experiment11a = experiment11a, experiment11b = experiment11b,
experiment12a = experiment12a, experiment12b = experiment12b,
experiment13a = experiment13a, experiment13b = experiment13b,
experiment14a = experiment14a, experiment14b = experiment14b,
experiment15a = experiment15a,experiment15b = experiment15b,
experiment16a = experiment16a,experiment16b = experiment16b,
experiment17 = experiment17, experiment18 = experiment18,
experiment19 = experiment19, experiment20 = experiment20,experiment21 = experiment21,
experiment22 = experiment22, experiment23 = experiment23, experiment24 = experiment24,
experiment25 = experiment25, experiment26 = experiment26, experiment27 = experiment27,
experiment28 = experiment28)
# Rename predictions so that they share the same name as the names of the experimental data dataframe
colnames(preds_kudo_high) <- c( "Time", "Blood", "Liver",  "Kidney", "Carcass", "Lung",  "Spleen",
"Heart", "Brain", "Gonads", "Stomach", "Intestine")
colnames(preds_kudo_low) <-  colnames(preds_kudo_high)
colnames(preds_kim_IV_Mtissues) <- c( "Time", "Liver",  "Kidney", "Lung",
"Spleen", "Heart")
colnames(preds_kim_OR_Mtissues) <- colnames(preds_kim_IV_Mtissues)
colnames(preds_kim_IV_Ftissues) <- colnames(preds_kim_IV_Mtissues)
colnames(preds_kim_OR_Ftissues) <- colnames(preds_kim_IV_Mtissues)
colnames(preds_dzi_OR_Mtissues) <- c("Time","Liver","Kidney","Brain")
colnames(preds_dzi_OR_Ftissues) <- colnames(preds_dzi_OR_Mtissues)
colnames(preds_kim_OR_Mblood) <- c ("Time", "Plasma")
colnames(preds_kim_IV_Mblood) <- c ("Time", "Plasma")
colnames(preds_Kemp_OR_Ffeces_high) <- c ("Time", "Feces")
colnames(preds_Kemp_OR_Mfeces_high) <- c ("Time", "Feces")
colnames(preds_Kemp_OR_Furine_low) <- c ("Time", "Urine")
colnames(preds_Kemp_OR_Furine_med) <- c ("Time", "Urine")
colnames(preds_Kemp_OR_Furine_high) <- c ("Time", "Urine")
colnames(preds_Kemp_OR_Murine_low) <- c ("Time", "Urine")
colnames(preds_Kemp_OR_Murine_med) <- c ("Time", "Urine")
colnames(preds_Kemp_OR_Murine_high) <- c ("Time", "Urine")
colnames(preds_dzi_IV_Mserum) <- c ("Time", "Serum")
colnames(preds_dzi_OR_Mserum_low) <- c ("Time", "Serum")
colnames(preds_dzi_OR_Mserum_medium) <- c ("Time", "Serum")
colnames(preds_dzi_OR_Mserum_high) <- c ("Time", "Serum")
colnames(preds_dzi_IV_Fserum) <- c ("Time", "Serum")
colnames(preds_dzi_OR_Fserum_low) <- c ("Time", "Serum")
colnames(preds_dzi_OR_Fserum_medium) <- c ("Time", "Serum")
colnames(preds_dzi_OR_Fserum_high) <- c ("Time", "Serum")
colnames(preds_kim_IV_Fblood) <- c ("Time", "Plasma")
colnames(preds_kim_OR_Fblood) <- c ("Time", "Plasma")
colnames(preds_gus_OR_Mblood) <- c ("Time", "Plasma")
colnames(preds_gus_OR_Mtissues) <- c ("Time", "ALF", "Liver", "Lung", "Kidney")
colnames(preds_Kemp_OR_Ffeces_med) <- c ("Time", "Feces")
colnames(preds_Kemp_OR_Mfeces_med) <- c ("Time", "Feces")
colnames(preds_Kemp_OR_Ffeces_low) <- c ("Time", "Feces")
colnames(preds_Kemp_OR_Mfeces_low) <- c ("Time", "Feces")
# Create a list containing the corresponding predictions
simulations <- list(predictions1 = preds_kudo_high,  predictions2 = preds_kudo_low,
predictions3 = preds_kim_IV_Mtissues,
predictions4 = preds_kim_OR_Mtissues, predictions5 = preds_kim_IV_Ftissues,
predictions6 = preds_kim_OR_Ftissues,
predictions7 = preds_dzi_OR_Mtissues, predictions8 = preds_dzi_OR_Ftissues,
predictions9 = preds_kim_OR_Mblood,
predictions10 = preds_kim_IV_Mblood,
predictions11a = preds_Kemp_OR_Furine_low, predictions11b = preds_Kemp_OR_Ffeces_low,
predictions12a = preds_Kemp_OR_Furine_med, predictions12b = preds_Kemp_OR_Ffeces_med,
predictions13a =preds_Kemp_OR_Furine_high, predictions13b = preds_Kemp_OR_Ffeces_high,
predictions14a = preds_Kemp_OR_Murine_low, predictions14b = preds_Kemp_OR_Mfeces_low,
predictions15a = preds_Kemp_OR_Murine_med, predictions15b = preds_Kemp_OR_Mfeces_med,
predictions16a =preds_Kemp_OR_Murine_high, predictions16b = preds_Kemp_OR_Mfeces_high,
prediction17 =preds_dzi_IV_Mserum, predictions18 =preds_dzi_OR_Mserum_low,
predictions19 =preds_dzi_OR_Mserum_medium, predictions20 =preds_dzi_OR_Mserum_high,
predictions21 =preds_dzi_IV_Fserum, predictions22 =preds_dzi_OR_Fserum_low,
predictions23 =preds_dzi_OR_Fserum_medium,
predictions24 =preds_dzi_OR_Fserum_high, predictions25 = preds_kim_OR_Fblood,
predictions26 = preds_kim_IV_Fblood, predictions27 = preds_gus_OR_Mblood,
predictions28 = preds_gus_OR_Mtissues)
# Iterate over all existing experiments and create the accompanying plots
for(i in 1:length(experiments)){
# Retrieve the corresponding observations and simulations
observations <- experiments[[i]]
predictions <- simulations[[i]]
# Extract the compartment names
compartments <- names(predictions)[2:length(predictions)]
# Use lapply to iterate over the column names and create plots
plots <- lapply(compartments, function(compartment) {
create.plots(predictions, observations, compartment )
})
if(length(compartments) == 1){
final_plot <- do.call(ggpubr::ggarrange, c(plots, ncol = 1, nrow = 1,
common.legend = TRUE, legend = "right"))
}else{
final_plot <- do.call(ggpubr::ggarrange, c(plots, ncol = 3, nrow = ceiling(length(plots) / 3),
common.legend = TRUE, legend = "right"))
}
plot.margin=unit(c(0,0,0,0), "pt")
# Save the plot with dynamically adjusted dimensions
ggsave(paste0("experiment", i,".png"), plot = final_plot,
device = 'png', dpi = 300,
width = 13,
height = 10,
units = "in")
}
estimated_params
BW = 0.25
fixed_params = fixed_params[[3]]
sex = "M"
if(sex == "M"){
RAFOatp_k <- estimated_params[1]
}else{
RAFOatp_k <-estimated_params[2]
}
RAFOat3 <- estimated_params[3]
CL_int <- estimated_params[4] #uL/min/million hepatocytes
HEPGL <- 104  #million hepatocytes/gram of rat liver (Fattah et al., 2016. [doi: 10.1124/dmd.115.066381] )
# Scaled hepatobiliary clearance
CL_hepatobiliary <- CL_int*1e-6*HEPGL*(fixed_params$MKi_drained*1000) *60 #L/h
RAFOatp_l <- estimated_params[5]
RAFUrat <- RAFOatp_k
RAFOat1 <- RAFOat3
RAFOatp2_l <- RAFOatp_l
RAFOatp_lu_ap <-estimated_params[6]
RAFOatp_lu_bas <- RAFOatp_lu_ap
RAFNtcp <- RAFOatp_l
RAFOatp2_Int <- 6.799068e-07
# The parameters below were part of tests involving hypothetical transporters in the kidneys.
# In the final model these transporters are switched off.
VmK_api <- 0
VmK_baso <- 0
KmK_baso <- 1e20
KmK_api <-   5e4
KLfabp <- 1.2e5 #[L/mol]. From Sheng et al. 2018
Ka <- estimated_params[7]#5.8e5[L/mol]. From Rue et al. (2024)
Ka2u <- 5*1e02 #[L/mol], value from Cheng et al. (2017)
CLfeces_unscaled <- estimated_params[8]#in L/h/BW^(-0.25), scaling similar to Loccisano et al. (2012)
CLfeces <- CLfeces_unscaled*BW^(-0.25)
f_alb_avail<-  1#estimated_params[8]
f_fabp_avail  <- 1#estimated_params[9]
f_a2u_avail <- 1
koff_alb <-  2 #estimated_params[11]
koff_fabp <-  estimated_params[9]
koff_a2u <- koff_alb
reduction_factor <-estimated_params[10]
f_tubular <- 0.8
f_PTC_prot_to_tub_prot <- 0.6939
# For the section below, we assume that all measurement were made relative to rinsed organs that
# contained only capillary blood weight. Consequently, we multiply by the mass of the drained organ
MW = 414.07 #g/mol, PFOA molecular weight
intestine_protein <-109 #mg/g intestine. from van de Kerkhof (2007) [https://research.rug.nl/en/publications/drug-metabolism-in-human-and-rat-intestine-an-in-vitro-approach]
intestine_protein_total <- intestine_protein*(1000*fixed_params$MIn_drained) #mg
#Kidney
kidney_protein_per_rat <- 1000*(0.218+0.225+0.212)/3 #mg of protein per rat  (Addis 1936)
rat_weight_addis <- 200 #g, average rat weight in Addis, 1936
rat_kidney_weight_addis <- rat_weight_addis*0.0073 # kidney fraction to BW, Brown (1997)
kidney_protein_per_gram <- kidney_protein_per_rat/rat_kidney_weight_addis #mg of protein/g kidney
kidney_protein_total <- kidney_protein_per_gram* (1000*fixed_params$MKi_drained) #mg
PTC_protein <- f_tubular*f_PTC_prot_to_tub_prot*kidney_protein_total #mg
#Oatp kidney
VmK_Oatp_in_vitro <- 9.3 #nmol/mg protein/min (Weaver et al. 2010)
VmK_Oatp_scaled <- 60*VmK_Oatp_in_vitro*MW*PTC_protein/1000  #physiologically scaled to in vivo, ug/h
VmK_Oatp <- VmK_Oatp_scaled*RAFOatp_k #in vivo value, in  ug/h
KmK_Oatp=  126.4*MW# [umol/L] * g/mol  --> ug/L, from Weaver et al. (2010)
#oat1 kidney
VmK_Oat1_in_vitro= 2.6 #nmol/mg protein/min (Weaver et al. 2010)
VmK_Oat1_scaled = 60*VmK_Oat1_in_vitro*MW*PTC_protein/1000 #physiologically scaled to in vivo, ug/h
VmK_Oat1= VmK_Oat1_scaled*RAFOat1 #in vivo value, in   ug/h
KmK_Oat1= 43.2 * MW #umol/L (Weaver et al. 2010) --> ug/L
#oat3 kidney
VmK_Oat3_in_vitro= 3.8 #nmol/mg protein/min  (Weaver et al. 2010)
VmK_Oat3_scaled = 60*VmK_Oat3_in_vitro*MW*PTC_protein/1000 #physiologically scaled to in vivo, ug/h
VmK_Oat3 = VmK_Oat3_scaled*RAFOat3 #in vivo value, in   ug/h
KmK_Oat3= 65.7 * MW #umol/L (Weaver et al. 2010) --> ug/L
#Urat1 kidney
VmK_Urat_in_vitro= 1520e-3 #nmol/mg protein/min  (Lin et al. 2023)
VmK_Urat_scaled = 60*VmK_Urat_in_vitro*MW*PTC_protein/1000 #physiologically scaled to in vivo, ug/h
VmK_Urat = VmK_Urat_scaled*RAFUrat #in vivo value, in   ug/h
KmK_Urat = 820.04 * MW #umol/L (Lin et al. 2023) --> ug/L
#Liver
liver_protein_per_rat <- 1000*(1.52+1.53+1.52)/3#mg of protein per rat  (Addis 1936)
rat_weight_addis <- 200 #g, average rat weight in Addis, 1936
rat_liver_weight_addis <- rat_weight_addis*0.0366 # liver fraction to BW, Brown (1997)
liver_protein_per_gram <- liver_protein_per_rat/rat_liver_weight_addis #mg or protein/g liver
liver_protein_total <- liver_protein_per_gram* (1000*fixed_params$MLi_drained) #mg
#oatp1-liver
VmL_Oatp_in_vitro= 9.3 #nmol/mg protein/min  (Weaver et al. 2010)
VmL_Oatp_scaled = 60*VmL_Oatp_in_vitro*MW*liver_protein_total/1000   #physiologically scaled to in vivo, ug/h
VmL_Oatp = VmL_Oatp_scaled*RAFOatp_l #in vivo value, in  ug/h
KmL_Oatp = KmK_Oatp #same as kidney
#oatp2b1-liver
VmL_Oatp2_in_vitro= 1493e-3 #nmol/mg protein/min  (Lin et al. 2023)
#physiologically scaled to in vivo
VmL_Oatp2_scaled = 60*VmL_Oatp2_in_vitro*MW*liver_protein_total/1000  #ug/h
VmL_Oatp2 = VmL_Oatp2_scaled*RAFOatp2_l #in vivo value, in  ug/h
KmL_Oatp2 = 148.68*MW #umol/L (Lin et al. 2023) --> ug/L
#Ntcp liver
VmL_Ntcp_in_vitro= 3#nmol/mg protein/min   Ruggiero et al. 2021
#physiologically scaled to in vivo
VmL_Ntcp_scaled = 60*VmL_Ntcp_in_vitro*MW*liver_protein_total/1000 # ug/h
VmL_Ntcp = VmL_Ntcp_scaled*RAFNtcp #in vivo value, in  ug/h
KmL_Ntcp= 20 * MW #umol/L, Ruggiero et al. 2021 --> ug/L
#Lung
lung_protein_per_gram <- 134 #  mg/g tissue, Figure 2, [doi: 10.1007/s00580-021-03242-z]
lung_protein_total <- lung_protein_per_gram*(fixed_params$MLu_drained*1000) #mg
#oatp-lung-ap (from ALF to tissue)
VmLu_Oatp_ap_in_vitro= 9.3 #nmol/mg protein/min  (Weaver et al. 2010)
VmLu_Oatp_ap_scaled = 60*VmLu_Oatp_ap_in_vitro*MW*lung_protein_total/1000   #physiologically scaled to in vivo, ug/h
VmLu_Oatp_ap = VmLu_Oatp_ap_scaled*RAFOatp_lu_ap #in vivo value, in  ug/h
KmLu_Oatp_ap = KmK_Oatp #same as kidney
#oatp-lung-bas (from IS to tissue)
VmLu_Oatp_bas_in_vitro= 9.3 #nmol/mg protein/min  (Weaver et al. 2010)
VmLu_Oatp_bas_scaled = 60*VmLu_Oatp_bas_in_vitro*MW*lung_protein_total/1000   #physiologically scaled to in vivo, ug/h
VmLu_Oatp_bas = VmLu_Oatp_bas_scaled*RAFOatp_lu_bas #in vivo value, in  ug/h
KmLu_Oatp_bas = KmK_Oatp #same as kidney
#Intestine
#oatp2b1-intestine
VmIn_Oatp2_in_vitro= 456.63e-3 #nmol/mg protein/min  (Kimura et al., 2017)
#assuming that the mediated transport is performed only by this transporter
VmIn_Oatp2_scaled = 60*VmIn_Oatp2_in_vitro*MW*intestine_protein_total/1000   #physiologically scaled to in vivo, ug/h
VmIn_Oatp2 = VmIn_Oatp2_scaled*RAFOatp2_Int #in vivo value, in  ug/h, same RAF as in liver
KmIn_Oatp2 = 8.3*MW #umol/L (Kimura et al., 2017) --> ug/L
Mr_albumin <- 66500#g/mol
CalbB_init  <- f_alb_avail*mean(c(593,551, 591, 509, 535))*1e-6 #mol/L, from Rose & Klemcke (2015) [PMID: 26424242]
#Albumin concentration in blood and interstitial fluid compartments(mol/m^3 = 1e-6* nmol/g)
#CalbB_init <- f_alb_avail*486*1e-06 # #[umol/L]*1e-6 -->(mol/L), from Cheng et al. (2017)
CalbKB_init <- CalbB_init
CalbLB_init <- CalbB_init
CalbSTB_init <- CalbB_init
CalbINB_init <- CalbB_init
CalbMB_init <- CalbB_init
CalbAB_init <- CalbB_init
CalbRB_init <- CalbB_init
CalbBoB_init <- CalbB_init
CalbLuB_init <- CalbB_init
CalbSPB_init <- CalbB_init
CalbGoB_init <- CalbB_init
CalbHB_init <- CalbB_init
CalbBrB_init <- CalbB_init
CalbSKB_init <- CalbB_init
#Interstitial/plasma concentration ratio (IPR)
#values from Kawai et al.(1994)
IPR_K = 0.5
IPR_L = 0.5
IPR_ST = 0.9 #same as gut
IPR_IN = 0.9 #same as gut
IPR_M = 0.6
IPR_A = 0.5
IPR_Lu = 0.5
IPR_Sp = 0.5
IPR_H = 0.5
IPR_SK = 1.0
IPR_Br = 0.5
IPR_Go = 0.5 #assumption
IPR_Bo = 1.0
IPR_R = 0.5 # assumption
Hct <- 0.46 # From Davies and Morris (1993) [doi.10.1023/A:1018943613122].
# Worley et al. (2015) used the same value [doi:10.1016/j.taap.2015.10.017].
# Ehresman et al. (2007) found no binding to RBCs and a concentration of plasma:blood 2:1 [doi:10.1016/j.envres.2006.06.008]
# Filho et al. (2017) provide age-based values [10.1080/13685538.2017.1350156]
#Convert blood concentration to plasma concentration first to derive the interstitial concentration
CalbKF_init  <- (CalbKB_init/(1-Hct)) * IPR_K
CalbLF_init <- (CalbLB_init/(1-Hct))* IPR_L
CalbSTF_init <- (CalbSTB_init/(1-Hct))* IPR_ST
CalbINF_init <- (CalbINB_init/(1-Hct))* IPR_IN
CalbMF_init <- (CalbMB_init/(1-Hct))* IPR_M
CalbAF_init <- (CalbAB_init/(1-Hct))* IPR_A
CalbRF_init <- (CalbRB_init/(1-Hct))* IPR_R
CalbBoF_init <- (CalbBoB_init/(1-Hct))* IPR_Bo
CalbLuF_init <- (CalbLuB_init/(1-Hct))* IPR_Lu
CalbSPF_init <- (CalbSPB_init/(1-Hct))* IPR_Sp
CalbGoF_init <- (CalbGoB_init/(1-Hct))* IPR_Go
CalbHF_init <- (CalbHB_init/(1-Hct))* IPR_H
CalbBrF_init <- (CalbBrB_init/(1-Hct))* IPR_Br
CalbSKF_init <- (CalbSKB_init/(1-Hct))* IPR_SK
CalbLuAF_init <- (10/100/(1-Hct)) * CalbB_init #based on Woods et al. 2015 statement [doi: 10.1016/j.jconrel.2015.05.269]
#Alpha2mu-globulin concentration in kidney tissue (mol/L)
if (sex == "M"){
#!!!!!!!!!!!!!!!!!!!!! CHECK, it says mg/g kidney protein
a2u_globulin_k = 8.77*kidney_protein_total*1e-3/fixed_params$MKi_drained #mg/L, 8.77 mg/g kidney protein from [doi: 10.1016/0300-483X(86)90197-6]
Ca2uKT_init <- f_a2u_avail*(a2u_globulin_k*1e-3/15.5e3) #[mol/L]
#Ca2uKT_init <- 321.51*1e-3 #[umol/L]*1e-3 -->(mol/m3), from Cheng et al. (2017)
}else if(sex == "F"){
Ca2uKT_init <- 0 #mol/L
}
#LFABP concentration in kidney and liver tissue (mol/m^3)
#!!!!!!!!!!!!!!!!CHECK
L_FABP_L = 28.2e-3*liver_protein_per_rat/fixed_params$MLi_drained #mg/L, 28.2 ug/mg cytosolic protein from [doi: 10.1016/S0021-9258(18)34463-6]
#cytosolic protein is 96.3% of the total liver protein, [doi: 10.18632/aging.101009]
CFabpLT_init = f_fabp_avail*(L_FABP_L*1e-3/14e3) #[mol/L]
#LFABP concentration in kidney and liver tissue (mol/m^3)
CFabpKT_init <- f_fabp_avail*2.65*1e-6  #[umol/L]*1e-6 -->(mol/L), from Cheng et al. (2017)
kon_alb <- Ka * koff_alb #1/M/s
kon_a2u <- Ka2u * koff_a2u#1/M/s
kon_fabp <- KLfabp * koff_fabp #1/M/s
# Following the calculations  of Lin et al. (2023) for Caco-2 cells
ClINFT_unscaled= 18.1 #uL/min/mg protein, Kimura et al. 2017 [doi: 10.1016/j.toxlet.2017.05.012]
Awell = 9 #cm^2 (for a 35 mm culture dish)
Swell = 1.12 #cm^2
well_protein = 0.346 #mg protein
protein_per_well = (well_protein * Awell)/Swell #mg protein/well
RAF_papp <- 1
Peff_KIMURA = RAF_papp*(ClINFT_unscaled*60*1e-06*1e3*protein_per_well)/(Awell *2) #cm/h,at  pH = 6.0
Papp_RYU <- 1.46e-6*3600 # cm/h, at pH = 7.4 from Ryu et al. (2024) [doi: 10.1016/j.chemosphere.2024.142390]
# The permeability rate of Kimura et al. (2017)is 30 times greater than the one from Ryu et al. (2024)
# For endothelial and cellular permeability we use the Ryu et al. (2024) value
Peff_monolayer <- Papp_RYU #cm/h
k_gut_in = ( (2*Peff_monolayer/100) * fixed_params$AINL)*1000 #L/h
k_gut_out = ( (2*Peff_monolayer/100) * fixed_params$AINL)*1000 #L/h
#Stomach
# For identifiability reasons we assume that absorption takes place only through the intestines
kabST <- 0#(kabs_st* fixed_params$ASTL)*1000 #L/h
#passive diffusion rates, in L/h
kLFLT = ((2*Peff_monolayer/100) * fixed_params$AcL)*1000 #m^3/h * 1000 --> L/h
#kLTLbile = ((Papp/100) * AcLBilec)*1000 #m^3/h * 1000 --> L/h
kMFMT = ((2*Peff_monolayer/100) * fixed_params$AcM)*1000 #m^3/h * 1000 --> L/h
kSTFSTT = ((2*Peff_monolayer/100) * fixed_params$AcST)*1000 #m^3/h * 1000 --> L/h
kINFINT = ((2*Peff_monolayer/100) * fixed_params$AcIN)*1000 #m^3/h * 1000 --> L/h
kAFAT = ((2*Peff_monolayer/100) * fixed_params$AcA)*1000 #m^3/h * 1000 --> L/h
kLuTLuF = ((2*Peff_monolayer/100) * fixed_params$AcLu)*1000 #m^3/h * 1000 --> L/h
kLuTLuAF = ((2*Peff_monolayer/100) * fixed_params$AcALF)*1000 #m^3/h * 1000 --> L/h
kSPFSPT = ((2*Peff_monolayer/100) * fixed_params$AcSP)*1000 #m^3/h * 1000 --> L/h
kHFHT = ((2*Peff_monolayer/100) * fixed_params$AcH)*1000 #m^3/h * 1000 --> L/h
kBrFBrT = ((2*Peff_monolayer/100) * fixed_params$AcBr)*1000 #m^3/h * 1000 --> L/h
kGoFGoT = ((2*Peff_monolayer/100) * fixed_params$AcGo)*1000 #m^3/h * 1000 --> L/h
kSKFSKT = ((2*Peff_monolayer/100) * fixed_params$AcSK)*1000 #m^3/h * 1000 --> L/h
kBoFBoT = ((2*Peff_monolayer/100) * fixed_params$AcBo)*1000 #m^3/h * 1000 --> L/h
kRFRT = ((2*Peff_monolayer/100) * fixed_params$AcR)*1000 #m^3/h*1000 --> L/h
#Diffusion rates in L/h between renal tubule filtrate and tubule cells
kPtcTu <- ((2*Peff_monolayer/100) * fixed_params$APT) *1000 #diffusion between proximal tubule cells and tubule filtrate
kDalcTu <- ((2*Peff_monolayer/100) * fixed_params$ADAL) *1000 #diffusion between descending/ascending cells and tubule filtrate
kDtcTu <- ((2*Peff_monolayer/100) * fixed_params$ADT) *1000 #diffusion between distal tubule cells and tubule filtrate
kCdcTu <- ((2*Peff_monolayer/100) * fixed_params$ACD) *1000 #diffusion between collecting duct cells and tubule filtrate
#Diffusion rates in L/h between  tubule cells and interstitial space
kDtcF <- ((2*Peff_monolayer/100) * fixed_params$AcK_DTC) *1000
kPtcF <- ((2*Peff_monolayer/100) * fixed_params$AcK_PTC) *1000
kDalcF <- ((2*Peff_monolayer) * fixed_params$AcK_DALC) *1000 #diffusion between proximal tubule cells and interstitial space
kCdcF <- ((2*Peff_monolayer/100) * fixed_params$AcK_CDC) *1000 #diffusion between descending/ascending cells and interstitial space
kKTrestF  <- ((2*Peff_monolayer/100) * fixed_params$AcKTrest) *1000 #diffusion between rest of kidney cells and interstitial space
# Physiologic upper limit of pore size from Sarin et al. (2010) [10.1186/2040-2384-2-14]
pore_diameters <- c(
Ki = 9,
Li = 135,     # use 135 as average for rat liver
St = 9,       # midpoint of 6-12 nm for fenestrated with diaphragm
In = 9,
Mu = 5,
Ad = 5,
Re = 5,
Lu = 5,
Sp = 5000,    # 5 microns = 5000 nm
Ht = 5,
Br = 1,       # tight junction
Go = 9,
Sk = 9,
Bo = 5
)
dif <- 5.46e-6 #[cm^2/s], diffusion coefficient of PFOA in water, from  Gauthier et al. (2024) [doi: 10.1021/acsestwater.4c00631]
kboltzman <- 1.38e-23 #J/kelvin
Temp <- 37+273 #kelvin
dyn_visc <- 6.9e-4 #Pa*s, Dynamic viscosity of water at 37 o C
# from Stokes–Einstein:
R_H  <-  kboltzman * Temp/ (6*pi*dif*1e-4*dyn_visc)*1e9 #nm, hydrodynamic radius of PFOA
#Renkin equation (Renkin, (1954), [PMC2147404])
#Diffusion reduction due to steric hindrance at the entrance to the pores and frictional resistance within the pores
lambda <- R_H/(pore_diameters/2)
lambda["Br"] <- 1 #Upper limit
renkin_reduction <- (1-lambda)^2 * (1 - 2.104*lambda + 2.09*lambda^3 - 0.95*lambda^5)
wall_width <-  0.5e-6*100 #[m] -->[cm], capillary wall width. From Ashoor et al. (2018) [10.1016/j.rpor.2018.09.007]. Similar value from Sosula (1974) [10.1016/0026-2862(74)90011-9]
basement_membrane <-  0.5e-6*100 #assumption
Pgap <-reduction_factor*dif*renkin_reduction/ (wall_width+basement_membrane) #cm/s
# In organs with sinusoid there is no basement membrane at gaps,
# so we use basemenent membrane thickness = 0
Pgap_sinusoidal <-  reduction_factor*dif*renkin_reduction/ wall_width #cm/s
#fraction of gaps in capillary surface
f_kidney <- 0.3 #Bulger et al. (1983) [10.1172/jci110950] Mou et al. (2024) [10.3390/ijms25169107]
f_liver <- 0.08 #  Simon-Santamaria et al. (2010)[10.1093/gerona/glq108] (Antwi et al. (2023) give a range 2-20% [10.1371/journal.pone.0293526] )
f_spleen <- 0.08 #assumption
f_intestine <- 0.095 #Simionescu et al. (1974) [doi: 10.1083/jcb.60.1.128]
f_non_fenestrated <- 0.0048 # Clough & Michel (1988) [doi: 10.1113/jphysiol.1988.sp017348]
# All effective permeabilities are in cm/h and are multiplied by 10, because they are divided by 100 to be converted to meters
# and later in the code they mutiply SA which is in m^2 becoming m^3, which is multiplied by 1000 to become Liters
# Transendothelial diffusion
Ptrans_diff_K <- Peff_monolayer*10 * (1-f_kidney) #mm/h
Ptrans_diff_L <- Peff_monolayer*10* (1-f_liver) #mm/h
Ptrans_diff_ST <- Peff_monolayer*10* (1-f_intestine) #mm/h
Ptrans_diff_IN <- Peff_monolayer*10* (1-f_non_fenestrated)  #mm/h
Ptrans_diff_A <- Peff_monolayer*10 * (1-f_non_fenestrated)#mm/h
Ptrans_diff_M <- Peff_monolayer*10* (1-f_non_fenestrated) #mm/h
Ptrans_diff_R <- Peff_monolayer*10* (1-f_non_fenestrated)#mm/h
Ptrans_diff_Lu <- Peff_monolayer*10* (1-f_non_fenestrated) #mm/h
Ptrans_diff_SP <- Peff_monolayer*10* (1-f_spleen)  #mm/h
Ptrans_diff_H <- Peff_monolayer*10* (1-f_non_fenestrated) #mm/h
Ptrans_diff_Br <- Peff_monolayer*10* (1-f_non_fenestrated) #mm/h
Ptrans_diff_Go <- Peff_monolayer*10* (1-f_non_fenestrated) #mm/h
Ptrans_diff_SK <- Peff_monolayer*10* (1-f_non_fenestrated) #mm/h
Ptrans_diff_Bo <- Peff_monolayer*10* (1-f_non_fenestrated) #mm/h
#Estimation of permeability through capillary fenestra and discontinuities:
PparaKi <- Pgap["Ki"]*3600*10*f_kidney#mm/h
PparaLi <- Pgap_sinusoidal["Li"]*3600*10 * f_liver #mm/h
PparaSt <- Pgap["St"]*3600*10 * f_non_fenestrated #mm/h
PparaIn <- Pgap["In"]*3600*10 * f_intestine #mm/h
PparaMu <- Pgap["Mu"]*3600*10 * f_non_fenestrated #mm/h
PparaAd <- Pgap["Ad"]*3600*10 * f_non_fenestrated #mm/h
PparaRe <- Pgap["Re"]*3600*10 * f_non_fenestrated #mm/h
PparaLu <- Pgap["Lu"]*3600*10 * f_non_fenestrated #mm/h
PparaSp <- Pgap_sinusoidal["Sp"]*3600*10 * f_spleen  #mm/h
PparaHt <- Pgap["Ht"]*3600*10 * f_non_fenestrated #mm/h
PparaBr <- 0
PparaGo <- Pgap["Go"]*3600*10 * f_non_fenestrated #mm/h
PparaSk <- Pgap["Sk"]*3600*10 * f_non_fenestrated #mm/h
PparaBo <- Pgap["Bo"]*3600*10  * f_non_fenestrated#mm/h
