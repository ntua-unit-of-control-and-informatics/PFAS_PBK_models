user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,288,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_kim_IV_Mtissues <-  solution[, c("time", "Cliver","Ckidney", "Clungs",
"Cspleen", "Cheart")]
# Set up simulations for the 4th case, i.e. kim (2016) ORAL Male tissues
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,288,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_kim_OR_Mtissues <-  solution[, c("time", "Cliver","Ckidney", "Clungs",
"Cspleen", "Cheart")]
# Set up simulations for the 5th case, i.e. kim (2016) IV female tissues
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "iv"
sex <- "F"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,24,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_kim_IV_Ftissues <-  solution[, c("time", "Cliver","Ckidney", "Clungs",
"Cspleen", "Cheart")]
# Set up simulations for the 6th case, i.e. kim (2016) ORAL female tissues
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "F"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,24,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_kim_OR_Ftissues <-  solution[, c("time", "Cliver","Ckidney", "Clungs",
"Cspleen", "Cheart")]
# Set up simulations for the 7th case, i.e. Dzierlenga (2021) ORAL male tissues
BW <- 0.3  # body weight (kg) not reported
admin.dose_per_g <- 12 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,864,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_dzi_OR_Mtissues <-  solution[, c("time", "Cliver","Ckidney", "Cbrain")]
# Set up simulations for the 8th case, i.e. Dzierlenga (2021) ORAL female tissues
BW <- 0.2  # body weight (kg) not reported
admin.dose_per_g <- 80 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "F"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,24,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_dzi_OR_Ftissues <-  solution[, c("time", "Cliver","Ckidney", "Cbrain")]
#################################################################################
#--------------------------------------------------------------------------------
#                                Kim 2016 male, BLOOD
#-------------------------------------------------------------------------------
#################################################################################
# Set up simulations for the 9th case, i.e. Kim (2016) ORAL male blood
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,288,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_kim_OR_Mblood <-  solution[, c("time", "Cblood")]
# Set up simulations for the 10th case, i.e. Kim (2016) IV male blood
BW <- 0.25  # body weight (kg) not reported
admin.dose_per_g <- 1 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW *1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,288,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_kim_IV_Mblood <-  solution[, c("time", "Cblood")]
#################################################################################
#--------------------------------------------------------------------------------
#                                Lupton 2020
#-------------------------------------------------------------------------------
#################################################################################
# Set up simulations for the 11th case, i.e. Lupton (2020) ORAL female tissues
BW <- 0.184  # body weight (kg) not reported
admin.dose_per_g <- 0.047 # administered dose in mg PFOA/kg BW
admin.dose_single <- (admin.dose_per_g*BW*1e03)/2 #ug PFOA
admin.time <- seq(0,13.5*24,12) #time when doses are administered, in hours
admin.dose <- rep(admin.dose_single, length(admin.time))
admin.type <- "oral"
sex <- "F"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,324,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_Lup_OR_Ftissues <-  solution[, c("time", "Cliver","Ckidney", "Cblood", "Cskin")]
sample_time=seq(0,384,1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_Lup_OR_Ftissues <-  solution[, c("time", "Cliver","Ckidney", "Cblood", "Cskin")]
preds_Lup_OR_Ffeces <-  solution[, c("time", "Mfeces")]
preds_Lup_OR_Furine <-  solution[, c("time", "Murine")]
# Convert the Lupton excreta data to cumulative masses
#Feces
exp_data <- dataset$df12 # retrieve data of Lupton (2020) ORAL female feces
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
# Convert Lupton's excreta data to cumulative mass
exp_time <- exp_data$time
#Estimate fecal dry mass
Mfeces_wet <- (8.18/0.21) #g
Mfeces_dry <- Mfeces_wet*0.2 # Enqi et al., 2021, control rats:20.1% water content, https://doi.org/10.3389/fcimb.2020.581974
# Estimate the mass of feces by multiplying concentration by dry mass
Lupton_Ffeces <- c(exp_data[exp_data$Tissue == "Feces", "concentration"])*Mfeces_dry
# Estimate cumulative fecal mass
obs_Lup_OR_Ffeces_cum <- cumsum(Lupton_Ffeces)
#Urine
exp_data <- dataset$df13 # retrieve data of Lupton (2020) ORAL female feces
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
# Convert Lupton's excreta data to cumulative mass
exp_time <- exp_data$time
#Estimate urine volume
Qurine_daily <- 85 * BW #  (ml/d/kg)*BW  --> mL/d, Schmidt et al., 2001, doi:10.1002/nau.1006
Lupton_urine <- c(exp_data[exp_data$Tissue == "Urine", "concentration"])*Qurine_daily
# Estimate cumulative fecal mass
obs_Lup_OR_Furine_cum <- cumsum(Lupton_urine)
#################################################################################
#--------------------------------------------------------------------------------
#                                Cui 2010
#-------------------------------------------------------------------------------
#################################################################################
# Set up simulations for the 14th case, i.e. Cui (2010) ORAL male urine low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_Cui_OR_MurineL <-  solution[, c("time", "Murine")]
# Set up simulations for the 15th case, i.e. Cui (2010) ORAL male urine high
BW <-  0.210 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 20 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_Cui_OR_MurineH <-  solution[, c("time", "Murine")]
# Set up simulations for the 16th case, i.e. Cui (2010) ORAL male feces low
BW <-  0.200 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 5 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_Cui_OR_MfecesL <-  solution[, c("time", "Mfeces")]
# Set up simulations for the 17th case, i.e. Cui (2010) ORAL male feces high
BW <-  0.210 #kg, before quarantine
# Each day the male rat body weight increases by 5.9 g
for (i in 1:7){
BW <- BW + 5.9/1000
}
BW_init <- BW #Body weight at the beginning of the experiment
#Initialize a vector of daily body weight
BW <- c(BW_init, rep(NA, 27))
# Estimate the BW each day
for (i in 2:length(BW)){
BW[i] <- BW[i-1] + 5.9/1000
}
admin.dose_per_BW <- 20 # administered dose in mg PFOA/kg BW
admin.time <- seq(0,27*24,24) #time when doses are administered, in hours
admin.dose <- admin.dose_per_BW*BW*1e03#ug PFOA
admin.type <- "oral"
sex <- "M"
user_input <- list('BW'=BW_init,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,672,2)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
solution
rowSums(solution[,c(2:49)])
rowSums(solution[,c(2:52)])
rowSums(solution[,c(2:51)])
length(parameters)
RS -> c(time,  CalbVenf,  CalbArtf,   CalbKBf,   CalbLBf, CalbSTBf,  CalbINBf,   CalbMBf,   CalbABf,   CalbRBf,  CalbLuBf,  CalbSPBf,
CalbHBf,  CalbBrBf, CalbGoBf,  CalbSKBf,  CalbBoBf,   CalbKFf,   CalbLFf,  CalbSTFf,  CalbINFf,   CalbMFf,   CalbAFf,
CalbRFf,  CalbLuFf,  CalbSPFf ,  CalbHFf, CalBrFf,  CalbGoFf,  CalbSKFf,   CalbBoFf,   Ca2uKTf,    CFabpKTf,  CFabpLTf,
CalbLuAFf,        MVenb,        MArtb,         MKBb, MLBb,       MSTBb,        MINBb,         MMBb ,        MABb ,
MRBb ,       MLuBb  ,      MSPBb  ,       MHBb    ,    MBrBb, MGoBb     ,   MSKBb      ,  MBoBb      ,   MKFb     ,
MLFb   ,     MSTFb    ,    MINFb     ,    MMFb       ,  MAFb     ,    MRFb, MLuFb     ,   MSPFb     ,    MHFb  ,
MBrFb     ,   MGoFb     ,   MSKFb    ,    MBoFb      ,   MKTb       ,  MLTb, MLuAFb  ,  MArtf,
MVenf  ,   MKBf  ,   MKFf   ,  MKTf   ,   MFil   ,  MLBf    , MLFf   ,  MLTf    , MSTBf  ,   MSTFf    ,MSTTf    ,
MSTL  ,   MINBf  ,  MINFf, MINTf      ,  MINL,     MMBf     ,MMFf    , MMTf   ,  MABf   ,  MAFf  ,   MATf  ,
MRBf  ,   MRFf    , MRTf  ,   MLuBf  ,   MLuFf  ,  MLuTf, MLuAFf  ,   MSPBf   , MSPFf   ,   MSPTf     , MHBf   ,   MHFf     ,
MHTf   ,  MBrBf ,   MBrFf ,   MBrTf   , MGoBf  ,   MGoFf   , MGoTf   , MSKBf,
MSKFf   ,  MSKTf   , MBoBf    ,MBoFf  ,  MBoTf  , Mfeces ,  Murine)
length(RS)
optimizer
length(RS)
length_of_RS
RS <- c(
"time", "CalbVenf", "CalbArtf", "CalbKBf", "CalbLBf", "CalbSTBf", "CalbINBf", "CalbMBf", "CalbABf", "CalbRBf", "CalbLuBf", "CalbSPBf",
"CalbHBf", "CalbBrBf", "CalbGoBf", "CalbSKBf", "CalbBoBf", "CalbKFf", "CalbLFf", "CalbSTFf", "CalbINFf", "CalbMFf", "CalbAFf",
"CalbRFf", "CalbLuFf", "CalbSPFf", "CalbHFf", "CalBrFf", "CalbGoFf", "CalbSKFf", "CalbBoFf", "Ca2uKTf", "CFabpKTf", "CFabpLTf",
"CalbLuAFf", "MVenb", "MArtb", "MKBb", "MLBb", "MSTBb", "MINBb", "MMBb", "MABb",
"MRBb", "MLuBb", "MSPBb", "MHBb", "MBrBb", "MGoBb", "MSKBb", "MBoBb", "MKFb",
"MLFb", "MSTFb", "MINFb", "MMFb", "MAFb", "MRFb", "MLuFb", "MSPFb", "MHFb",
"MBrFb", "MGoFb", "MSKFb", "MBoFb", "MKTb", "MLTb", "MLuAFb", "MArtf",
"MVenf", "MKBf", "MKFf", "MKTf", "MFil", "MLBf", "MLFf", "MLTf", "MSTBf", "MSTFf", "MSTTf",
"MSTL", "MINBf", "MINFf", "MINTf", "MINL", "MMBf", "MMFf", "MMTf", "MABf", "MAFf", "MATf",
"MRBf", "MRFf", "MRTf", "MLuBf", "MLuFf", "MLuTf", "MLuAFf", "MSPBf", "MSPFf", "MSPTf", "MHBf", "MHFf",
"MHTf", "MBrBf", "MBrFf", "MBrTf", "MGoBf", "MGoFf", "MGoTf", "MSKBf",
"MSKFf", "MSKTf", "MBoBf", "MBoFf", "MBoTf", "Mfeces", "Murine"
)
length_of_RS <- length(RS)
length_of_RS
rowSums(solution[,c(35:118)])
rowSums(solution[,c(2:118)])
rowSums(solution[,c(34:118)])
RS <- c(
"time", "CalbVenf", "CalbArtf", "CalbKBf", "CalbLBf", "CalbSTBf", "CalbINBf", "CalbMBf", "CalbABf", "CalbRBf", "CalbLuBf", "CalbSPBf",
"CalbHBf", "CalbBrBf", "CalbGoBf", "CalbSKBf", "CalbBoBf", "CalbKFf", "CalbLFf", "CalbSTFf", "CalbINFf", "CalbMFf", "CalbAFf",
"CalbRFf", "CalbLuFf", "CalbSPFf", "CalbHFf", "CalBrFf", "CalbGoFf", "CalbSKFf", "CalbBoFf", "Ca2uKTf", "CFabpKTf", "CFabpLTf",
"CalbLuAFf"
)
length_of_RS <- length(RS)
length_of_RS
rowSums(solution[,c(36:118)])
solution
solution(tail)
tail(solution)
solution
RS <- c(
"time", "CalbVenf", "CalbArtf", "CalbKBf", "CalbLBf", "CalbSTBf", "CalbINBf", "CalbMBf", "CalbABf", "CalbRBf", "CalbLuBf", "CalbSPBf",
"CalbHBf", "CalbBrBf", "CalbGoBf", "CalbSKBf", "CalbBoBf", "CalbKFf", "CalbLFf", "CalbSTFf", "CalbINFf", "CalbMFf", "CalbAFf",
"CalbRFf", "CalbLuFf", "CalbSPFf", "CalbHFf", "CalBrFf", "CalbGoFf", "CalbSKFf", "CalbBoFf", "Ca2uKTf", "CFabpKTf", "CFabpLTf",
"CalbLuAFf", "MVenb", "MArtb", "MKBb", "MLBb", "MSTBb", "MINBb", "MMBb", "MABb",
"MRBb", "MLuBb", "MSPBb", "MHBb", "MBrBb", "MGoBb", "MSKBb", "MBoBb", "MKFb",
"MLFb", "MSTFb", "MINFb", "MMFb", "MAFb", "MRFb", "MLuFb", "MSPFb", "MHFb",
"MBrFb", "MGoFb", "MSKFb", "MBoFb", "MKTb", "MLTb", "MLuAFb", "MArtf",
"MVenf", "MKBf", "MKFf", "MKTf", "MFil", "MLBf", "MLFf", "MLTf", "MSTBf", "MSTFf", "MSTTf",
"MSTL", "MINBf", "MINFf", "MINTf", "MINL", "MMBf", "MMFf", "MMTf", "MABf", "MAFf", "MATf",
"MRBf", "MRFf", "MRTf", "MLuBf", "MLuFf", "MLuTf", "MLuAFf", "MSPBf", "MSPFf", "MSPTf", "MHBf", "MHFf",
"MHTf", "MBrBf", "MBrFf", "MBrTf", "MGoBf", "MGoFf", "MGoTf", "MSKBf",
"MSKFf", "MSKTf", "MBoBf", "MBoFf", "MBoTf", "Mfeces", "Murine"
)
length_of_RS <- length(RS)
length_of_RS
RS <- c(
"time", "CalbVenf", "CalbArtf", "CalbKBf", "CalbLBf", "CalbSTBf", "CalbINBf", "CalbMBf", "CalbABf", "CalbRBf", "CalbLuBf", "CalbSPBf",
"CalbHBf", "CalbBrBf", "CalbGoBf", "CalbSKBf", "CalbBoBf", "CalbKFf", "CalbLFf", "CalbSTFf", "CalbINFf", "CalbMFf", "CalbAFf",
"CalbRFf", "CalbLuFf", "CalbSPFf", "CalbHFf", "CalBrFf", "CalbGoFf", "CalbSKFf", "CalbBoFf", "Ca2uKTf", "CFabpKTf", "CFabpLTf",
"CalbLuAFf"
)
length_of_RS <- length(RS)
length_of_RS
rowSums(solution[,c(36:118)])
rowSums(solution[,c(2:118)])
events
admin.dose
S5026 5144 5262 5380 5498 5616 5734 5852 5970 6088 6206 6324 6442 6560 6678 6796 6914 7032 7150 7268 7386 7504 7622 7740 7858 7976
5026+5144 +5262 +5380 +5498 +5616 +5734+ 5852 +5970 +6088 +6206 +6324 +6442+ 6560 +6678+ 6796 +6914 +7032 +7150 +7268 +7386 +7504 +7622+ 7740 +7858+ 7976+8094+ 8212
# Set up simulations for the 1st case, i.e. kudo (2007) high dose, tissues
BW <- 0.29  # body weight (kg)
admin.dose_per_g <- 16.56 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 # time when doses are administered, in hours
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,2,0.01)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-07, atol = 1e-07))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df1=========================================================
exp_data <- dataset$df1 # retrieve data of Kudo et al. 2007 high dose
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kudo_high <- as.data.frame(solution[solution$time %in% unique(exp_data$time), c("Cblood",
"Cliver","Ckidney", "Ccarcass",
"Clungs", "Cspleen", "Cheart",
"Cbrain", "Cgonads", "Cstomach", "Cintestine")]/1000) #convert ug/kg to ug/g
obs_kudo_high <- list(exp_data[exp_data$Tissue == "Blood", "concentration"],
exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"],
exp_data[exp_data$Tissue == "Carcass", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Spleen", "concentration"],
exp_data[exp_data$Tissue == "Heart", "concentration"],
exp_data[exp_data$Tissue == "Brain", "concentration"],
exp_data[exp_data$Tissue == "Gonads", "concentration"],
exp_data[exp_data$Tissue == "Stomach", "concentration"],
exp_data[exp_data$Tissue == "Intestine", "concentration"])
score[1] <- AAFE(predictions = preds_kudo_high, observations = obs_kudo_high)
solution
rowSums(solution[,c(36:118)])
BW <- 0.29  # body weight (kg)
admin.dose_per_g <- 0.041 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 # time when doses are administered, in hours
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,2,0.01)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
solution
rowSums(solution[,c(36:118)])
