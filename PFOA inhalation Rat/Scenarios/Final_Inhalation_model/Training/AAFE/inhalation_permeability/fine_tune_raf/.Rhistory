gus_OR_Mblood <- openxlsx::read.xlsx("Data/Gustafsson 2022_PFOA_Plasma Male rats_Oral.xlsx")
gus_OR_Mtissues <- openxlsx::read.xlsx("Data/Gustafsson 2022_PFOA_Tissues Male rats_Oral.xlsx")
gus_OR_Mtissues$Tissue[1] <- "ELF"
gus_INH_Mblood <- openxlsx::read.xlsx("Inhalation_data/Gustafsson 2022_PFOA_Plasma Male rats_Inhalation.xlsx")
gus_INH_Mtissues <- openxlsx::read.xlsx("Inhalation_data/Gustafsson 2022_PFOA_Tissues Male rats_Inhalation.xlsx")
gus_INH_Mtissues$Tissue[1] <- "ELF"
hind_INH_Mblood_low <- openxlsx::read.xlsx("Inhalation_data/Hinderliter_2006_male_plasma_single_Low_dose.xlsx")
hind_INH_Mblood_medium <- openxlsx::read.xlsx("Inhalation_data/Hinderliter_2006_male_plasma_single_Medium_dose.xlsx")
hind_INH_Mblood_high <- openxlsx::read.xlsx("Inhalation_data/Hinderliter_2006_male_plasma_single_High_dose.xlsx")
hind_INH_Fblood_low <- openxlsx::read.xlsx("Inhalation_data/Hinderliter_2006_female_plasma_single_Low_dose.xlsx")
hind_INH_Fblood_medium <- openxlsx::read.xlsx("Inhalation_data/Hinderliter_2006_female_plasma_single_Medium_dose.xlsx")
hind_INH_Fblood_high <- openxlsx::read.xlsx("Inhalation_data/Hinderliter_2006_female_plasma_single_High_dose.xlsx")
#setwd("C:/Users/user/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/Inhalation_based_on_scenario15_PT/Training/AAFE/Inhalation_scenario24e")
setwd('/Users/user/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/Final_Inhalation_model/Training/AAFE/inhalation_permeability/fine_tune_raf')
dataset <- list("df1" = kudo_high_dose, "df2" = kudo_low_dose, "df3" = kim_IV_Mtissues, "df4" = kim_OR_Mtissues,
"df5" = kim_IV_Ftissues, "df6" = kim_OR_Ftissues, "df7" = gus_OR_Mtissues, "df8" = gus_INH_Mblood,
"df9" = gus_INH_Mtissues, "df10" = hind_INH_Mblood_low, "df11" = hind_INH_Mblood_medium,
"df12" = hind_INH_Mblood_high,"df13" = hind_INH_Fblood_low,
"df14" = hind_INH_Fblood_medium, "df15" = hind_INH_Fblood_high)
#Initialise optimiser to NULL for better error handling later
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #""
"xtol_rel" = 1e-07,
"ftol_rel" = 1e-07,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0,
"maxeval" = 1000,
"print_level" = 1)
ClINFT_unscaled= 18.1 #uL/min/mg protein, Kimura et al. 2017
Awell = 9 #cm^2 (for a 35 mm culture dish)
Swell = 1.12 #cm^2
well_protein = 0.346 #mg protein
protein_per_well = (well_protein * Awell)/Swell #mg protein/well
Papp_Kimura = (ClINFT_unscaled*60*1e-06*1e3*protein_per_well)/Awell  #cm/h,at  pH = 6.0
Papp_RYU = 1.46e-6*3600 # cm/h, at pH = 7.4 from Ryu et al. (2024) [https://doi.org/10.1016/j.chemosphere.2024.142390]
# Create initial conditions (zero initialisation)
#Parameter names:
#  kabsUA, kCLEal, kCLEua, RAFlu
N_pars <- 2# Number of parameters to be fitted
fit <- c(1, 4.213369e-05)
lb	= c(1e-2, 2e-05)
ub = c(10, 6e-05)
fixed_params <- create_all_fixed_params()
# Run the optimization algorithm to estimate the parameter values
optimizer <- nloptr::nloptr( x0= fit,
eval_f = obj.func,
lb	= lb,
ub = ub,
opts = opts,
dataset = dataset,
fixed_params = fixed_params)
#estimated_params <- exp(optimizer$solution)
estimated_params <- (optimizer$solution)
save.image("fine_tune_raf.RData")
estimated_params
estimated_params
N_data <- length(dataset)
score <- rep(NA, N_data)
# Set up simulations for the 1st case, i.e. kudo (2007) high dose, tissues
BW <- 0.29  # body weight (kg)
sex <- "M"
variable_params <- create_variable_params(BW, sex,estimated_params, fixed_params[[1]])
params <- c(fixed_params[[1]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
sample_time=seq(0,2,0.1)
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
#======================================df1=========================================================
exp_data <- dataset$df1 # retrieve data of Kudo et al. 2007 high dose
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kudo_high <- as.data.frame(solution[solution$time %in% unique(exp_data$time), c("Clungs")]/1000) #convert ug/kg to ug/g
obs_kudo_high <- list(exp_data[exp_data$Tissue == "Lung", "concentration"])
score[1] <- AAFE(predictions = preds_kudo_high, observations = obs_kudo_high)
##########################
#-------------------------
# Kudo low
#-------------------------
##########################
# Set up simulations for the 2nd case, i.e. kudo (2007) low dose, tissues
BW <- 0.29  # body weight (kg)
sex <- "M"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[2]])
params <- c(fixed_params[[2]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,2,0.1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
#======================================df2=========================================================
exp_data <- dataset$df2 # retrieve data of Kudo et al. 2007 low dose
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kudo_low <- solution[solution$time %in% unique(exp_data$time), c("Clungs")]
preds_kudo_low<- as.data.frame(preds_kudo_low /1000) #convert ug/kg to ug/g
obs_kudo_low <- list(exp_data[exp_data$Tissue == "Lung", "concentration"])
score[2] <- AAFE(predictions = preds_kudo_low, observations = obs_kudo_low)
##########################
#-------------------------
# Kim IV male tissues
#-------------------------
##########################
# Set up simulations for the 3rd case, i.e. kim (2016) IV male tissues
BW <- 0.25 #kg, from Kim et al. 2018
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[3]])
params <- c(fixed_params[[3]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,288,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
#======================================df3=========================================================
exp_data <- dataset$df3 # retrieve data of kim (2016) IV male tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kim_IV_Mtissues <- solution[solution$time %in% unique(exp_data$time), c("Clungs")]
preds_kim_IV_Mtissues<- as.data.frame(preds_kim_IV_Mtissues /1000) #convert ug/kg to ug/g
obs_kim_IV_Mtissues <- list(exp_data[exp_data$Tissue == "Lung", "concentration"])
score[3] <- AAFE(predictions = preds_kim_IV_Mtissues, observations = obs_kim_IV_Mtissues)
##########################
#-------------------------
# Kim ORAL male tissues
#-------------------------
##########################
# Set up simulations for the 4th case, i.e. kim (2016) ORAL male tissues
BW <- 0.25 #kg, from Kim et al. 2018
sex <- "M"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[4]])
params <- c(fixed_params[[4]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,288,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
#======================================df4=========================================================
exp_data <- dataset$df4 # retrieve data of kim (2016) ORAL male tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kim_OR_Mtissues <- solution[solution$time %in% unique(exp_data$time), c("Clungs")]
preds_kim_OR_Mtissues<- as.data.frame(preds_kim_OR_Mtissues /1000) #convert ug/kg to ug/g
obs_kim_OR_Mtissues <- list(exp_data[exp_data$Tissue == "Lung", "concentration"])
score[4] <- AAFE(predictions = preds_kim_OR_Mtissues, observations = obs_kim_OR_Mtissues)
##########################
#-------------------------
# Kim IV female tissues
#-------------------------
##########################
# Set up simulations for the 5th case, i.e. kim (2016) IV female tissues
BW <- 0.25 #kg, from Kim et al. 2018
sex <- "F"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[5]])
params <- c(fixed_params[[5]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,24,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
#======================================df5=========================================================
exp_data <- dataset$df5 # retrieve data of kim (2016) ORAL female tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kim_IV_Ftissues <- solution[solution$time %in% unique(exp_data$time), c("Clungs")]
preds_kim_IV_Ftissues<- as.data.frame(preds_kim_IV_Ftissues /1000) #convert ug/kg to ug/g
obs_kim_IV_Ftissues <- list(exp_data[exp_data$Tissue == "Lung", "concentration"])
score[5] <- AAFE(predictions = preds_kim_IV_Ftissues, observations = obs_kim_IV_Ftissues)
##########################
#-------------------------
# Kim ORAL female tissues
#-------------------------
##########################
# Set up simulations for the 6th case, i.e. kim (2016) IV female tissues
BW <- 0.25 #kg, from Kim et al. 2018
sex <- "F"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[6]])
params <- c(fixed_params[[6]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,24,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
#======================================df6=========================================================
exp_data <- dataset$df6 # retrieve data of kim (2016) ORAL female tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
preds_kim_OR_Ftissues <- solution[solution$time %in% unique(exp_data$time), c("Clungs")]
preds_kim_OR_Ftissues<- as.data.frame(preds_kim_OR_Ftissues /1000) #convert ug/kg to ug/g
obs_kim_OR_Ftissues <- list(exp_data[exp_data$Tissue == "Lung", "concentration"])
score[6] <- AAFE(predictions = preds_kim_OR_Ftissues, observations = obs_kim_OR_Ftissues)
##########################
#-------------------------
# Gustafsson Oral male tissues
#-------------------------
##########################
# Set up simulations for the 28st case, i.e. Gustafsson (2022) oral male tissues
BW <- 0.5125  #kg, from Gustafsson et al., 2022
sex <- "M"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[7]])
params <- c(fixed_params[[7]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
sample_time= seq(0,48,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
#======================================df7=========================================================
exp_data <- dataset$df7 # retrieve data of Gustafsson (2022) oral male tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("CLuELF","Clungtissue")
preds_gus_OR_Mtissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_gus_OR_Mtissues [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_gus_OR_Mtissues <- list( exp_data[exp_data$Tissue == "ELF", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"])
score[7] <- AAFE(predictions = preds_gus_OR_Mtissues, observations = obs_gus_OR_Mtissues)
##########################
#-------------------------
# Gustafsson Inhalation male blood
#-------------------------
##########################
# Set up simulations for the 8th case, i.e. Gustafsson (2022) Inhalation male blood
BW <- 0.5125  #kg, from Gustafsson et al., 2022
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[8]])
params <- c(fixed_params[[8]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= sort(union(events$data$time, seq(0,48,1)))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df8=========================================================
exp_data <- dataset$df8 # retrieve data of Gustafsson (2022)
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_gus_INH_Mblood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_gus_INH_Mblood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_gus_INH_Mblood <- list(exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[8] <- AAFE(predictions = preds_gus_INH_Mblood, observations = obs_gus_INH_Mblood)
##########################
#-------------------------
# Gustafsson Inhalation male tissues
#-------------------------
##########################
#======================================df9=========================================================
exp_data <- dataset$df9 # retrieve data of Gustafsson (2022) Inhalation male tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("CLuELF","Cliver","Clungtissue", "Ckidney")
preds_gus_INH_Mtissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, "time"]
preds_gus_INH_Mtissues [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_gus_INH_Mtissues <- list(exp_data[exp_data$Tissue == "ELF", "concentration"],
exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"])
score[9] <- AAFE(predictions = preds_gus_INH_Mtissues, observations = obs_gus_INH_Mtissues)
column_names <- c("CLuELF")
preds_gus_INH_Mtissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, "time"]
preds_gus_INH_Mtissues [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_gus_INH_Mtissues <- list(exp_data[exp_data$Tissue == "ELF", "concentration"])
score[16] <- AAFE(predictions = preds_gus_INH_Mtissues, observations = obs_gus_INH_Mtissues)
##########################
#-------------------------
# Hinderliter Inhalation male single low
#-------------------------
##########################
# Set up simulations for the 10th case, i.e. Hinderliter Inhalation male single low
BW <- (0.311+0.195)/2  #kg, https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en
sex = "M"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[9]])
params <- c(fixed_params[[9]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= sort(union(events$data$time, seq(0,30,1)))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df10=========================================================
exp_data <- dataset$df10 # retrieve data of Hinderliter Inhalation male single low
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_hind_INH_Mblood_low <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_hind_INH_Mblood_low [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_hind_INH_Mblood_low <- list(exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[10] <- AAFE(predictions = preds_hind_INH_Mblood_low, observations = obs_hind_INH_Mblood_low)
##########################
#-------------------------
# Hinderliter Inhalation male single medium
#-------------------------
##########################
# Set up simulations for the 11th case, i.e. Hinderliter Inhalation male single medium
BW <- (0.311+0.195)/2  #kg, https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[10]])
params <- c(fixed_params[[10]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= sort(union(events$data$time, seq(0,30,1)))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df11=========================================================
exp_data <- dataset$df11 # retrieve data of Hinderliter Inhalation male single medium
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_hind_INH_Mblood_medium <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_hind_INH_Mblood_medium [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_hind_INH_Mblood_medium <- list(exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[11] <- AAFE(predictions = preds_hind_INH_Mblood_medium, observations = obs_hind_INH_Mblood_medium)
##########################
#-------------------------
# Hinderliter Inhalation male single high
#-------------------------
##########################
# Set up simulations for the 12th case, i.e. Hinderliter Inhalation male single high
BW <- (0.311+0.195)/2  #kg, https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[11]])
params <- c(fixed_params[[11]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= sort(c(0.5, union(events$data$time, seq(0,30,1))))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df12=========================================================
exp_data <- dataset$df12 # retrieve data of Hinderliter Inhalation male single high
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_hind_INH_Mblood_high <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_hind_INH_Mblood_high [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_hind_INH_Mblood_high <- list(exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[12] <- AAFE(predictions = preds_hind_INH_Mblood_high, observations = obs_hind_INH_Mblood_high)
##########################
#-------------------------
# Hinderliter Inhalation female single low
#-------------------------
##########################
# Set up simulations for the 13th case, i.e. Hinderliter Inhalation female single low
BW <- (0.197+0.145)/2  #kg,  https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en
sex <- "F"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[12]])
params <- c(fixed_params[[12]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= sort(union(events$data$time, seq(0,9,1)))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df13=========================================================
exp_data <- dataset$df13 # retrieve data of Hinderliter Inhalation male single low
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_hind_INH_Fblood_low <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_hind_INH_Fblood_low [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_hind_INH_Fblood_low <- list(exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[13] <- AAFE(predictions = preds_hind_INH_Fblood_low, observations = obs_hind_INH_Fblood_low)
##########################
#-------------------------
# Hinderliter Inhalation female single medium
#-------------------------
##########################
# Set up simulations for the 14th case, i.e. Hinderliter Inhalation female single low
BW <- (0.197+0.145)/2  #kg,  https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[13]])
params <- c(fixed_params[[13]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= sort(c(0.5, union(events$data$time, seq(0,12,1))))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df14=========================================================
exp_data <- dataset$df14 # retrieve data of Hinderliter Inhalation male single medium
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_hind_INH_Fblood_medium <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_hind_INH_Fblood_medium [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_hind_INH_Fblood_medium <- list (exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[14] <- AAFE(predictions = preds_hind_INH_Fblood_medium, observations = obs_hind_INH_Fblood_medium)
##########################
#-------------------------
# Hinderliter Inhalation female single high
#-------------------------
##########################
# Set up simulations for the 15th case, i.e. Hinderliter Inhalation female single high
BW <- (0.197+0.145)/2  #kg,  https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[14]])
params <- c(fixed_params[[14]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= sort(c(0.5,union(events$data$time, seq(0,12,1))))
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df15=========================================================
exp_data <- dataset$df15 # retrieve data of Hinderliter Inhalation male single high
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_hind_INH_Fblood_high <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_hind_INH_Fblood_high [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_hind_INH_Fblood_high <- list (exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[15] <- AAFE(predictions = preds_hind_INH_Fblood_high, observations = obs_hind_INH_Fblood_high)
score
mean(score)
