solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df28=========================================================
exp_data <- dataset$df28 # retrieve data of Gustafsson (2022) Oral male blood
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("Cplasma")
preds_gus_OR_Mblood <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_gus_OR_Mblood [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_gus_OR_Mblood <- list(exp_data[exp_data$Tissue == "Plasma", "concentration"])
score[28] <- AAFE(predictions = preds_gus_OR_Mblood, observations = obs_gus_OR_Mblood)
##########################
#-------------------------
# Gustafsson Oral male tissues
#-------------------------
##########################
# Set up simulations for the 29th case, i.e. Gustafsson (2022) Inhalation male tissues
BW <- 0.5125  #kg, from Gustafsson et al., 2022
sex <- "M"
admin.dose_per_g <- 0.364 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 #time when doses are administered, in hours
admin.type <- "oral"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex )
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time= seq(0,48,0.2)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
# We need to keep only the predictions for the relevant compartments for the time points
# at which we have available data.
#======================================df29=========================================================
exp_data <- dataset$df29 # retrieve data of Gustafsson (2022) oral male tissues
colnames(exp_data)[c(2,3)] <- c("time", "concentration")
column_names <- c("CalveolarLF","Cliver","Clungs", "Ckidney")
preds_gus_OR_Mtissues <- list()
# loop over compartments with available data
for (i in 1:length(unique(exp_data$Tissue))) {
compartment <- unique(exp_data$Tissue)[i]
#Retrieve time points at which measurements are available for compartment i
exp_time <- exp_data[exp_data$Tissue == compartment, 2]
preds_gus_OR_Mtissues [[i]] <- solution[solution$time %in% exp_time, column_names[i]]/1000
}
obs_gus_OR_Mtissues <- list( exp_data[exp_data$Tissue == "ALF", "concentration"],
exp_data[exp_data$Tissue == "Liver", "concentration"],
exp_data[exp_data$Tissue == "Lung", "concentration"],
exp_data[exp_data$Tissue == "Kidney", "concentration"])
score[29] <- AAFE(predictions = preds_gus_OR_Mtissues, observations = obs_gus_OR_Mtissues)
score
mean(score, na.rm = TRUE)
1/(1+10^(1-3.5))
0.54/0.25^0.25
0.54/0.2^0.25
0.54/0.4^0.25
estimated_params
estimated_params = 1
BW <- 0.29  # body weight (kg)
admin.dose_per_g <- 16.56 # administered dose in mg PFOA/kg BW
admin.dose <- admin.dose_per_g*BW*1e03 #ug PFOA
admin.time <- 0 # time when doses are administered, in hours
admin.type <- "iv"
sex <- "M"
user_input <- list('BW'=BW,
"admin.dose"= admin.dose,
"admin.time" = admin.time,
"admin.type" = admin.type,
"estimated_params" = estimated_params,
"sex" = sex)
time <- 1:23
time <- 1:864
print(1-exp(-time))
plot(time, (1-exp(-time))
plot(time, (1-exp(-time)))
time <- 1:24
time <- 1:190
plot(time, (1-exp(-time)))
plot(time, (1-exp(-2time)))
plot(time, (1-exp(-2*time)))
plot(time, (1-exp(-0.5*time)))
plot(time, (1-exp(-0.0.01*time)))
plot(time, (1-exp(-0.01*time)))
plot(time, (1-exp(-0.001*time)))
plot(time, (1-exp(-0.01*time)))
plot(time, (1-exp(-0.01*time)))
plot(time, (1-exp(-0.1*time)))
plot(time, (1-exp(-0.5*time)))
plot(time, (1-exp(-0.5*time)))
plot(time, (1-exp(-0.01*time)))
plot(time, (1-exp(-0.5*time)))
load("C:/Users/user/Desktop/fingolimod/fingolimod_1st_model/fingolimod_all_MAPE.RData")
opt_scores
estimated_params <- estimates_pars[[2]
KP_BR <- estimated_params[1]; CL_SE <- estimated_params[2]; CL_BR <- 0;
estimated_params <- estimates_pars[[2]
estimated_params <- estimates_pars[[2]]
KP_BR <- estimated_params[1]; CL_SE <- estimated_params[2]; CL_BR <- 0;
k_abs_oral_blood <- estimated_params[3];
k_abs_oral_lymph <- estimated_params[4];k_transit <- estimated_params[5];
k_abs_nasal <- estimated_params[6];k_NAtOLF <- estimated_params[7]
k_OLFtBR <- estimated_params[8];
k_release_f3 <- estimated_params[9];k_release_f4 <- estimated_params[10]
f_UB <- estimated_params[11]
##########################
#-------------------------
# Oral administration
#-------------------------
##########################
inits <- create.inits()
inits["C_GL"] <- dose$oral
sample_time=seq(0,2880,1)
params <- params_oral
params$KP_BR <- KP_BR
params$CL_SE <- CL_SE
params$CL_BR <- CL_BR
params$k_abs_oral_blood <- k_abs_oral_blood
params$k_transit <- k_transit
params$k_abs_oral_lymph <- k_abs_oral_lymph
params$k_OLFtBR <- 0
params$k_abs_nasal <- 0
params$k_NAtOLF <- 0
params$k_release <- 0
params$f_UB <- f_UB
solution_oral <- data.frame(deSolve::ode(times = sample_time,  func = fingolimod_model,
y = inits, parms = params,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_oral <- data.frame(time = solution_oral$time, plasma = solution_oral$C_SE,
brain = solution_oral$C_BR, olfactory = solution_oral$C_OLF)
##########################
#-------------------------
# f3 administration
#-------------------------
##########################
inits <- create.inits()
inits["C_NA_formulation"] <- dose$f3
sample_time=seq(0,360,1)
params <- params_oral
params$KP_BR <- KP_BR
params$CL_SE <- CL_SE
params$CL_BR <- 0
params$k_abs_oral_blood <- 0
params$k_transit <- 0
params$k_abs_oral_lymph <- 0
params$k_OLFtBR <- k_OLFtBR
params$k_abs_nasal <- k_abs_nasal
params$k_NAtOLF <- k_NAtOLF
params$k_release <- k_release_f3
params$f_UB <- f_UB
solution_f3 <- data.frame(deSolve::ode(times = sample_time,  func = fingolimod_model,
y = inits, parms = params,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_f3 <- data.frame(time = solution_f3$time, plasma = solution_f3$C_SE, brain = solution_f3$C_BR,
olfactory = solution_f3$C_OLF)
##########################
#-------------------------
# f4 administration
#-------------------------
##########################
inits <- create.inits()
inits["C_NA_formulation"] <- dose$f4
sample_time=seq(0,360,1)
params <- params_oral
params$KP_BR <- KP_BR
params$CL_SE <- CL_SE
params$CL_BR <- 0
params$k_abs_oral_blood <- 0
params$k_transit <- 0
params$k_abs_oral_lymph <- 0
params$k_OLFtBR <- k_OLFtBR
params$k_abs_nasal <- k_abs_nasal
params$k_NAtOLF <- k_NAtOLF
params$k_release <- k_release_f4
params$f_UB <- f_UB
solution_f4 <- data.frame(deSolve::ode(times = sample_time,  func = fingolimod_model,
y = inits, parms = params,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_f4 <- data.frame(time = solution_f4$time, plasma = solution_f4$C_SE, brain = solution_f4$C_BR,
olfactory = solution_f4$C_OLF)
oral_plasma <- ggplot(preds_oral) +
geom_line(aes(x = time, y = plasma), color = "black", size = 1) +
geom_point(data = oral_data$plasma, aes(x = time, y = mean), size = 2) +
geom_line(data = oral_data$plasma, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = oral_data$plasma, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "Oral Plasma", x = "Time", y = "Concentration")
library(tibble)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyselect)
library(deSolve)
library(ggpubr)
KP_BR <- estimated_params[1]; CL_SE <- estimated_params[2]; CL_BR <- 0;
k_abs_oral_blood <- estimated_params[3];
k_abs_oral_lymph <- estimated_params[4];k_transit <- estimated_params[5];
k_abs_nasal <- estimated_params[6];k_NAtOLF <- estimated_params[7]
k_OLFtBR <- estimated_params[8];
k_release_f3 <- estimated_params[9];k_release_f4 <- estimated_params[10]
f_UB <- estimated_params[11]
##########################
#-------------------------
# Oral administration
#-------------------------
##########################
inits <- create.inits()
inits["C_GL"] <- dose$oral
sample_time=seq(0,2880,1)
params <- params_oral
params$KP_BR <- KP_BR
params$CL_SE <- CL_SE
params$CL_BR <- CL_BR
params$k_abs_oral_blood <- k_abs_oral_blood
params$k_transit <- k_transit
params$k_abs_oral_lymph <- k_abs_oral_lymph
params$k_OLFtBR <- 0
params$k_abs_nasal <- 0
params$k_NAtOLF <- 0
params$k_release <- 0
params$f_UB <- f_UB
solution_oral <- data.frame(deSolve::ode(times = sample_time,  func = fingolimod_model,
y = inits, parms = params,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_oral <- data.frame(time = solution_oral$time, plasma = solution_oral$C_SE,
brain = solution_oral$C_BR, olfactory = solution_oral$C_OLF)
##########################
#-------------------------
# f3 administration
#-------------------------
##########################
inits <- create.inits()
inits["C_NA_formulation"] <- dose$f3
sample_time=seq(0,360,1)
params <- params_oral
params$KP_BR <- KP_BR
params$CL_SE <- CL_SE
params$CL_BR <- 0
params$k_abs_oral_blood <- 0
params$k_transit <- 0
params$k_abs_oral_lymph <- 0
params$k_OLFtBR <- k_OLFtBR
params$k_abs_nasal <- k_abs_nasal
params$k_NAtOLF <- k_NAtOLF
params$k_release <- k_release_f3
params$f_UB <- f_UB
solution_f3 <- data.frame(deSolve::ode(times = sample_time,  func = fingolimod_model,
y = inits, parms = params,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_f3 <- data.frame(time = solution_f3$time, plasma = solution_f3$C_SE, brain = solution_f3$C_BR,
olfactory = solution_f3$C_OLF)
##########################
#-------------------------
# f4 administration
#-------------------------
##########################
inits <- create.inits()
inits["C_NA_formulation"] <- dose$f4
sample_time=seq(0,360,1)
params <- params_oral
params$KP_BR <- KP_BR
params$CL_SE <- CL_SE
params$CL_BR <- 0
params$k_abs_oral_blood <- 0
params$k_transit <- 0
params$k_abs_oral_lymph <- 0
params$k_OLFtBR <- k_OLFtBR
params$k_abs_nasal <- k_abs_nasal
params$k_NAtOLF <- k_NAtOLF
params$k_release <- k_release_f4
params$f_UB <- f_UB
solution_f4 <- data.frame(deSolve::ode(times = sample_time,  func = fingolimod_model,
y = inits, parms = params,
method="lsodes",rtol = 1e-03, atol = 1e-03))
preds_f4 <- data.frame(time = solution_f4$time, plasma = solution_f4$C_SE, brain = solution_f4$C_BR,
olfactory = solution_f4$C_OLF)
oral_plasma <- ggplot(preds_oral) +
geom_line(aes(x = time, y = plasma), color = "black", size = 1) +
geom_point(data = oral_data$plasma, aes(x = time, y = mean), size = 2) +
geom_line(data = oral_data$plasma, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = oral_data$plasma, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "Oral Plasma", x = "Time", y = "Concentration")
oral_brain <- ggplot(preds_oral) +
geom_line(aes(x = time, y = brain), color = "black", size = 1) +
geom_point(data = oral_data$brain, aes(x = time, y = mean), size = 2) +
geom_line(data = oral_data$brain, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = oral_data$brain, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "Oral Brain", x = "Time", y = "Concentration")
# -------------------------
# f3 administration plots
# -------------------------
f3_plasma <- ggplot(preds_f3) +
geom_line(aes(x = time, y = plasma), color = "black", size = 1) +
geom_point(data = f3_data$plasma, aes(x = time, y = mean), size = 2) +
geom_line(data = f3_data$plasma, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = f3_data$plasma, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "f3 Plasma", x = "Time", y = "Concentration")
f3_brain <- ggplot(preds_f3) +
geom_line(aes(x = time, y = brain), color = "black", size = 1) +
geom_point(data = f3_data$brain, aes(x = time, y = mean), size = 2) +
geom_line(data = f3_data$brain, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = f3_data$brain, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "f3 Brain", x = "Time", y = "Concentration")
f3_olfactory <- ggplot(preds_f3) +
geom_line(aes(x = time, y = olfactory), color = "black", size = 1) +
geom_point(data = f3_data$olfactory, aes(x = time, y = mean), size = 2) +
geom_line(data = f3_data$olfactory, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = f3_data$olfactory, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "f3 Olfactory", x = "Time", y = "Concentration")
# -------------------------
# f4 administration plots
# -------------------------
f4_plasma <- ggplot(preds_f4) +
geom_line(aes(x = time, y = plasma), color = "black", size = 1) +
geom_point(data = f4_data$plasma, aes(x = time, y = mean), size = 2) +
geom_line(data = f4_data$plasma, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = f4_data$plasma, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "f4 Plasma", x = "Time", y = "Concentration")
f4_brain <- ggplot(preds_f4) +
geom_line(aes(x = time, y = brain), color = "black", size = 1) +
geom_point(data = f4_data$brain, aes(x = time, y = mean), size = 2) +
geom_line(data = f4_data$brain, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = f4_data$brain, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "f4 Brain", x = "Time", y = "Concentration")
f4_olfactory <- ggplot(preds_f4) +
geom_line(aes(x = time, y = olfactory), color = "black", size = 1) +
geom_point(data = f4_data$olfactory, aes(x = time, y = mean), size = 2) +
geom_line(data = f4_data$olfactory, aes(x = time, y = mean), color = "red", size = 1, linetype = "dashed") +
geom_errorbar(data = f4_data$olfactory, aes(x = time, ymin = pmax(0, mean - sd), ymax = mean + sd), width = 10, size = 0.7) +
labs(title = "f4 Olfactory", x = "Time", y = "Concentration")
# -------------------------
# Arranging all plots in a 3x3 layout
# -------------------------
combined_plot <- ggarrange(
oral_plasma, oral_brain, NULL,
f3_plasma, f3_brain, f3_olfactory,
f4_plasma, f4_brain, f4_olfactory,
ncol = 3, nrow = 3, align = "v"
)
# Display the combined plot
print(combined_plot)
k_abs_oral_blood
CL_SE
CL_BR
k_abs_oral_lymph
k_transit
head(solution_oral)
tail(solution_oral)
BW = 0.3
#Liver
PVL <- 3.66e-2 #Brown et al. 1997
VL <- PVL * BW #liver volume kg=L
L_FABP_L = 28.2e-3*liver_protein_per_rat/VL #mg/L, 28.2 ug/mg cytosolic protein from https://doi.org/10.1016/S0021-9258(18)34463-6
liver_protein_per_rat <- 1000*(1.52+1.53+1.52)/3#mg of protein per rat  (Addis 1936)
f_fabp_avail = 1
#LFABP concentration in kidney and liver tissue (mol/m^3)
L_FABP_L = 28.2e-3*liver_protein_per_rat/VL #mg/L, 28.2 ug/mg cytosolic protein from https://doi.org/10.1016/S0021-9258(18)34463-6
#cytosolic protein is 96.3% of the total liver protein, https://doi.org/10.18632/aging.101009
CFabpLT_init = f_fabp_avail*(L_FABP_L*1e-3/14e3) #[mol/L]
CFabpLT_init
KLfabp <-  (1.2e5+4e4+1.9e4) #[L/mol]*1e-3 , value from Cheng et al. (2017)
1/(1+KLfabp*CFabpLT_init)
KLfabp
load("~/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/permeability/no_IF_no_apical_one_permeability_koff_ka3e4/no_IF_no_apical_one_permeability_koff_ka3e4.RData")
BW <- 0.3  # body weight (kg) not reported, based on 8 week male rats from https://animal.ncku.edu.tw/p/412-1130-16363.php?Lang=en
sex <- "M"
variable_params <- create_variable_params(BW,sex,estimated_params, fixed_params[[7]])
params <- c(fixed_params[[7]], variable_params)
inits <- create.inits(params)
events <- create.events(params)
# sample_time: a vector of time points to solve the ODEs
sample_time=seq(0,864,1)
# ode(): The solver of the ODEs
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-02, atol = 1e-02))
solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
solution$Mkidney-solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
solution$Mkidney-(solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb)
(solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf)-(solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb)
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(df, aes(x = time, y = free))+
geom_line(aes(x = time, y = bounded))
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(df, aes(x = time, y = free))+
geom_line(x = time, y = bounded)
df
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(df, aes(x = time, y = free))+
geom_line(data = df,aes(x = time,y = bounded))
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(df, aes(x = time, y = free))+
geom_line(data = df,aes(x = time,y = bounded, colour = "red"))
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(df, aes(x = time, y = free, colour = "black"))+
geom_line(data = df,aes(x = time,y = bounded, colour = "red"))
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(data = df, aes(x = time, y = free, colour = "black"))+
geom_line(data = df,aes(x = time,y = bounded, colour = "red"))
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(data = df, aes(x = time, y = free, colour = "black"))+
geom_line(data = df,aes(x = time,y = bounded, colour = "red"))
free = solution$MKTrestf+solution$MPTCf+solution$MDALCf+solution$MDTCf+solution$MCDCf
bounded = solution$MKTrestb+solution$MPTCb+solution$MDALCb+solution$MDTCb+solution$MCDCb
df = data.frame(free = free, bounded = bounded, time = solution$time)
library(ggplot2)
ggplot(data = df, aes(x = time, y = free)) +
geom_line(color = "black") +
geom_line(aes(y = bounded), color = "red")
estimated_params
setwd( "C:/Users/user/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/Final_Inhalation_model/Training/AAFE/inhalation_permeability")
inh_df <- read.csv("gustaffson.csv")
mean(inh_df$concentration)
0.1354167*1e6
setwd( "C:/Users/user/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/Final_Inhalation_model/Training/AAFE/inhalation_permeability")
inh_df <- read.csv("gustaffson.csv")
mean(inh_df$concentration)
C_PFOA <- 0.333 #ug PFOA/mg dust
TV <- 3.89*1E-3 #L
BF <- 166 #breaths per minute
df <- 0.67
dose <- rep(NA, dim(inh_df)[1])
inh_df$time[1] <- 0.05
inh_df$time[2] <- 0.1
inh_df$time[3] <- 0.15
for (i in 1:(dim(inh_df)[1]-1)){
duration <- (inh_df$time[i+1] - inh_df$time[i]) #min
aerosol_con <-  1000*(inh_df$concentration[i]+inh_df$concentration[i+1])/2
if (aerosol_con < 0){
aerosol_con <- 0
}
dose[i] <- duration* aerosol_con *BF* TV*df#*C_PFOA
}
print(sum(dose, na.rm = TRUE))
setwd( "C:/Users/user/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/Final_Inhalation_model/Training/AAFE/inhalation_permeability")
inh_df <- read.csv("gustaffson.csv")
mean(inh_df$concentration)
C_PFOA <- 0.333 #ug PFOA/mg dust
TV <- 3.89*1E-3 #L
BF <- 166 #breaths per minute
df <- 0.67
dose <- rep(NA, dim(inh_df)[1])
inh_df$time[1] <- 0.05
inh_df$time[2] <- 0.1
inh_df$time[3] <- 0.15
for (i in 1:(dim(inh_df)[1]-1)){
duration <- (inh_df$time[i+1] - inh_df$time[i]) #min
aerosol_con <-  1000*(inh_df$concentration[i]+inh_df$concentration[i+1])/2
if (aerosol_con < 0){
aerosol_con <- 0
}
dose[i] <- duration* aerosol_con *0.34*df*C_PFOA
}
print(sum(dose, na.rm = TRUE))
setwd( "C:/Users/user/Documents/GitHub/PFAS_PBK_models/PFOA inhalation Rat/Scenarios/Final_Inhalation_model/Training/AAFE/inhalation_permeability")
inh_df <- read.csv("gustaffson.csv")
mean(inh_df$concentration)
C_PFOA <- 0.333 #ug PFOA/mg dust
TV <- 3.89*1E-3 #L
BF <- 166 #breaths per minute
df <- 0.67
dose <- rep(NA, dim(inh_df)[1])
inh_df$time[1] <- 0.05
inh_df$time[2] <- 0.1
inh_df$time[3] <- 0.15
for (i in 1:(dim(inh_df)[1]-1)){
duration <- (inh_df$time[i+1] - inh_df$time[i]) #min
aerosol_con <-  1000*(inh_df$concentration[i]+inh_df$concentration[i+1])/2
if (aerosol_con < 0){
aerosol_con <- 0
}
dose[i] <- duration* aerosol_con *0.34*df#*C_PFOA
}
print(sum(dose, na.rm = TRUE))
0.51*0.512*0.67
